

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Thu Jun 15 17:07:56 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1,inline
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1,inline
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1,inline
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    43                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    44                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    45                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    46   000000                     
    47                           ; Version 2.40
    48                           ; Generated 17/11/2021 GMT
    49                           ; 
    50                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    51                           ; All rights reserved.
    52                           ; 
    53                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    54                           ; 
    55                           ; Redistribution and use in source and binary forms, with or without modification, are
    56                           ; permitted provided that the following conditions are met:
    57                           ; 
    58                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    59                           ;        conditions and the following disclaimer.
    60                           ; 
    61                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    62                           ;        of conditions and the following disclaimer in the documentation and/or other
    63                           ;        materials provided with the distribution. Publication is not required when
    64                           ;        this file is used in an embedded application.
    65                           ; 
    66                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    67                           ;        software without specific prior written permission.
    68                           ; 
    69                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    70                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    71                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    72                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    73                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    74                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    75                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    76                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    77                           ; 
    78                           ; 
    79                           ; Code-generator required, PIC18F4620 Definitions
    80                           ; 
    81                           ; SFR Addresses
    82   000000                     
    83                           	psect	idataCOMRAM
    84   001E84                     __pidataCOMRAM:
    85                           	callstack 0
    86                           
    87                           ;initializer for _port_registers
    88   001E84  80                 	db	128
    89   001E85  0F                 	db	15
    90   001E86  81                 	db	129
    91   001E87  0F                 	db	15
    92   001E88  82                 	db	130
    93   001E89  0F                 	db	15
    94   001E8A  83                 	db	131
    95   001E8B  0F                 	db	15
    96   001E8C  84                 	db	132
    97   001E8D  0F                 	db	15
    98                           
    99                           ;initializer for _lat_registers
   100   001E8E  89                 	db	137
   101   001E8F  0F                 	db	15
   102   001E90  8A                 	db	138
   103   001E91  0F                 	db	15
   104   001E92  8B                 	db	139
   105   001E93  0F                 	db	15
   106   001E94  8C                 	db	140
   107   001E95  0F                 	db	15
   108   001E96  8D                 	db	141
   109   001E97  0F                 	db	15
   110                           
   111                           ;initializer for _tris_registers
   112   001E98  92                 	db	146
   113   001E99  0F                 	db	15
   114   001E9A  93                 	db	147
   115   001E9B  0F                 	db	15
   116   001E9C  94                 	db	148
   117   001E9D  0F                 	db	15
   118   001E9E  95                 	db	149
   119   001E9F  0F                 	db	15
   120   001EA0  96                 	db	150
   121   001EA1  0F                 	db	15
   122                           
   123                           ;initializer for _Lcd_Obj
   124   001EA2  02                 	db	2
   125   001EA3  0A                 	db	10
   126   001EA4  12                 	db	18
   127   001EA5  1A                 	db	26
   128   001EA6  22                 	db	34
   129   001EA7  2A                 	db	42
   130                           
   131                           ;initializer for _TimerDelay
   132   001EA8  DC                 	db	low _Timer0Interrupt
   133   001EA9  1E                 	db	high _Timer0Interrupt
   134   001EAA  00                 	db	0
   135   001EAB  FF9C               	dw	65436
   136   001EAD  0A                 	db	10
   137                           
   138                           ;initializer for _DC_Exit
   139   001EAE  13                 	db	19
   140   001EAF  1B                 	db	27
   141                           
   142                           ;initializer for _DC_Entry
   143   001EB0  03                 	db	3
   144   001EB1  0B                 	db	11
   145                           
   146                           ;initializer for _PinOfExit
   147   001EB2  49                 	db	73
   148                           
   149                           ;initializer for _PinOfEntry
   150   001EB3  41                 	db	65
   151   000000                     _TMR1L	set	4046
   152   000000                     _TMR1H	set	4047
   153   000000                     _TMR0L	set	4054
   154   000000                     _TMR0H	set	4055
   155   000000                     _PORTE	set	3972
   156   000000                     _PORTD	set	3971
   157   000000                     _PORTC	set	3970
   158   000000                     _PORTB	set	3969
   159   000000                     _PORTA	set	3968
   160   000000                     _LATA	set	3977
   161   000000                     _TRISA	set	3986
   162   000000                     _PIE1bits	set	3997
   163   000000                     _INTCONbits	set	4082
   164   000000                     _TRISE	set	3990
   165   000000                     _TRISD	set	3989
   166   000000                     _TRISC	set	3988
   167   000000                     _TRISB	set	3987
   168   000000                     _LATE	set	3981
   169   000000                     _LATD	set	3980
   170   000000                     _LATC	set	3979
   171   000000                     _LATB	set	3978
   172   000000                     _ADCON1bits	set	4033
   173   000000                     _T1CONbits	set	4045
   174   000000                     _T0CONbits	set	4053
   175   000000                     _PIR1bits	set	3998
   176                           
   177                           	psect	smallconst
   178   001000                     __psmallconst:
   179                           	callstack 0
   180   001000  00                 	db	0
   181   001001                     STR_5:
   182   001001  47                 	db	71	;'G'
   183   001002  61                 	db	97	;'a'
   184   001003  72                 	db	114	;'r'
   185   001004  61                 	db	97	;'a'
   186   001005  67                 	db	103	;'g'
   187   001006  65                 	db	101	;'e'
   188   001007  20                 	db	32
   189   001008  48                 	db	72	;'H'
   190   001009  61                 	db	97	;'a'
   191   00100A  76                 	db	118	;'v'
   192   00100B  65                 	db	101	;'e'
   193   00100C  20                 	db	32
   194   00100D  53                 	db	83	;'S'
   195   00100E  70                 	db	112	;'p'
   196   00100F  61                 	db	97	;'a'
   197   001010  63                 	db	99	;'c'
   198   001011  65                 	db	101	;'e'
   199   001012  00                 	db	0
   200   001013                     STR_4:
   201   001013  54                 	db	84	;'T'
   202   001014  68                 	db	104	;'h'
   203   001015  65                 	db	101	;'e'
   204   001016  72                 	db	114	;'r'
   205   001017  65                 	db	101	;'e'
   206   001018  20                 	db	32
   207   001019  41                 	db	65	;'A'
   208   00101A  72                 	db	114	;'r'
   209   00101B  65                 	db	101	;'e'
   210   00101C  20                 	db	32
   211   00101D  30                 	db	48	;'0'
   212   00101E  20                 	db	32
   213   00101F  43                 	db	67	;'C'
   214   001020  61                 	db	97	;'a'
   215   001021  72                 	db	114	;'r'
   216   001022  73                 	db	115	;'s'
   217   001023  00                 	db	0
   218   001024                     STR_6:
   219   001024  54                 	db	84	;'T'
   220   001025  68                 	db	104	;'h'
   221   001026  65                 	db	101	;'e'
   222   001027  72                 	db	114	;'r'
   223   001028  65                 	db	101	;'e'
   224   001029  20                 	db	32
   225   00102A  41                 	db	65	;'A'
   226   00102B  72                 	db	114	;'r'
   227   00102C  65                 	db	101	;'e'
   228   00102D  20                 	db	32
   229   00102E  33                 	db	51	;'3'
   230   00102F  20                 	db	32
   231   001030  43                 	db	67	;'C'
   232   001031  61                 	db	97	;'a'
   233   001032  72                 	db	114	;'r'
   234   001033  73                 	db	115	;'s'
   235   001034  00                 	db	0
   236   001035                     STR_7:
   237   001035  47                 	db	71	;'G'
   238   001036  61                 	db	97	;'a'
   239   001037  72                 	db	114	;'r'
   240   001038  61                 	db	97	;'a'
   241   001039  67                 	db	103	;'g'
   242   00103A  65                 	db	101	;'e'
   243   00103B  20                 	db	32
   244   00103C  49                 	db	73	;'I'
   245   00103D  73                 	db	115	;'s'
   246   00103E  20                 	db	32
   247   00103F  46                 	db	70	;'F'
   248   001040  75                 	db	117	;'u'
   249   001041  6C                 	db	108	;'l'
   250   001042  6C                 	db	108	;'l'
   251   001043  00                 	db	0
   252   001044                     STR_8:
   253   001044  54                 	db	84	;'T'
   254   001045  68                 	db	104	;'h'
   255   001046  65                 	db	101	;'e'
   256   001047  72                 	db	114	;'r'
   257   001048  65                 	db	101	;'e'
   258   001049  20                 	db	32
   259   00104A  41                 	db	65	;'A'
   260   00104B  72                 	db	114	;'r'
   261   00104C  65                 	db	101	;'e'
   262   00104D  20                 	db	32
   263   00104E  00                 	db	0
   264   00104F                     STR_1:
   265   00104F  25                 	db	37
   266   001050  69                 	db	105	;'i'
   267   001051  00                 	db	0
   268   001052  00                 	db	0	; dummy byte at the end
   269   000000                     
   270                           ; #config settings
   271                           
   272                           	psect	cinit
   273   001E18                     __pcinit:
   274                           	callstack 0
   275   001E18                     start_initialization:
   276                           	callstack 0
   277   001E18                     __initialization:
   278                           	callstack 0
   279                           
   280                           ; Initialize objects allocated to COMRAM (48 bytes)
   281                           ; load TBLPTR registers with __pidataCOMRAM
   282   001E18  0E84               	movlw	low __pidataCOMRAM
   283   001E1A  6EF6               	movwf	tblptrl,c
   284   001E1C  0E1E               	movlw	high __pidataCOMRAM
   285   001E1E  6EF7               	movwf	tblptrh,c
   286   001E20  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   287   001E22  6EF8               	movwf	tblptru,c
   288   001E24  EE00  F001         	lfsr	0,__pdataCOMRAM
   289   001E28  EE10 F030          	lfsr	1,48
   290   001E2C                     copy_data0:
   291   001E2C  0009               	tblrd		*+
   292   001E2E  CFF5 FFEE          	movff	tablat,postinc0
   293   001E32  50E5               	movf	postdec1,w,c
   294   001E34  50E1               	movf	fsr1l,w,c
   295   001E36  E1FA               	bnz	copy_data0
   296                           
   297                           ; Clear objects allocated to COMRAM (16 bytes)
   298   001E38  EE00  F055         	lfsr	0,__pbssCOMRAM
   299   001E3C  0E10               	movlw	16
   300   001E3E                     clear_0:
   301   001E3E  6AEE               	clrf	postinc0,c
   302   001E40  06E8               	decf	wreg,f,c
   303   001E42  E1FD               	bnz	clear_0
   304   001E44                     end_of_initialization:
   305                           	callstack 0
   306   001E44                     __end_of__initialization:
   307                           	callstack 0
   308   001E44  9065               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   309   001E46  9265               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   310   001E48  0100               	movlb	0
   311   001E4A  EF2A  F008         	goto	_main	;jump to C main() function
   312                           
   313                           	psect	bssCOMRAM
   314   000055                     __pbssCOMRAM:
   315                           	callstack 0
   316   000055                     	ds	6
   317   00005B                     _preload_timer1:
   318                           	callstack 0
   319   00005B                     	ds	2
   320   00005D                     _TIMER1_interruptHandler:
   321                           	callstack 0
   322   00005D                     	ds	2
   323   00005F                     _preload_timer:
   324                           	callstack 0
   325   00005F                     	ds	2
   326   000061                     _TIMER0_interruptHandler:
   327                           	callstack 0
   328   000061                     	ds	2
   329   000063                     _u16DelayCounter:
   330                           	callstack 0
   331   000063                     	ds	2
   332                           
   333                           	psect	dataCOMRAM
   334   000001                     __pdataCOMRAM:
   335                           	callstack 0
   336   000001                     _port_registers:
   337                           	callstack 0
   338   000001                     	ds	10
   339   00000B                     _lat_registers:
   340                           	callstack 0
   341   00000B                     	ds	10
   342   000015                     _tris_registers:
   343                           	callstack 0
   344   000015                     	ds	10
   345   00001F                     _Lcd_Obj:
   346                           	callstack 0
   347   00001F                     	ds	6
   348   000025                     _TimerDelay:
   349                           	callstack 0
   350   000025                     	ds	6
   351   00002B                     _DC_Exit:
   352                           	callstack 0
   353   00002B                     	ds	2
   354   00002D                     _DC_Entry:
   355                           	callstack 0
   356   00002D                     	ds	2
   357   00002F                     _PinOfExit:
   358                           	callstack 0
   359   00002F                     	ds	1
   360   000030                     _PinOfEntry:
   361                           	callstack 0
   362   000030                     	ds	1
   363                           
   364                           	psect	cstackCOMRAM
   365   000031                     __pcstackCOMRAM:
   366                           	callstack 0
   367   000031                     ??_interruptManager:
   368   000031                     
   369                           ; 2 bytes @ 0x0
   370   000031                     	ds	2
   371   000033                     gpio_Pin_Derction_Intialize@pin_config:
   372                           	callstack 0
   373   000033                     gpio_Pin_Write_Logic@pin_config:
   374                           	callstack 0
   375   000033                     gpio_Pin_Read_Logic@pin_config:
   376                           	callstack 0
   377   000033                     Timer0_DeInit@_timer:
   378                           	callstack 0
   379   000033                     Timer0_prescaler_selcet@_timer:
   380                           	callstack 0
   381   000033                     Timer0_mode_of_register_size_selcet@_timer:
   382                           	callstack 0
   383   000033                     Timer0_mode_timer_or_counter_selcet@_timer:
   384                           	callstack 0
   385                           
   386                           ; 2 bytes @ 0x2
   387   000033                     	ds	2
   388   000035                     ??_Timer0_prescaler_selcet:
   389   000035                     ??_gpio_Pin_Derction_Intialize:
   390   000035                     gpio_Pin_Write_Logic@logic:
   391                           	callstack 0
   392   000035                     gpio_Pin_Read_Logic@logic:
   393                           	callstack 0
   394                           
   395                           ; 2 bytes @ 0x4
   396   000035                     	ds	1
   397   000036                     ??_gpio_Pin_Write_Logic:
   398   000036                     Timer0_Init@_timer:
   399                           	callstack 0
   400                           
   401                           ; 2 bytes @ 0x5
   402   000036                     	ds	1
   403   000037                     ??_gpio_Pin_Read_Logic:
   404                           
   405                           ; 1 bytes @ 0x6
   406   000037                     	ds	1
   407   000038                     ??_Timer0_Init:
   408                           
   409                           ; 1 bytes @ 0x7
   410   000038                     	ds	2
   411   00003A                     __TimerDelay_ms@u16CopyDelay:
   412                           	callstack 0
   413                           
   414                           ; 2 bytes @ 0x9
   415   00003A                     	ds	1
   416   00003B                     gpio_Pin_Derction_Intialize@ret:
   417                           	callstack 0
   418                           
   419                           ; 1 bytes @ 0xA
   420   00003B                     	ds	1
   421   00003C                     gpio_Pin_Write_Logic@ret:
   422                           	callstack 0
   423                           
   424                           ; 1 bytes @ 0xB
   425   00003C                     	ds	1
   426   00003D                     gpio_Pin_Intialize@pin_config:
   427                           	callstack 0
   428   00003D                     send_data_4bit_mode@_lcd:
   429                           	callstack 0
   430   00003D                     send_4bit_mode_enable@_lcd:
   431                           	callstack 0
   432   00003D                     dc_motor_move_right@dc_motor:
   433                           	callstack 0
   434   00003D                     dc_motor_move_left@dc_motor:
   435                           	callstack 0
   436   00003D                     dc_motor_stop@dc_motor:
   437                           	callstack 0
   438                           
   439                           ; 2 bytes @ 0xC
   440   00003D                     	ds	2
   441   00003F                     ??_gpio_Pin_Intialize:
   442   00003F                     send_data_4bit_mode@data:
   443                           	callstack 0
   444   00003F                     send_4bit_mode_enable@ret:
   445                           	callstack 0
   446   00003F                     dc_motor_move_right@ret:
   447                           	callstack 0
   448   00003F                     dc_motor_move_left@ret:
   449                           	callstack 0
   450   00003F                     dc_motor_stop@ret:
   451                           	callstack 0
   452                           
   453                           ; 1 bytes @ 0xE
   454   00003F                     	ds	1
   455   000040                     gpio_Pin_Intialize@ret:
   456                           	callstack 0
   457   000040                     send_data_4bit_mode@ret:
   458                           	callstack 0
   459                           
   460                           ; 1 bytes @ 0xF
   461   000040                     	ds	1
   462   000041                     lcd_4bit_send_command@_lcd:
   463                           	callstack 0
   464   000041                     lcd_4bit_send_char_data@_lcd:
   465                           	callstack 0
   466   000041                     dc_motor_initialize@dc_motor:
   467                           	callstack 0
   468                           
   469                           ; 2 bytes @ 0x10
   470   000041                     	ds	2
   471   000043                     lcd_4bit_send_command@command:
   472                           	callstack 0
   473   000043                     lcd_4bit_send_char_data@data:
   474                           	callstack 0
   475   000043                     dc_motor_initialize@ret:
   476                           	callstack 0
   477                           
   478                           ; 1 bytes @ 0x12
   479   000043                     	ds	1
   480   000044                     lcd_4bit_send_command@ret:
   481                           	callstack 0
   482   000044                     lcd_4bit_send_char_data@ret:
   483                           	callstack 0
   484                           
   485                           ; 1 bytes @ 0x13
   486   000044                     	ds	1
   487   000045                     lcd_4bit_initialize@_lcd:
   488                           	callstack 0
   489   000045                     lcd_4bit_send_string_data@_lcd:
   490                           	callstack 0
   491   000045                     set_cursor_4bit_mode@_lcd:
   492                           	callstack 0
   493                           
   494                           ; 2 bytes @ 0x14
   495   000045                     	ds	2
   496   000047                     ??_lcd_4bit_initialize:
   497   000047                     set_cursor_4bit_mode@row:
   498                           	callstack 0
   499   000047                     lcd_4bit_send_string_data@str:
   500                           	callstack 0
   501                           
   502                           ; 2 bytes @ 0x16
   503   000047                     	ds	1
   504   000048                     set_cursor_4bit_mode@column:
   505                           	callstack 0
   506                           
   507                           ; 1 bytes @ 0x17
   508   000048                     	ds	1
   509   000049                     ??_set_cursor_4bit_mode:
   510   000049                     lcd_4bit_initialize@ret:
   511                           	callstack 0
   512                           
   513                           ; 1 bytes @ 0x18
   514   000049                     	ds	1
   515   00004A                     lcd_4bit_initialize@l_counter:
   516                           	callstack 0
   517                           
   518                           ; 1 bytes @ 0x19
   519   00004A                     	ds	1
   520   00004B                     set_cursor_4bit_mode@ret:
   521                           	callstack 0
   522                           
   523                           ; 1 bytes @ 0x1A
   524   00004B                     	ds	1
   525   00004C                     lcd_4bit_send_char_data_pos@_lcd:
   526                           	callstack 0
   527   00004C                     lcd_4bit_send_string_data_pos@_lcd:
   528                           	callstack 0
   529                           
   530                           ; 2 bytes @ 0x1B
   531   00004C                     	ds	2
   532   00004E                     lcd_4bit_send_char_data_pos@row:
   533                           	callstack 0
   534   00004E                     lcd_4bit_send_string_data_pos@row:
   535                           	callstack 0
   536                           
   537                           ; 1 bytes @ 0x1D
   538   00004E                     	ds	1
   539   00004F                     lcd_4bit_send_char_data_pos@column:
   540                           	callstack 0
   541   00004F                     lcd_4bit_send_string_data_pos@column:
   542                           	callstack 0
   543                           
   544                           ; 1 bytes @ 0x1E
   545   00004F                     	ds	1
   546   000050                     lcd_4bit_send_char_data_pos@data:
   547                           	callstack 0
   548   000050                     lcd_4bit_send_string_data_pos@str:
   549                           	callstack 0
   550                           
   551                           ; 2 bytes @ 0x1F
   552   000050                     	ds	1
   553   000051                     lcd_4bit_send_char_data_pos@ret:
   554                           	callstack 0
   555                           
   556                           ; 1 bytes @ 0x20
   557   000051                     	ds	1
   558   000052                     main@u8ReadEntryPin:
   559                           	callstack 0
   560                           
   561                           ; 1 bytes @ 0x21
   562   000052                     	ds	1
   563   000053                     main@u8ReadExitPin:
   564                           	callstack 0
   565                           
   566                           ; 1 bytes @ 0x22
   567   000053                     	ds	1
   568   000054                     main@u8Counter:
   569                           	callstack 0
   570                           
   571                           ; 1 bytes @ 0x23
   572   000054                     	ds	1
   573                           
   574 ;;
   575 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   576 ;;
   577 ;; *************** function _main *****************
   578 ;; Defined at:
   579 ;;		line 13 in file "application.c"
   580 ;; Parameters:    Size  Location     Type
   581 ;;		None
   582 ;; Auto vars:     Size  Location     Type
   583 ;;  u8Counter       1   35[COMRAM] unsigned char 
   584 ;;  u8ReadExitPi    1   34[COMRAM] unsigned char 
   585 ;;  u8ReadEntryP    1   33[COMRAM] unsigned char 
   586 ;; Return value:  Size  Location     Type
   587 ;;                  2  539[None  ] int 
   588 ;; Registers used:
   589 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   590 ;; Tracked objects:
   591 ;;		On entry : 0/0
   592 ;;		On exit  : 0/0
   593 ;;		Unchanged: 0/0
   594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   596 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   598 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   599 ;;Total ram usage:        3 bytes
   600 ;; Hardware stack levels required when called: 8
   601 ;; This function calls:
   602 ;;		__TimerDelay_ms
   603 ;;		_dc_motor_initialize
   604 ;;		_dc_motor_move_left
   605 ;;		_dc_motor_move_right
   606 ;;		_dc_motor_stop
   607 ;;		_gpio_Pin_Intialize
   608 ;;		_gpio_Pin_Read_Logic
   609 ;;		_lcd_4bit_initialize
   610 ;;		_lcd_4bit_send_char_data_pos
   611 ;;		_lcd_4bit_send_command
   612 ;;		_lcd_4bit_send_string_data
   613 ;;		_lcd_4bit_send_string_data_pos
   614 ;; This function is called by:
   615 ;;		Startup code after reset
   616 ;; This function uses a non-reentrant model
   617 ;;
   618                           
   619                           	psect	text0
   620   001054                     __ptext0:
   621                           	callstack 0
   622   001054                     _main:
   623                           	callstack 23
   624   001054                     
   625                           ;application.c: 15:     ADCON1bits.PCFG=0x0F;
   626   001054  0E0F               	movlw	15
   627   001056  12C1               	iorwf	193,f,c	;volatile
   628   001058                     
   629                           ;application.c: 16:     lcd_4bit_initialize(&Lcd_Obj);
   630   001058  0E1F               	movlw	low _Lcd_Obj
   631   00105A  6E45               	movwf	lcd_4bit_initialize@_lcd^0,c
   632   00105C  0E00               	movlw	high _Lcd_Obj
   633   00105E  6E46               	movwf	(lcd_4bit_initialize@_lcd+1)^0,c
   634   001060  EC8B  F00A         	call	_lcd_4bit_initialize	;wreg free
   635   001064                     
   636                           ;application.c: 17:     dc_motor_initialize(&DC_Entry);
   637   001064  0E2D               	movlw	low _DC_Entry
   638   001066  6E41               	movwf	dc_motor_initialize@dc_motor^0,c
   639   001068  0E00               	movlw	high _DC_Entry
   640   00106A  6E42               	movwf	(dc_motor_initialize@dc_motor+1)^0,c
   641   00106C  ECF0  F00E         	call	_dc_motor_initialize	;wreg free
   642   001070                     
   643                           ;application.c: 18:     dc_motor_initialize(&DC_Exit);
   644   001070  0E2B               	movlw	low _DC_Exit
   645   001072  6E41               	movwf	dc_motor_initialize@dc_motor^0,c
   646   001074  0E00               	movlw	high _DC_Exit
   647   001076  6E42               	movwf	(dc_motor_initialize@dc_motor+1)^0,c
   648   001078  ECF0  F00E         	call	_dc_motor_initialize	;wreg free
   649   00107C                     
   650                           ;application.c: 19:     gpio_Pin_Intialize(&PinOfEntry);
   651   00107C  0E30               	movlw	low _PinOfEntry
   652   00107E  6E3D               	movwf	gpio_Pin_Intialize@pin_config^0,c
   653   001080  0E00               	movlw	high _PinOfEntry
   654   001082  6E3E               	movwf	(gpio_Pin_Intialize@pin_config+1)^0,c
   655   001084  EC4A  F00D         	call	_gpio_Pin_Intialize	;wreg free
   656   001088                     
   657                           ;application.c: 20:     gpio_Pin_Intialize(&PinOfExit);
   658   001088  0E2F               	movlw	low _PinOfExit
   659   00108A  6E3D               	movwf	gpio_Pin_Intialize@pin_config^0,c
   660   00108C  0E00               	movlw	high _PinOfExit
   661   00108E  6E3E               	movwf	(gpio_Pin_Intialize@pin_config+1)^0,c
   662   001090  EC4A  F00D         	call	_gpio_Pin_Intialize	;wreg free
   663   001094                     
   664                           ;application.c: 21:     lcd_4bit_send_string_data(&Lcd_Obj,"There Are 0 Cars");
   665   001094  0E1F               	movlw	low _Lcd_Obj
   666   001096  6E45               	movwf	lcd_4bit_send_string_data@_lcd^0,c
   667   001098  0E00               	movlw	high _Lcd_Obj
   668   00109A  6E46               	movwf	(lcd_4bit_send_string_data@_lcd+1)^0,c
   669   00109C  0E13               	movlw	low STR_4
   670   00109E  6E47               	movwf	lcd_4bit_send_string_data@str^0,c
   671   0010A0  0E10               	movlw	high STR_4
   672   0010A2  6E48               	movwf	(lcd_4bit_send_string_data@str+1)^0,c
   673   0010A4  ECA7  F00D         	call	_lcd_4bit_send_string_data	;wreg free
   674   0010A8                     
   675                           ;application.c: 22:     lcd_4bit_send_string_data_pos(&Lcd_Obj,2,1,"Garage Have Space");
   676   0010A8  0E1F               	movlw	low _Lcd_Obj
   677   0010AA  6E4C               	movwf	lcd_4bit_send_string_data_pos@_lcd^0,c
   678   0010AC  0E00               	movlw	high _Lcd_Obj
   679   0010AE  6E4D               	movwf	(lcd_4bit_send_string_data_pos@_lcd+1)^0,c
   680   0010B0  0E02               	movlw	2
   681   0010B2  6E4E               	movwf	lcd_4bit_send_string_data_pos@row^0,c
   682   0010B4  0E01               	movlw	1
   683   0010B6  6E4F               	movwf	lcd_4bit_send_string_data_pos@column^0,c
   684   0010B8  0E01               	movlw	low STR_5
   685   0010BA  6E50               	movwf	lcd_4bit_send_string_data_pos@str^0,c
   686   0010BC  0E10               	movlw	high STR_5
   687   0010BE  6E51               	movwf	(lcd_4bit_send_string_data_pos@str+1)^0,c
   688   0010C0  EC13  F00D         	call	_lcd_4bit_send_string_data_pos	;wreg free
   689   0010C4                     
   690                           ;application.c: 23:     uint8 u8ReadEntryPin=GPIO_LOW;
   691   0010C4  0E00               	movlw	0
   692   0010C6  6E52               	movwf	main@u8ReadEntryPin^0,c
   693   0010C8                     
   694                           ;application.c: 24:     uint8 u8ReadExitPin=GPIO_LOW;
   695   0010C8  0E00               	movlw	0
   696   0010CA  6E53               	movwf	main@u8ReadExitPin^0,c
   697   0010CC                     
   698                           ;application.c: 25:     uint8 u8Counter=0;
   699   0010CC  0E00               	movlw	0
   700   0010CE  6E54               	movwf	main@u8Counter^0,c
   701   0010D0                     l540:
   702                           
   703                           ;application.c: 28:         gpio_Pin_Read_Logic(&PinOfEntry,&u8ReadEntryPin);
   704   0010D0  0E30               	movlw	low _PinOfEntry
   705   0010D2  6E33               	movwf	gpio_Pin_Read_Logic@pin_config^0,c
   706   0010D4  0E00               	movlw	high _PinOfEntry
   707   0010D6  6E34               	movwf	(gpio_Pin_Read_Logic@pin_config+1)^0,c
   708   0010D8  0E52               	movlw	low main@u8ReadEntryPin
   709   0010DA  6E35               	movwf	gpio_Pin_Read_Logic@logic^0,c
   710   0010DC  0E00               	movlw	high main@u8ReadEntryPin
   711   0010DE  6E36               	movwf	(gpio_Pin_Read_Logic@logic+1)^0,c
   712   0010E0  EC7A  F00B         	call	_gpio_Pin_Read_Logic	;wreg free
   713   0010E4                     
   714                           ;application.c: 29:         if((u8ReadEntryPin==GPIO_HIGH) && (u8Counter < 3) && (u8Coun
      +                          ter >= 0)){
   715   0010E4  0452               	decf	main@u8ReadEntryPin^0,w,c
   716   0010E6  A4D8               	btfss	status,2,c
   717   0010E8  EF78  F008         	goto	u1781
   718   0010EC  EF7A  F008         	goto	u1780
   719   0010F0                     u1781:
   720   0010F0  EFD7  F008         	goto	l2839
   721   0010F4                     u1780:
   722   0010F4  0E03               	movlw	3
   723   0010F6  6054               	cpfslt	main@u8Counter^0,c
   724   0010F8  EF80  F008         	goto	u1791
   725   0010FC  EF82  F008         	goto	u1790
   726   001100                     u1791:
   727   001100  EFD7  F008         	goto	l2839
   728   001104                     u1790:
   729   001104                     
   730                           ;application.c: 30:             u8Counter++;
   731   001104  2A54               	incf	main@u8Counter^0,f,c
   732   001106                     
   733                           ;application.c: 31:             lcd_4bit_send_char_data_pos(&Lcd_Obj,1,11,u8Counter+0x30
      +                          );
   734   001106  0E1F               	movlw	low _Lcd_Obj
   735   001108  6E4C               	movwf	lcd_4bit_send_char_data_pos@_lcd^0,c
   736   00110A  0E00               	movlw	high _Lcd_Obj
   737   00110C  6E4D               	movwf	(lcd_4bit_send_char_data_pos@_lcd+1)^0,c
   738   00110E  0E01               	movlw	1
   739   001110  6E4E               	movwf	lcd_4bit_send_char_data_pos@row^0,c
   740   001112  0E0B               	movlw	11
   741   001114  6E4F               	movwf	lcd_4bit_send_char_data_pos@column^0,c
   742   001116  5054               	movf	main@u8Counter^0,w,c
   743   001118  0F30               	addlw	48
   744   00111A  6E50               	movwf	lcd_4bit_send_char_data_pos@data^0,c
   745   00111C  EC4E  F00E         	call	_lcd_4bit_send_char_data_pos	;wreg free
   746   001120                     
   747                           ;application.c: 32:             if(u8Counter==3){
   748   001120  0E03               	movlw	3
   749   001122  1854               	xorwf	main@u8Counter^0,w,c
   750   001124  A4D8               	btfss	status,2,c
   751   001126  EF97  F008         	goto	u1801
   752   00112A  EF99  F008         	goto	u1800
   753   00112E                     u1801:
   754   00112E  EFB9  F008         	goto	l542
   755   001132                     u1800:
   756   001132                     
   757                           ;application.c: 33:                 lcd_4bit_send_command(&Lcd_Obj,0x01);
   758   001132  0E1F               	movlw	low _Lcd_Obj
   759   001134  6E41               	movwf	lcd_4bit_send_command@_lcd^0,c
   760   001136  0E00               	movlw	high _Lcd_Obj
   761   001138  6E42               	movwf	(lcd_4bit_send_command@_lcd+1)^0,c
   762   00113A  0E01               	movlw	1
   763   00113C  6E43               	movwf	lcd_4bit_send_command@command^0,c
   764   00113E  ECDA  F00C         	call	_lcd_4bit_send_command	;wreg free
   765   001142                     
   766                           ;application.c: 34:                 lcd_4bit_send_string_data(&Lcd_Obj,"There Are 3 Cars
      +                          ");
   767   001142  0E1F               	movlw	low _Lcd_Obj
   768   001144  6E45               	movwf	lcd_4bit_send_string_data@_lcd^0,c
   769   001146  0E00               	movlw	high _Lcd_Obj
   770   001148  6E46               	movwf	(lcd_4bit_send_string_data@_lcd+1)^0,c
   771   00114A  0E24               	movlw	low STR_6
   772   00114C  6E47               	movwf	lcd_4bit_send_string_data@str^0,c
   773   00114E  0E10               	movlw	high STR_6
   774   001150  6E48               	movwf	(lcd_4bit_send_string_data@str+1)^0,c
   775   001152  ECA7  F00D         	call	_lcd_4bit_send_string_data	;wreg free
   776   001156                     
   777                           ;application.c: 35:                 lcd_4bit_send_string_data_pos(&Lcd_Obj,2,1,"Garage I
      +                          s Full");
   778   001156  0E1F               	movlw	low _Lcd_Obj
   779   001158  6E4C               	movwf	lcd_4bit_send_string_data_pos@_lcd^0,c
   780   00115A  0E00               	movlw	high _Lcd_Obj
   781   00115C  6E4D               	movwf	(lcd_4bit_send_string_data_pos@_lcd+1)^0,c
   782   00115E  0E02               	movlw	2
   783   001160  6E4E               	movwf	lcd_4bit_send_string_data_pos@row^0,c
   784   001162  0E01               	movlw	1
   785   001164  6E4F               	movwf	lcd_4bit_send_string_data_pos@column^0,c
   786   001166  0E35               	movlw	low STR_7
   787   001168  6E50               	movwf	lcd_4bit_send_string_data_pos@str^0,c
   788   00116A  0E10               	movlw	high STR_7
   789   00116C  6E51               	movwf	(lcd_4bit_send_string_data_pos@str+1)^0,c
   790   00116E  EC13  F00D         	call	_lcd_4bit_send_string_data_pos	;wreg free
   791   001172                     l542:
   792                           
   793                           ;application.c: 37:             dc_motor_move_right(&DC_Entry);
   794   001172  0E2D               	movlw	low _DC_Entry
   795   001174  6E3D               	movwf	dc_motor_move_right@dc_motor^0,c
   796   001176  0E00               	movlw	high _DC_Entry
   797   001178  6E3E               	movwf	(dc_motor_move_right@dc_motor+1)^0,c
   798   00117A  EC91  F00E         	call	_dc_motor_move_right	;wreg free
   799   00117E                     
   800                           ;application.c: 38:             _TimerDelay_ms(1000);
   801   00117E  0E03               	movlw	3
   802   001180  6E3B               	movwf	(__TimerDelay_ms@u16CopyDelay+1)^0,c
   803   001182  0EE8               	movlw	232
   804   001184  6E3A               	movwf	__TimerDelay_ms@u16CopyDelay^0,c
   805   001186  ECFD  F00D         	call	__TimerDelay_ms	;wreg free
   806   00118A                     
   807                           ;application.c: 39:             dc_motor_move_left(&DC_Entry);
   808   00118A  0E2D               	movlw	low _DC_Entry
   809   00118C  6E3D               	movwf	dc_motor_move_left@dc_motor^0,c
   810   00118E  0E00               	movlw	high _DC_Entry
   811   001190  6E3E               	movwf	(dc_motor_move_left@dc_motor+1)^0,c
   812   001192  ECB1  F00E         	call	_dc_motor_move_left	;wreg free
   813                           
   814                           ;application.c: 40:              _TimerDelay_ms(1000);
   815   001196  0E03               	movlw	3
   816   001198  6E3B               	movwf	(__TimerDelay_ms@u16CopyDelay+1)^0,c
   817   00119A  0EE8               	movlw	232
   818   00119C  6E3A               	movwf	__TimerDelay_ms@u16CopyDelay^0,c
   819   00119E  ECFD  F00D         	call	__TimerDelay_ms	;wreg free
   820   0011A2                     
   821                           ;application.c: 41:              dc_motor_stop(&DC_Entry);
   822   0011A2  0E2D               	movlw	low _DC_Entry
   823   0011A4  6E3D               	movwf	dc_motor_stop@dc_motor^0,c
   824   0011A6  0E00               	movlw	high _DC_Entry
   825   0011A8  6E3E               	movwf	(dc_motor_stop@dc_motor+1)^0,c
   826   0011AA  EC71  F00E         	call	_dc_motor_stop	;wreg free
   827   0011AE                     l2839:
   828                           
   829                           ;application.c: 45:         gpio_Pin_Read_Logic(&PinOfExit,&u8ReadExitPin);
   830   0011AE  0E2F               	movlw	low _PinOfExit
   831   0011B0  6E33               	movwf	gpio_Pin_Read_Logic@pin_config^0,c
   832   0011B2  0E00               	movlw	high _PinOfExit
   833   0011B4  6E34               	movwf	(gpio_Pin_Read_Logic@pin_config+1)^0,c
   834   0011B6  0E53               	movlw	low main@u8ReadExitPin
   835   0011B8  6E35               	movwf	gpio_Pin_Read_Logic@logic^0,c
   836   0011BA  0E00               	movlw	high main@u8ReadExitPin
   837   0011BC  6E36               	movwf	(gpio_Pin_Read_Logic@logic+1)^0,c
   838   0011BE  EC7A  F00B         	call	_gpio_Pin_Read_Logic	;wreg free
   839   0011C2                     
   840                           ;application.c: 46:         if((u8ReadExitPin==GPIO_HIGH) && (u8Counter > 0) && (u8Count
      +                          er <=3)){
   841   0011C2  0453               	decf	main@u8ReadExitPin^0,w,c
   842   0011C4  A4D8               	btfss	status,2,c
   843   0011C6  EFE7  F008         	goto	u1811
   844   0011CA  EFE9  F008         	goto	u1810
   845   0011CE                     u1811:
   846   0011CE  EF68  F008         	goto	l540
   847   0011D2                     u1810:
   848   0011D2  5054               	movf	main@u8Counter^0,w,c
   849   0011D4  B4D8               	btfsc	status,2,c
   850   0011D6  EFEF  F008         	goto	u1821
   851   0011DA  EFF1  F008         	goto	u1820
   852   0011DE                     u1821:
   853   0011DE  EF68  F008         	goto	l540
   854   0011E2                     u1820:
   855   0011E2  0E04               	movlw	4
   856   0011E4  6054               	cpfslt	main@u8Counter^0,c
   857   0011E6  EFF7  F008         	goto	u1831
   858   0011EA  EFF9  F008         	goto	u1830
   859   0011EE                     u1831:
   860   0011EE  EF68  F008         	goto	l540
   861   0011F2                     u1830:
   862   0011F2                     
   863                           ;application.c: 47:             u8Counter--;
   864   0011F2  0654               	decf	main@u8Counter^0,f,c
   865   0011F4                     
   866                           ;application.c: 48:             lcd_4bit_send_command(&Lcd_Obj,0x01);
   867   0011F4  0E1F               	movlw	low _Lcd_Obj
   868   0011F6  6E41               	movwf	lcd_4bit_send_command@_lcd^0,c
   869   0011F8  0E00               	movlw	high _Lcd_Obj
   870   0011FA  6E42               	movwf	(lcd_4bit_send_command@_lcd+1)^0,c
   871   0011FC  0E01               	movlw	1
   872   0011FE  6E43               	movwf	lcd_4bit_send_command@command^0,c
   873   001200  ECDA  F00C         	call	_lcd_4bit_send_command	;wreg free
   874   001204                     
   875                           ;application.c: 49:             lcd_4bit_send_string_data(&Lcd_Obj,"There Are ");
   876   001204  0E1F               	movlw	low _Lcd_Obj
   877   001206  6E45               	movwf	lcd_4bit_send_string_data@_lcd^0,c
   878   001208  0E00               	movlw	high _Lcd_Obj
   879   00120A  6E46               	movwf	(lcd_4bit_send_string_data@_lcd+1)^0,c
   880   00120C  0E44               	movlw	low STR_8
   881   00120E  6E47               	movwf	lcd_4bit_send_string_data@str^0,c
   882   001210  0E10               	movlw	high STR_8
   883   001212  6E48               	movwf	(lcd_4bit_send_string_data@str+1)^0,c
   884   001214  ECA7  F00D         	call	_lcd_4bit_send_string_data	;wreg free
   885   001218                     
   886                           ;application.c: 50:             lcd_4bit_send_char_data_pos(&Lcd_Obj,1,11,u8Counter+0x30
      +                          );
   887   001218  0E1F               	movlw	low _Lcd_Obj
   888   00121A  6E4C               	movwf	lcd_4bit_send_char_data_pos@_lcd^0,c
   889   00121C  0E00               	movlw	high _Lcd_Obj
   890   00121E  6E4D               	movwf	(lcd_4bit_send_char_data_pos@_lcd+1)^0,c
   891   001220  0E01               	movlw	1
   892   001222  6E4E               	movwf	lcd_4bit_send_char_data_pos@row^0,c
   893   001224  0E0B               	movlw	11
   894   001226  6E4F               	movwf	lcd_4bit_send_char_data_pos@column^0,c
   895   001228  5054               	movf	main@u8Counter^0,w,c
   896   00122A  0F30               	addlw	48
   897   00122C  6E50               	movwf	lcd_4bit_send_char_data_pos@data^0,c
   898   00122E  EC4E  F00E         	call	_lcd_4bit_send_char_data_pos	;wreg free
   899   001232                     
   900                           ;application.c: 51:             lcd_4bit_send_string_data(&Lcd_Obj," Cars");
   901   001232  0E1F               	movlw	low _Lcd_Obj
   902   001234  6E45               	movwf	lcd_4bit_send_string_data@_lcd^0,c
   903   001236  0E00               	movlw	high _Lcd_Obj
   904   001238  6E46               	movwf	(lcd_4bit_send_string_data@_lcd+1)^0,c
   905   00123A  0E1E               	movlw	low (STR_4+11)
   906   00123C  6E47               	movwf	lcd_4bit_send_string_data@str^0,c
   907   00123E  0E10               	movlw	high (STR_4+11)
   908   001240  6E48               	movwf	(lcd_4bit_send_string_data@str+1)^0,c
   909   001242  ECA7  F00D         	call	_lcd_4bit_send_string_data	;wreg free
   910   001246                     
   911                           ;application.c: 52:             lcd_4bit_send_string_data_pos(&Lcd_Obj,2,1,"Garage Have 
      +                          Space");
   912   001246  0E1F               	movlw	low _Lcd_Obj
   913   001248  6E4C               	movwf	lcd_4bit_send_string_data_pos@_lcd^0,c
   914   00124A  0E00               	movlw	high _Lcd_Obj
   915   00124C  6E4D               	movwf	(lcd_4bit_send_string_data_pos@_lcd+1)^0,c
   916   00124E  0E02               	movlw	2
   917   001250  6E4E               	movwf	lcd_4bit_send_string_data_pos@row^0,c
   918   001252  0E01               	movlw	1
   919   001254  6E4F               	movwf	lcd_4bit_send_string_data_pos@column^0,c
   920   001256  0E01               	movlw	low STR_5
   921   001258  6E50               	movwf	lcd_4bit_send_string_data_pos@str^0,c
   922   00125A  0E10               	movlw	high STR_5
   923   00125C  6E51               	movwf	(lcd_4bit_send_string_data_pos@str+1)^0,c
   924   00125E  EC13  F00D         	call	_lcd_4bit_send_string_data_pos	;wreg free
   925   001262                     
   926                           ;application.c: 53:             dc_motor_move_right(&DC_Exit);
   927   001262  0E2B               	movlw	low _DC_Exit
   928   001264  6E3D               	movwf	dc_motor_move_right@dc_motor^0,c
   929   001266  0E00               	movlw	high _DC_Exit
   930   001268  6E3E               	movwf	(dc_motor_move_right@dc_motor+1)^0,c
   931   00126A  EC91  F00E         	call	_dc_motor_move_right	;wreg free
   932   00126E                     
   933                           ;application.c: 54:             _TimerDelay_ms(1000);
   934   00126E  0E03               	movlw	3
   935   001270  6E3B               	movwf	(__TimerDelay_ms@u16CopyDelay+1)^0,c
   936   001272  0EE8               	movlw	232
   937   001274  6E3A               	movwf	__TimerDelay_ms@u16CopyDelay^0,c
   938   001276  ECFD  F00D         	call	__TimerDelay_ms	;wreg free
   939   00127A                     
   940                           ;application.c: 55:             dc_motor_move_left(&DC_Exit);
   941   00127A  0E2B               	movlw	low _DC_Exit
   942   00127C  6E3D               	movwf	dc_motor_move_left@dc_motor^0,c
   943   00127E  0E00               	movlw	high _DC_Exit
   944   001280  6E3E               	movwf	(dc_motor_move_left@dc_motor+1)^0,c
   945   001282  ECB1  F00E         	call	_dc_motor_move_left	;wreg free
   946   001286                     
   947                           ;application.c: 56:              _TimerDelay_ms(1000);
   948   001286  0E03               	movlw	3
   949   001288  6E3B               	movwf	(__TimerDelay_ms@u16CopyDelay+1)^0,c
   950   00128A  0EE8               	movlw	232
   951   00128C  6E3A               	movwf	__TimerDelay_ms@u16CopyDelay^0,c
   952   00128E  ECFD  F00D         	call	__TimerDelay_ms	;wreg free
   953   001292                     
   954                           ;application.c: 57:              dc_motor_stop(&DC_Exit);
   955   001292  0E2B               	movlw	low _DC_Exit
   956   001294  6E3D               	movwf	dc_motor_stop@dc_motor^0,c
   957   001296  0E00               	movlw	high _DC_Exit
   958   001298  6E3E               	movwf	(dc_motor_stop@dc_motor+1)^0,c
   959   00129A  EC71  F00E         	call	_dc_motor_stop	;wreg free
   960                           
   961                           ;application.c: 58:         }
   962   00129E  EF68  F008         	goto	l540
   963   0012A2  EF07  F000         	goto	start
   964   0012A6                     __end_of_main:
   965                           	callstack 0
   966                           
   967 ;; *************** function _lcd_4bit_send_string_data_pos *****************
   968 ;; Defined at:
   969 ;;		line 172 in file "ECUAL_LAYER/char_lcd/ecu_char_lcd.c"
   970 ;; Parameters:    Size  Location     Type
   971 ;;  _lcd            2   27[COMRAM] PTR const struct .
   972 ;;		 -> Lcd_Obj(6), 
   973 ;;  row             1   29[COMRAM] unsigned char 
   974 ;;  column          1   30[COMRAM] unsigned char 
   975 ;;  str             2   31[COMRAM] PTR unsigned char 
   976 ;;		 -> STR_10(18), STR_7(15), STR_5(18), 
   977 ;; Auto vars:     Size  Location     Type
   978 ;;  ret             1    0        unsigned char 
   979 ;; Return value:  Size  Location     Type
   980 ;;                  1    wreg      unsigned char 
   981 ;; Registers used:
   982 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   983 ;; Tracked objects:
   984 ;;		On entry : 0/0
   985 ;;		On exit  : 0/0
   986 ;;		Unchanged: 0/0
   987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   988 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   991 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   992 ;;Total ram usage:        6 bytes
   993 ;; Hardware stack levels used: 1
   994 ;; Hardware stack levels required when called: 7
   995 ;; This function calls:
   996 ;;		_lcd_4bit_send_char_data
   997 ;;		_set_cursor_4bit_mode
   998 ;; This function is called by:
   999 ;;		_main
  1000 ;; This function uses a non-reentrant model
  1001 ;;
  1002                           
  1003                           	psect	text1
  1004   001A26                     __ptext1:
  1005                           	callstack 0
  1006   001A26                     _lcd_4bit_send_string_data_pos:
  1007                           	callstack 23
  1008   001A26                     
  1009                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 174:         if (((void*)0)==_lcd){
  1010   001A26  504C               	movf	lcd_4bit_send_string_data_pos@_lcd^0,w,c
  1011   001A28  104D               	iorwf	(lcd_4bit_send_string_data_pos@_lcd+1)^0,w,c
  1012   001A2A  A4D8               	btfss	status,2,c
  1013   001A2C  EF1A  F00D         	goto	u1551
  1014   001A30  EF1C  F00D         	goto	u1550
  1015   001A34                     u1551:
  1016   001A34  EF1E  F00D         	goto	l2553
  1017   001A38                     u1550:
  1018   001A38                     
  1019                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 176:         }
  1020   001A38  EF49  F00D         	goto	l360
  1021   001A3C                     l2553:
  1022   001A3C  C04C  F045         	movff	lcd_4bit_send_string_data_pos@_lcd,set_cursor_4bit_mode@_lcd
  1023   001A40  C04D  F046         	movff	lcd_4bit_send_string_data_pos@_lcd+1,set_cursor_4bit_mode@_lcd+1
  1024   001A44  C04E  F047         	movff	lcd_4bit_send_string_data_pos@row,set_cursor_4bit_mode@row
  1025   001A48  C04F  F048         	movff	lcd_4bit_send_string_data_pos@column,set_cursor_4bit_mode@column
  1026   001A4C  EC1B  F00B         	call	_set_cursor_4bit_mode	;wreg free
  1027                           
  1028                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 179:             while(*str){
  1029   001A50  EF3A  F00D         	goto	l2559
  1030   001A54                     l2555:
  1031   001A54  C04C  F041         	movff	lcd_4bit_send_string_data_pos@_lcd,lcd_4bit_send_char_data@_lcd
  1032   001A58  C04D  F042         	movff	lcd_4bit_send_string_data_pos@_lcd+1,lcd_4bit_send_char_data@_lcd+1
  1033   001A5C  C050  FFF6         	movff	lcd_4bit_send_string_data_pos@str,tblptrl
  1034   001A60  C051  FFF7         	movff	lcd_4bit_send_string_data_pos@str+1,tblptrh
  1035   001A64                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1036   001A64  6AF8               	clrf	tblptru,c
  1037   001A66                     	endif
  1038   001A66                     	if	0	;tblptru may be non-zero
  1039   001A66                     	endif
  1040   001A66  0008               	tblrd		*
  1041   001A68  CFF5 F043          	movff	tablat,lcd_4bit_send_char_data@data
  1042   001A6C  ECA1  F00C         	call	_lcd_4bit_send_char_data	;wreg free
  1043   001A70  4A50               	infsnz	lcd_4bit_send_string_data_pos@str^0,f,c
  1044   001A72  2A51               	incf	(lcd_4bit_send_string_data_pos@str+1)^0,f,c
  1045   001A74                     l2559:
  1046                           
  1047                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 179:             while(*str){
  1048   001A74  C050  FFF6         	movff	lcd_4bit_send_string_data_pos@str,tblptrl
  1049   001A78  C051  FFF7         	movff	lcd_4bit_send_string_data_pos@str+1,tblptrh
  1050   001A7C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1051   001A7C  6AF8               	clrf	tblptru,c
  1052   001A7E                     	endif
  1053   001A7E                     	if	0	;tblptru may be non-zero
  1054   001A7E                     	endif
  1055   001A7E  0008               	tblrd		*
  1056   001A80  50F5               	movf	tablat,w,c
  1057   001A82  0900               	iorlw	0
  1058   001A84  A4D8               	btfss	status,2,c
  1059   001A86  EF47  F00D         	goto	u1561
  1060   001A8A  EF49  F00D         	goto	u1560
  1061   001A8E                     u1561:
  1062   001A8E  EF2A  F00D         	goto	l2555
  1063   001A92                     u1560:
  1064   001A92                     l360:
  1065   001A92  0012               	return		;funcret
  1066   001A94                     __end_of_lcd_4bit_send_string_data_pos:
  1067                           	callstack 0
  1068                           
  1069 ;; *************** function _lcd_4bit_send_string_data *****************
  1070 ;; Defined at:
  1071 ;;		line 147 in file "ECUAL_LAYER/char_lcd/ecu_char_lcd.c"
  1072 ;; Parameters:    Size  Location     Type
  1073 ;;  _lcd            2   20[COMRAM] PTR const struct .
  1074 ;;		 -> Lcd_Obj(6), 
  1075 ;;  str             2   22[COMRAM] PTR unsigned char 
  1076 ;;		 -> STR_9(6), STR_8(11), STR_6(17), STR_4(17), 
  1077 ;; Auto vars:     Size  Location     Type
  1078 ;;  ret             1    0        unsigned char 
  1079 ;; Return value:  Size  Location     Type
  1080 ;;                  1    wreg      unsigned char 
  1081 ;; Registers used:
  1082 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1083 ;; Tracked objects:
  1084 ;;		On entry : 0/0
  1085 ;;		On exit  : 0/0
  1086 ;;		Unchanged: 0/0
  1087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1088 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1091 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1092 ;;Total ram usage:        4 bytes
  1093 ;; Hardware stack levels used: 1
  1094 ;; Hardware stack levels required when called: 6
  1095 ;; This function calls:
  1096 ;;		_lcd_4bit_send_char_data
  1097 ;; This function is called by:
  1098 ;;		_main
  1099 ;; This function uses a non-reentrant model
  1100 ;;
  1101                           
  1102                           	psect	text2
  1103   001B4E                     __ptext2:
  1104                           	callstack 0
  1105   001B4E                     _lcd_4bit_send_string_data:
  1106                           	callstack 24
  1107   001B4E                     
  1108                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 149:         if (((void*)0)==_lcd){
  1109   001B4E  5045               	movf	lcd_4bit_send_string_data@_lcd^0,w,c
  1110   001B50  1046               	iorwf	(lcd_4bit_send_string_data@_lcd+1)^0,w,c
  1111   001B52  A4D8               	btfss	status,2,c
  1112   001B54  EFAE  F00D         	goto	u1531
  1113   001B58  EFB0  F00D         	goto	u1530
  1114   001B5C                     u1531:
  1115   001B5C  EFC2  F00D         	goto	l2545
  1116   001B60                     u1530:
  1117   001B60                     
  1118                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 151:         }
  1119   001B60  EFD1  F00D         	goto	l352
  1120   001B64                     l2541:
  1121   001B64  C045  F041         	movff	lcd_4bit_send_string_data@_lcd,lcd_4bit_send_char_data@_lcd
  1122   001B68  C046  F042         	movff	lcd_4bit_send_string_data@_lcd+1,lcd_4bit_send_char_data@_lcd+1
  1123   001B6C  C047  FFF6         	movff	lcd_4bit_send_string_data@str,tblptrl
  1124   001B70  C048  FFF7         	movff	lcd_4bit_send_string_data@str+1,tblptrh
  1125   001B74                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1126   001B74  6AF8               	clrf	tblptru,c
  1127   001B76                     	endif
  1128   001B76                     	if	0	;tblptru may be non-zero
  1129   001B76                     	endif
  1130   001B76  0008               	tblrd		*
  1131   001B78  CFF5 F043          	movff	tablat,lcd_4bit_send_char_data@data
  1132   001B7C  ECA1  F00C         	call	_lcd_4bit_send_char_data	;wreg free
  1133   001B80  4A47               	infsnz	lcd_4bit_send_string_data@str^0,f,c
  1134   001B82  2A48               	incf	(lcd_4bit_send_string_data@str+1)^0,f,c
  1135   001B84                     l2545:
  1136                           
  1137                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 153:             while(*str){
  1138   001B84  C047  FFF6         	movff	lcd_4bit_send_string_data@str,tblptrl
  1139   001B88  C048  FFF7         	movff	lcd_4bit_send_string_data@str+1,tblptrh
  1140   001B8C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1141   001B8C  6AF8               	clrf	tblptru,c
  1142   001B8E                     	endif
  1143   001B8E                     	if	0	;tblptru may be non-zero
  1144   001B8E                     	endif
  1145   001B8E  0008               	tblrd		*
  1146   001B90  50F5               	movf	tablat,w,c
  1147   001B92  0900               	iorlw	0
  1148   001B94  A4D8               	btfss	status,2,c
  1149   001B96  EFCF  F00D         	goto	u1541
  1150   001B9A  EFD1  F00D         	goto	u1540
  1151   001B9E                     u1541:
  1152   001B9E  EFB2  F00D         	goto	l2541
  1153   001BA2                     u1540:
  1154   001BA2                     l352:
  1155   001BA2  0012               	return		;funcret
  1156   001BA4                     __end_of_lcd_4bit_send_string_data:
  1157                           	callstack 0
  1158                           
  1159 ;; *************** function _lcd_4bit_send_char_data_pos *****************
  1160 ;; Defined at:
  1161 ;;		line 126 in file "ECUAL_LAYER/char_lcd/ecu_char_lcd.c"
  1162 ;; Parameters:    Size  Location     Type
  1163 ;;  _lcd            2   27[COMRAM] PTR const struct .
  1164 ;;		 -> Lcd_Obj(6), 
  1165 ;;  row             1   29[COMRAM] unsigned char 
  1166 ;;  column          1   30[COMRAM] unsigned char 
  1167 ;;  data            1   31[COMRAM] unsigned char 
  1168 ;; Auto vars:     Size  Location     Type
  1169 ;;  ret             1   32[COMRAM] unsigned char 
  1170 ;; Return value:  Size  Location     Type
  1171 ;;                  1    wreg      unsigned char 
  1172 ;; Registers used:
  1173 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1174 ;; Tracked objects:
  1175 ;;		On entry : 0/0
  1176 ;;		On exit  : 0/0
  1177 ;;		Unchanged: 0/0
  1178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1179 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1180 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1182 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1183 ;;Total ram usage:        6 bytes
  1184 ;; Hardware stack levels used: 1
  1185 ;; Hardware stack levels required when called: 7
  1186 ;; This function calls:
  1187 ;;		_lcd_4bit_send_char_data
  1188 ;;		_set_cursor_4bit_mode
  1189 ;; This function is called by:
  1190 ;;		_main
  1191 ;;		_lcd_4bit_send_custome_char
  1192 ;; This function uses a non-reentrant model
  1193 ;;
  1194                           
  1195                           	psect	text3
  1196   001C9C                     __ptext3:
  1197                           	callstack 0
  1198   001C9C                     _lcd_4bit_send_char_data_pos:
  1199                           	callstack 23
  1200   001C9C                     
  1201                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 128:         if (((void*)0)==_lcd){
  1202   001C9C  504C               	movf	lcd_4bit_send_char_data_pos@_lcd^0,w,c
  1203   001C9E  104D               	iorwf	(lcd_4bit_send_char_data_pos@_lcd+1)^0,w,c
  1204   001CA0  A4D8               	btfss	status,2,c
  1205   001CA2  EF55  F00E         	goto	u1521
  1206   001CA6  EF57  F00E         	goto	u1520
  1207   001CAA                     u1521:
  1208   001CAA  EF5B  F00E         	goto	l2529
  1209   001CAE                     u1520:
  1210   001CAE                     
  1211                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 129:             ret=(Std_ReturnType)0x00;
  1212   001CAE  0E00               	movlw	0
  1213   001CB0  6E51               	movwf	lcd_4bit_send_char_data_pos@ret^0,c
  1214                           
  1215                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 130:         }
  1216   001CB2  EF6F  F00E         	goto	l2531
  1217   001CB6                     l2529:
  1218                           
  1219                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 132:             ret=set_cursor_4bit_mode(_lcd,row
      +                          ,column);
  1220   001CB6  C04C  F045         	movff	lcd_4bit_send_char_data_pos@_lcd,set_cursor_4bit_mode@_lcd
  1221   001CBA  C04D  F046         	movff	lcd_4bit_send_char_data_pos@_lcd+1,set_cursor_4bit_mode@_lcd+1
  1222   001CBE  C04E  F047         	movff	lcd_4bit_send_char_data_pos@row,set_cursor_4bit_mode@row
  1223   001CC2  C04F  F048         	movff	lcd_4bit_send_char_data_pos@column,set_cursor_4bit_mode@column
  1224   001CC6  EC1B  F00B         	call	_set_cursor_4bit_mode	;wreg free
  1225   001CCA  6E51               	movwf	lcd_4bit_send_char_data_pos@ret^0,c
  1226                           
  1227                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 133:             ret=lcd_4bit_send_char_data(_lcd,
      +                          data);
  1228   001CCC  C04C  F041         	movff	lcd_4bit_send_char_data_pos@_lcd,lcd_4bit_send_char_data@_lcd
  1229   001CD0  C04D  F042         	movff	lcd_4bit_send_char_data_pos@_lcd+1,lcd_4bit_send_char_data@_lcd+1
  1230   001CD4  C050  F043         	movff	lcd_4bit_send_char_data_pos@data,lcd_4bit_send_char_data@data
  1231   001CD8  ECA1  F00C         	call	_lcd_4bit_send_char_data	;wreg free
  1232   001CDC  6E51               	movwf	lcd_4bit_send_char_data_pos@ret^0,c
  1233   001CDE                     l2531:
  1234                           
  1235                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 135:         return ret;
  1236   001CDE  5051               	movf	lcd_4bit_send_char_data_pos@ret^0,w,c
  1237   001CE0  0012               	return		;funcret
  1238   001CE2                     __end_of_lcd_4bit_send_char_data_pos:
  1239                           	callstack 0
  1240                           
  1241 ;; *************** function _set_cursor_4bit_mode *****************
  1242 ;; Defined at:
  1243 ;;		line 426 in file "ECUAL_LAYER/char_lcd/ecu_char_lcd.c"
  1244 ;; Parameters:    Size  Location     Type
  1245 ;;  _lcd            2   20[COMRAM] PTR const struct .
  1246 ;;		 -> Lcd_Obj(6), 
  1247 ;;  row             1   22[COMRAM] unsigned char 
  1248 ;;  column          1   23[COMRAM] unsigned char 
  1249 ;; Auto vars:     Size  Location     Type
  1250 ;;  ret             1   26[COMRAM] unsigned char 
  1251 ;; Return value:  Size  Location     Type
  1252 ;;                  1    wreg      unsigned char 
  1253 ;; Registers used:
  1254 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1255 ;; Tracked objects:
  1256 ;;		On entry : 0/0
  1257 ;;		On exit  : 0/0
  1258 ;;		Unchanged: 0/0
  1259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1260 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1261 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1262 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1263 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1264 ;;Total ram usage:        7 bytes
  1265 ;; Hardware stack levels used: 1
  1266 ;; Hardware stack levels required when called: 6
  1267 ;; This function calls:
  1268 ;;		_lcd_4bit_send_command
  1269 ;; This function is called by:
  1270 ;;		_lcd_4bit_send_char_data_pos
  1271 ;;		_lcd_4bit_send_string_data_pos
  1272 ;; This function uses a non-reentrant model
  1273 ;;
  1274                           
  1275                           	psect	text4
  1276   001636                     __ptext4:
  1277                           	callstack 0
  1278   001636                     _set_cursor_4bit_mode:
  1279                           	callstack 23
  1280   001636                     
  1281                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 427:     Std_ReturnType ret=(Std_ReturnType)0x01;
  1282   001636  0E01               	movlw	1
  1283   001638  6E4B               	movwf	set_cursor_4bit_mode@ret^0,c
  1284   00163A                     
  1285                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 428:     column--;
  1286   00163A  0648               	decf	set_cursor_4bit_mode@column^0,f,c
  1287   00163C                     
  1288                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 429:         if (((void*)0)==_lcd){
  1289   00163C  5045               	movf	set_cursor_4bit_mode@_lcd^0,w,c
  1290   00163E  1046               	iorwf	(set_cursor_4bit_mode@_lcd+1)^0,w,c
  1291   001640  A4D8               	btfss	status,2,c
  1292   001642  EF25  F00B         	goto	u1391
  1293   001646  EF27  F00B         	goto	u1390
  1294   00164A                     u1391:
  1295   00164A  EF5B  F00B         	goto	l2403
  1296   00164E                     u1390:
  1297   00164E                     
  1298                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 430:             ret=(Std_ReturnType)0x00;
  1299   00164E  0E00               	movlw	0
  1300   001650  6E4B               	movwf	set_cursor_4bit_mode@ret^0,c
  1301                           
  1302                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 431:         }
  1303   001652  EF78  F00B         	goto	l2405
  1304   001656                     l2395:
  1305   001656  C045  F041         	movff	set_cursor_4bit_mode@_lcd,lcd_4bit_send_command@_lcd
  1306   00165A  C046  F042         	movff	set_cursor_4bit_mode@_lcd+1,lcd_4bit_send_command@_lcd+1
  1307   00165E  5048               	movf	set_cursor_4bit_mode@column^0,w,c
  1308   001660  0F80               	addlw	128
  1309   001662  6E43               	movwf	lcd_4bit_send_command@command^0,c
  1310   001664  ECDA  F00C         	call	_lcd_4bit_send_command	;wreg free
  1311   001668  6E4B               	movwf	set_cursor_4bit_mode@ret^0,c
  1312   00166A  EF78  F00B         	goto	l2405
  1313   00166E                     l2397:
  1314   00166E  C045  F041         	movff	set_cursor_4bit_mode@_lcd,lcd_4bit_send_command@_lcd
  1315   001672  C046  F042         	movff	set_cursor_4bit_mode@_lcd+1,lcd_4bit_send_command@_lcd+1
  1316   001676  5048               	movf	set_cursor_4bit_mode@column^0,w,c
  1317   001678  0FC0               	addlw	192
  1318   00167A  6E43               	movwf	lcd_4bit_send_command@command^0,c
  1319   00167C  ECDA  F00C         	call	_lcd_4bit_send_command	;wreg free
  1320   001680  6E4B               	movwf	set_cursor_4bit_mode@ret^0,c
  1321   001682  EF78  F00B         	goto	l2405
  1322   001686                     l2399:
  1323   001686  C045  F041         	movff	set_cursor_4bit_mode@_lcd,lcd_4bit_send_command@_lcd
  1324   00168A  C046  F042         	movff	set_cursor_4bit_mode@_lcd+1,lcd_4bit_send_command@_lcd+1
  1325   00168E  5048               	movf	set_cursor_4bit_mode@column^0,w,c
  1326   001690  0F94               	addlw	148
  1327   001692  6E43               	movwf	lcd_4bit_send_command@command^0,c
  1328   001694  ECDA  F00C         	call	_lcd_4bit_send_command	;wreg free
  1329   001698  6E4B               	movwf	set_cursor_4bit_mode@ret^0,c
  1330   00169A  EF78  F00B         	goto	l2405
  1331   00169E                     l2401:
  1332   00169E  C045  F041         	movff	set_cursor_4bit_mode@_lcd,lcd_4bit_send_command@_lcd
  1333   0016A2  C046  F042         	movff	set_cursor_4bit_mode@_lcd+1,lcd_4bit_send_command@_lcd+1
  1334   0016A6  5048               	movf	set_cursor_4bit_mode@column^0,w,c
  1335   0016A8  0FD4               	addlw	212
  1336   0016AA  6E43               	movwf	lcd_4bit_send_command@command^0,c
  1337   0016AC  ECDA  F00C         	call	_lcd_4bit_send_command	;wreg free
  1338   0016B0  6E4B               	movwf	set_cursor_4bit_mode@ret^0,c
  1339   0016B2  EF78  F00B         	goto	l2405
  1340   0016B6                     l2403:
  1341   0016B6  5047               	movf	set_cursor_4bit_mode@row^0,w,c
  1342   0016B8  6E49               	movwf	??_set_cursor_4bit_mode^0,c
  1343   0016BA  6A4A               	clrf	(??_set_cursor_4bit_mode+1)^0,c
  1344                           
  1345                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1346                           ; Switch size 1, requested type "simple"
  1347                           ; Number of cases is 1, Range of values is 0 to 0
  1348                           ; switch strategies available:
  1349                           ; Name         Instructions Cycles
  1350                           ; simple_byte            4     3 (average)
  1351                           ;	Chosen strategy is simple_byte
  1352   0016BC  504A               	movf	(??_set_cursor_4bit_mode+1)^0,w,c
  1353   0016BE  0A00               	xorlw	0	; case 0
  1354   0016C0  B4D8               	btfsc	status,2,c
  1355   0016C2  EF65  F00B         	goto	l2881
  1356   0016C6  EF78  F00B         	goto	l2405
  1357   0016CA                     l2881:
  1358                           
  1359                           ; Switch size 1, requested type "simple"
  1360                           ; Number of cases is 4, Range of values is 1 to 4
  1361                           ; switch strategies available:
  1362                           ; Name         Instructions Cycles
  1363                           ; simple_byte           13     7 (average)
  1364                           ;	Chosen strategy is simple_byte
  1365   0016CA  5049               	movf	??_set_cursor_4bit_mode^0,w,c
  1366   0016CC  0A01               	xorlw	1	; case 1
  1367   0016CE  B4D8               	btfsc	status,2,c
  1368   0016D0  EF2B  F00B         	goto	l2395
  1369   0016D4  0A03               	xorlw	3	; case 2
  1370   0016D6  B4D8               	btfsc	status,2,c
  1371   0016D8  EF37  F00B         	goto	l2397
  1372   0016DC  0A01               	xorlw	1	; case 3
  1373   0016DE  B4D8               	btfsc	status,2,c
  1374   0016E0  EF43  F00B         	goto	l2399
  1375   0016E4  0A07               	xorlw	7	; case 4
  1376   0016E6  B4D8               	btfsc	status,2,c
  1377   0016E8  EF4F  F00B         	goto	l2401
  1378   0016EC  EF78  F00B         	goto	l2405
  1379   0016F0                     l2405:
  1380                           
  1381                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 442:         return ret;
  1382   0016F0  504B               	movf	set_cursor_4bit_mode@ret^0,w,c
  1383   0016F2  0012               	return		;funcret
  1384   0016F4                     __end_of_set_cursor_4bit_mode:
  1385                           	callstack 0
  1386                           
  1387 ;; *************** function _lcd_4bit_send_char_data *****************
  1388 ;; Defined at:
  1389 ;;		line 94 in file "ECUAL_LAYER/char_lcd/ecu_char_lcd.c"
  1390 ;; Parameters:    Size  Location     Type
  1391 ;;  _lcd            2   16[COMRAM] PTR const struct .
  1392 ;;		 -> Lcd_Obj(6), 
  1393 ;;  data            1   18[COMRAM] unsigned char 
  1394 ;; Auto vars:     Size  Location     Type
  1395 ;;  ret             1   19[COMRAM] unsigned char 
  1396 ;; Return value:  Size  Location     Type
  1397 ;;                  1    wreg      unsigned char 
  1398 ;; Registers used:
  1399 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1400 ;; Tracked objects:
  1401 ;;		On entry : 0/0
  1402 ;;		On exit  : 0/0
  1403 ;;		Unchanged: 0/0
  1404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1405 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1406 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1408 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1409 ;;Total ram usage:        4 bytes
  1410 ;; Hardware stack levels used: 1
  1411 ;; Hardware stack levels required when called: 5
  1412 ;; This function calls:
  1413 ;;		_gpio_Pin_Write_Logic
  1414 ;;		_send_4bit_mode_enable
  1415 ;;		_send_data_4bit_mode
  1416 ;; This function is called by:
  1417 ;;		_lcd_4bit_send_char_data_pos
  1418 ;;		_lcd_4bit_send_string_data
  1419 ;;		_lcd_4bit_send_string_data_pos
  1420 ;;		_lcd_4bit_send_custome_char
  1421 ;; This function uses a non-reentrant model
  1422 ;;
  1423                           
  1424                           	psect	text5
  1425   001942                     __ptext5:
  1426                           	callstack 0
  1427   001942                     _lcd_4bit_send_char_data:
  1428                           	callstack 24
  1429   001942                     
  1430                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 96:         if (((void*)0)==_lcd){
  1431   001942  5041               	movf	lcd_4bit_send_char_data@_lcd^0,w,c
  1432   001944  1042               	iorwf	(lcd_4bit_send_char_data@_lcd+1)^0,w,c
  1433   001946  A4D8               	btfss	status,2,c
  1434   001948  EFA8  F00C         	goto	u1381
  1435   00194C  EFAA  F00C         	goto	u1380
  1436   001950                     u1381:
  1437   001950  EFAE  F00C         	goto	l2381
  1438   001954                     u1380:
  1439   001954                     
  1440                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 97:             ret=(Std_ReturnType)0x00;
  1441   001954  0E00               	movlw	0
  1442   001956  6E44               	movwf	lcd_4bit_send_char_data@ret^0,c
  1443                           
  1444                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 98:         }
  1445   001958  EFD8  F00C         	goto	l2383
  1446   00195C                     l2381:
  1447                           
  1448                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 102:            ret=gpio_Pin_Write_Logic(&(_lcd->l
      +                          cd_rs),GPIO_HIGH);
  1449   00195C  C041  F033         	movff	lcd_4bit_send_char_data@_lcd,gpio_Pin_Write_Logic@pin_config
  1450   001960  C042  F034         	movff	lcd_4bit_send_char_data@_lcd+1,gpio_Pin_Write_Logic@pin_config+1
  1451   001964  0E01               	movlw	1
  1452   001966  6E35               	movwf	gpio_Pin_Write_Logic@logic^0,c
  1453   001968  ECF5  F009         	call	_gpio_Pin_Write_Logic	;wreg free
  1454   00196C  6E44               	movwf	lcd_4bit_send_char_data@ret^0,c
  1455                           
  1456                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 104:            ret=send_data_4bit_mode(_lcd,data>
      +                          >4);
  1457   00196E  C041  F03D         	movff	lcd_4bit_send_char_data@_lcd,send_data_4bit_mode@_lcd
  1458   001972  C042  F03E         	movff	lcd_4bit_send_char_data@_lcd+1,send_data_4bit_mode@_lcd+1
  1459   001976  3843               	swapf	lcd_4bit_send_char_data@data^0,w,c
  1460   001978  0B0F               	andlw	15
  1461   00197A  6E3F               	movwf	send_data_4bit_mode@data^0,c
  1462   00197C  EC1E  F00C         	call	_send_data_4bit_mode	;wreg free
  1463   001980  6E44               	movwf	lcd_4bit_send_char_data@ret^0,c
  1464                           
  1465                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 106:            ret=send_4bit_mode_enable(_lcd);
  1466   001982  C041  F03D         	movff	lcd_4bit_send_char_data@_lcd,send_4bit_mode_enable@_lcd
  1467   001986  C042  F03E         	movff	lcd_4bit_send_char_data@_lcd+1,send_4bit_mode_enable@_lcd+1
  1468   00198A  EC26  F00E         	call	_send_4bit_mode_enable	;wreg free
  1469   00198E  6E44               	movwf	lcd_4bit_send_char_data@ret^0,c
  1470                           
  1471                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 108:            ret=send_data_4bit_mode(_lcd,data)
      +                          ;
  1472   001990  C041  F03D         	movff	lcd_4bit_send_char_data@_lcd,send_data_4bit_mode@_lcd
  1473   001994  C042  F03E         	movff	lcd_4bit_send_char_data@_lcd+1,send_data_4bit_mode@_lcd+1
  1474   001998  C043  F03F         	movff	lcd_4bit_send_char_data@data,send_data_4bit_mode@data
  1475   00199C  EC1E  F00C         	call	_send_data_4bit_mode	;wreg free
  1476   0019A0  6E44               	movwf	lcd_4bit_send_char_data@ret^0,c
  1477                           
  1478                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 110:            ret=send_4bit_mode_enable(_lcd);
  1479   0019A2  C041  F03D         	movff	lcd_4bit_send_char_data@_lcd,send_4bit_mode_enable@_lcd
  1480   0019A6  C042  F03E         	movff	lcd_4bit_send_char_data@_lcd+1,send_4bit_mode_enable@_lcd+1
  1481   0019AA  EC26  F00E         	call	_send_4bit_mode_enable	;wreg free
  1482   0019AE  6E44               	movwf	lcd_4bit_send_char_data@ret^0,c
  1483   0019B0                     l2383:
  1484                           
  1485                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 112:         return ret;
  1486   0019B0  5044               	movf	lcd_4bit_send_char_data@ret^0,w,c
  1487   0019B2  0012               	return		;funcret
  1488   0019B4                     __end_of_lcd_4bit_send_char_data:
  1489                           	callstack 0
  1490                           
  1491 ;; *************** function _lcd_4bit_initialize *****************
  1492 ;; Defined at:
  1493 ;;		line 25 in file "ECUAL_LAYER/char_lcd/ecu_char_lcd.c"
  1494 ;; Parameters:    Size  Location     Type
  1495 ;;  _lcd            2   20[COMRAM] PTR const struct .
  1496 ;;		 -> Lcd_Obj(6), 
  1497 ;; Auto vars:     Size  Location     Type
  1498 ;;  l_counter       1   25[COMRAM] unsigned char 
  1499 ;;  ret             1   24[COMRAM] unsigned char 
  1500 ;; Return value:  Size  Location     Type
  1501 ;;                  1    wreg      unsigned char 
  1502 ;; Registers used:
  1503 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1504 ;; Tracked objects:
  1505 ;;		On entry : 0/0
  1506 ;;		On exit  : 0/0
  1507 ;;		Unchanged: 0/0
  1508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1509 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1510 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1511 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1512 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1513 ;;Total ram usage:        6 bytes
  1514 ;; Hardware stack levels used: 1
  1515 ;; Hardware stack levels required when called: 6
  1516 ;; This function calls:
  1517 ;;		_gpio_Pin_Intialize
  1518 ;;		_lcd_4bit_send_command
  1519 ;; This function is called by:
  1520 ;;		_main
  1521 ;; This function uses a non-reentrant model
  1522 ;;
  1523                           
  1524                           	psect	text6
  1525   001516                     __ptext6:
  1526                           	callstack 0
  1527   001516                     _lcd_4bit_initialize:
  1528                           	callstack 24
  1529   001516                     
  1530                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 27:         uint8 l_counter=0;
  1531   001516  0E00               	movlw	0
  1532   001518  6E4A               	movwf	lcd_4bit_initialize@l_counter^0,c
  1533   00151A                     
  1534                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 28:         if (((void*)0)==_lcd){
  1535   00151A  5045               	movf	lcd_4bit_initialize@_lcd^0,w,c
  1536   00151C  1046               	iorwf	(lcd_4bit_initialize@_lcd+1)^0,w,c
  1537   00151E  A4D8               	btfss	status,2,c
  1538   001520  EF94  F00A         	goto	u1501
  1539   001524  EF96  F00A         	goto	u1500
  1540   001528                     u1501:
  1541   001528  EF98  F00A         	goto	l2485
  1542   00152C                     u1500:
  1543   00152C                     
  1544                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 30:         }
  1545   00152C  EF1A  F00B         	goto	l329
  1546   001530                     l2485:
  1547                           
  1548                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 32:             ret=gpio_Pin_Intialize(&(_lcd->lcd
      +                          _rs));
  1549   001530  C045  F03D         	movff	lcd_4bit_initialize@_lcd,gpio_Pin_Intialize@pin_config
  1550   001534  C046  F03E         	movff	lcd_4bit_initialize@_lcd+1,gpio_Pin_Intialize@pin_config+1
  1551   001538  EC4A  F00D         	call	_gpio_Pin_Intialize	;wreg free
  1552   00153C  6E49               	movwf	lcd_4bit_initialize@ret^0,c
  1553                           
  1554                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 33:             ret=gpio_Pin_Intialize(&(_lcd->lcd
      +                          _en));
  1555   00153E  0E01               	movlw	1
  1556   001540  2445               	addwf	lcd_4bit_initialize@_lcd^0,w,c
  1557   001542  6E3D               	movwf	gpio_Pin_Intialize@pin_config^0,c
  1558   001544  0E00               	movlw	0
  1559   001546  2046               	addwfc	(lcd_4bit_initialize@_lcd+1)^0,w,c
  1560   001548  6E3E               	movwf	(gpio_Pin_Intialize@pin_config+1)^0,c
  1561   00154A  EC4A  F00D         	call	_gpio_Pin_Intialize	;wreg free
  1562   00154E  6E49               	movwf	lcd_4bit_initialize@ret^0,c
  1563   001550                     
  1564                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 34:             for (l_counter=0;l_counter<4;l_cou
      +                          nter++){
  1565   001550  0E00               	movlw	0
  1566   001552  6E4A               	movwf	lcd_4bit_initialize@l_counter^0,c
  1567   001554                     l2493:
  1568   001554  504A               	movf	lcd_4bit_initialize@l_counter^0,w,c
  1569   001556  2445               	addwf	lcd_4bit_initialize@_lcd^0,w,c
  1570   001558  6E47               	movwf	??_lcd_4bit_initialize^0,c
  1571   00155A  0E00               	movlw	0
  1572   00155C  2046               	addwfc	(lcd_4bit_initialize@_lcd+1)^0,w,c
  1573   00155E  6E48               	movwf	(??_lcd_4bit_initialize+1)^0,c
  1574   001560  0E02               	movlw	2
  1575   001562  2447               	addwf	??_lcd_4bit_initialize^0,w,c
  1576   001564  6E3D               	movwf	gpio_Pin_Intialize@pin_config^0,c
  1577   001566  0E00               	movlw	0
  1578   001568  2048               	addwfc	(??_lcd_4bit_initialize+1)^0,w,c
  1579   00156A  6E3E               	movwf	(gpio_Pin_Intialize@pin_config+1)^0,c
  1580   00156C  EC4A  F00D         	call	_gpio_Pin_Intialize	;wreg free
  1581   001570                     
  1582                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 36:             }
  1583   001570  2A4A               	incf	lcd_4bit_initialize@l_counter^0,f,c
  1584   001572  0E03               	movlw	3
  1585   001574  644A               	cpfsgt	lcd_4bit_initialize@l_counter^0,c
  1586   001576  EFBF  F00A         	goto	u1511
  1587   00157A  EFC1  F00A         	goto	u1510
  1588   00157E                     u1511:
  1589   00157E  EFAA  F00A         	goto	l2493
  1590   001582                     u1510:
  1591   001582                     
  1592                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 37:              _delay((unsigned long)((20)*(8000
      +                          000UL/4000.0)));
  1593   001582  0E34               	movlw	52
  1594   001584  6E47               	movwf	??_lcd_4bit_initialize^0,c
  1595   001586  0EF2               	movlw	242
  1596   001588                     u1847:
  1597   001588  2EE8               	decfsz	wreg,f,c
  1598   00158A  D7FE               	bra	u1847
  1599   00158C  2E47               	decfsz	??_lcd_4bit_initialize^0,f,c
  1600   00158E  D7FC               	bra	u1847
  1601   001590  C045  F041         	movff	lcd_4bit_initialize@_lcd,lcd_4bit_send_command@_lcd
  1602   001594  C046  F042         	movff	lcd_4bit_initialize@_lcd+1,lcd_4bit_send_command@_lcd+1
  1603   001598  0E38               	movlw	56
  1604   00159A  6E43               	movwf	lcd_4bit_send_command@command^0,c
  1605   00159C  ECDA  F00C         	call	_lcd_4bit_send_command	;wreg free
  1606   0015A0                     
  1607                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 39:            _delay((unsigned long)((5)*(8000000
      +                          UL/4000.0)));
  1608   0015A0  0E0D               	movlw	13
  1609   0015A2  6E47               	movwf	??_lcd_4bit_initialize^0,c
  1610   0015A4  0EFC               	movlw	252
  1611   0015A6                     u1857:
  1612   0015A6  2EE8               	decfsz	wreg,f,c
  1613   0015A8  D7FE               	bra	u1857
  1614   0015AA  2E47               	decfsz	??_lcd_4bit_initialize^0,f,c
  1615   0015AC  D7FC               	bra	u1857
  1616   0015AE  C045  F041         	movff	lcd_4bit_initialize@_lcd,lcd_4bit_send_command@_lcd
  1617   0015B2  C046  F042         	movff	lcd_4bit_initialize@_lcd+1,lcd_4bit_send_command@_lcd+1
  1618   0015B6  0E38               	movlw	56
  1619   0015B8  6E43               	movwf	lcd_4bit_send_command@command^0,c
  1620   0015BA  ECDA  F00C         	call	_lcd_4bit_send_command	;wreg free
  1621   0015BE                     
  1622                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 41:            _delay((unsigned long)((150)*(80000
      +                          00UL/4000000.0)));
  1623   0015BE  0E64               	movlw	100
  1624   0015C0                     u1867:
  1625   0015C0  2EE8               	decfsz	wreg,f,c
  1626   0015C2  D7FE               	bra	u1867
  1627   0015C4  C045  F041         	movff	lcd_4bit_initialize@_lcd,lcd_4bit_send_command@_lcd
  1628   0015C8  C046  F042         	movff	lcd_4bit_initialize@_lcd+1,lcd_4bit_send_command@_lcd+1
  1629   0015CC  0E38               	movlw	56
  1630   0015CE  6E43               	movwf	lcd_4bit_send_command@command^0,c
  1631   0015D0  ECDA  F00C         	call	_lcd_4bit_send_command	;wreg free
  1632   0015D4  C045  F041         	movff	lcd_4bit_initialize@_lcd,lcd_4bit_send_command@_lcd
  1633   0015D8  C046  F042         	movff	lcd_4bit_initialize@_lcd+1,lcd_4bit_send_command@_lcd+1
  1634   0015DC  0E01               	movlw	1
  1635   0015DE  6E43               	movwf	lcd_4bit_send_command@command^0,c
  1636   0015E0  ECDA  F00C         	call	_lcd_4bit_send_command	;wreg free
  1637   0015E4  C045  F041         	movff	lcd_4bit_initialize@_lcd,lcd_4bit_send_command@_lcd
  1638   0015E8  C046  F042         	movff	lcd_4bit_initialize@_lcd+1,lcd_4bit_send_command@_lcd+1
  1639   0015EC  0E02               	movlw	2
  1640   0015EE  6E43               	movwf	lcd_4bit_send_command@command^0,c
  1641   0015F0  ECDA  F00C         	call	_lcd_4bit_send_command	;wreg free
  1642   0015F4  C045  F041         	movff	lcd_4bit_initialize@_lcd,lcd_4bit_send_command@_lcd
  1643   0015F8  C046  F042         	movff	lcd_4bit_initialize@_lcd+1,lcd_4bit_send_command@_lcd+1
  1644   0015FC  0E06               	movlw	6
  1645   0015FE  6E43               	movwf	lcd_4bit_send_command@command^0,c
  1646   001600  ECDA  F00C         	call	_lcd_4bit_send_command	;wreg free
  1647   001604  C045  F041         	movff	lcd_4bit_initialize@_lcd,lcd_4bit_send_command@_lcd
  1648   001608  C046  F042         	movff	lcd_4bit_initialize@_lcd+1,lcd_4bit_send_command@_lcd+1
  1649   00160C  0E0C               	movlw	12
  1650   00160E  6E43               	movwf	lcd_4bit_send_command@command^0,c
  1651   001610  ECDA  F00C         	call	_lcd_4bit_send_command	;wreg free
  1652   001614  C045  F041         	movff	lcd_4bit_initialize@_lcd,lcd_4bit_send_command@_lcd
  1653   001618  C046  F042         	movff	lcd_4bit_initialize@_lcd+1,lcd_4bit_send_command@_lcd+1
  1654   00161C  0E28               	movlw	40
  1655   00161E  6E43               	movwf	lcd_4bit_send_command@command^0,c
  1656   001620  ECDA  F00C         	call	_lcd_4bit_send_command	;wreg free
  1657   001624  C045  F041         	movff	lcd_4bit_initialize@_lcd,lcd_4bit_send_command@_lcd
  1658   001628  C046  F042         	movff	lcd_4bit_initialize@_lcd+1,lcd_4bit_send_command@_lcd+1
  1659   00162C  0E80               	movlw	128
  1660   00162E  6E43               	movwf	lcd_4bit_send_command@command^0,c
  1661   001630  ECDA  F00C         	call	_lcd_4bit_send_command	;wreg free
  1662   001634                     l329:
  1663   001634  0012               	return		;funcret
  1664   001636                     __end_of_lcd_4bit_initialize:
  1665                           	callstack 0
  1666                           
  1667 ;; *************** function _lcd_4bit_send_command *****************
  1668 ;; Defined at:
  1669 ;;		line 65 in file "ECUAL_LAYER/char_lcd/ecu_char_lcd.c"
  1670 ;; Parameters:    Size  Location     Type
  1671 ;;  _lcd            2   16[COMRAM] PTR const struct .
  1672 ;;		 -> Lcd_Obj(6), 
  1673 ;;  command         1   18[COMRAM] unsigned char 
  1674 ;; Auto vars:     Size  Location     Type
  1675 ;;  ret             1   19[COMRAM] unsigned char 
  1676 ;; Return value:  Size  Location     Type
  1677 ;;                  1    wreg      unsigned char 
  1678 ;; Registers used:
  1679 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1680 ;; Tracked objects:
  1681 ;;		On entry : 0/0
  1682 ;;		On exit  : 0/0
  1683 ;;		Unchanged: 0/0
  1684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1685 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1686 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1688 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1689 ;;Total ram usage:        4 bytes
  1690 ;; Hardware stack levels used: 1
  1691 ;; Hardware stack levels required when called: 5
  1692 ;; This function calls:
  1693 ;;		_gpio_Pin_Write_Logic
  1694 ;;		_send_4bit_mode_enable
  1695 ;;		_send_data_4bit_mode
  1696 ;; This function is called by:
  1697 ;;		_lcd_4bit_initialize
  1698 ;;		_set_cursor_4bit_mode
  1699 ;;		_main
  1700 ;;		_lcd_4bit_send_custome_char
  1701 ;; This function uses a non-reentrant model
  1702 ;;
  1703                           
  1704                           	psect	text7
  1705   0019B4                     __ptext7:
  1706                           	callstack 0
  1707   0019B4                     _lcd_4bit_send_command:
  1708                           	callstack 23
  1709   0019B4                     
  1710                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 67:         if (((void*)0)==_lcd){
  1711   0019B4  5041               	movf	lcd_4bit_send_command@_lcd^0,w,c
  1712   0019B6  1042               	iorwf	(lcd_4bit_send_command@_lcd+1)^0,w,c
  1713   0019B8  A4D8               	btfss	status,2,c
  1714   0019BA  EFE1  F00C         	goto	u1331
  1715   0019BE  EFE3  F00C         	goto	u1330
  1716   0019C2                     u1331:
  1717   0019C2  EFE7  F00C         	goto	l2315
  1718   0019C6                     u1330:
  1719   0019C6                     
  1720                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 68:             ret=(Std_ReturnType)0x00;
  1721   0019C6  0E00               	movlw	0
  1722   0019C8  6E44               	movwf	lcd_4bit_send_command@ret^0,c
  1723                           
  1724                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 69:         }
  1725   0019CA  EF11  F00D         	goto	l2317
  1726   0019CE                     l2315:
  1727                           
  1728                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 73:            ret=gpio_Pin_Write_Logic(&(_lcd->lc
      +                          d_rs),GPIO_LOW);
  1729   0019CE  C041  F033         	movff	lcd_4bit_send_command@_lcd,gpio_Pin_Write_Logic@pin_config
  1730   0019D2  C042  F034         	movff	lcd_4bit_send_command@_lcd+1,gpio_Pin_Write_Logic@pin_config+1
  1731   0019D6  0E00               	movlw	0
  1732   0019D8  6E35               	movwf	gpio_Pin_Write_Logic@logic^0,c
  1733   0019DA  ECF5  F009         	call	_gpio_Pin_Write_Logic	;wreg free
  1734   0019DE  6E44               	movwf	lcd_4bit_send_command@ret^0,c
  1735                           
  1736                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 75:            ret=send_data_4bit_mode(_lcd,comman
      +                          d>>4);
  1737   0019E0  C041  F03D         	movff	lcd_4bit_send_command@_lcd,send_data_4bit_mode@_lcd
  1738   0019E4  C042  F03E         	movff	lcd_4bit_send_command@_lcd+1,send_data_4bit_mode@_lcd+1
  1739   0019E8  3843               	swapf	lcd_4bit_send_command@command^0,w,c
  1740   0019EA  0B0F               	andlw	15
  1741   0019EC  6E3F               	movwf	send_data_4bit_mode@data^0,c
  1742   0019EE  EC1E  F00C         	call	_send_data_4bit_mode	;wreg free
  1743   0019F2  6E44               	movwf	lcd_4bit_send_command@ret^0,c
  1744                           
  1745                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 77:            ret=send_4bit_mode_enable(_lcd);
  1746   0019F4  C041  F03D         	movff	lcd_4bit_send_command@_lcd,send_4bit_mode_enable@_lcd
  1747   0019F8  C042  F03E         	movff	lcd_4bit_send_command@_lcd+1,send_4bit_mode_enable@_lcd+1
  1748   0019FC  EC26  F00E         	call	_send_4bit_mode_enable	;wreg free
  1749   001A00  6E44               	movwf	lcd_4bit_send_command@ret^0,c
  1750                           
  1751                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 79:            ret=send_data_4bit_mode(_lcd,comman
      +                          d);
  1752   001A02  C041  F03D         	movff	lcd_4bit_send_command@_lcd,send_data_4bit_mode@_lcd
  1753   001A06  C042  F03E         	movff	lcd_4bit_send_command@_lcd+1,send_data_4bit_mode@_lcd+1
  1754   001A0A  C043  F03F         	movff	lcd_4bit_send_command@command,send_data_4bit_mode@data
  1755   001A0E  EC1E  F00C         	call	_send_data_4bit_mode	;wreg free
  1756   001A12  6E44               	movwf	lcd_4bit_send_command@ret^0,c
  1757                           
  1758                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 81:            ret=send_4bit_mode_enable(_lcd);
  1759   001A14  C041  F03D         	movff	lcd_4bit_send_command@_lcd,send_4bit_mode_enable@_lcd
  1760   001A18  C042  F03E         	movff	lcd_4bit_send_command@_lcd+1,send_4bit_mode_enable@_lcd+1
  1761   001A1C  EC26  F00E         	call	_send_4bit_mode_enable	;wreg free
  1762   001A20  6E44               	movwf	lcd_4bit_send_command@ret^0,c
  1763   001A22                     l2317:
  1764                           
  1765                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 83:         return ret;
  1766   001A22  5044               	movf	lcd_4bit_send_command@ret^0,w,c
  1767   001A24  0012               	return		;funcret
  1768   001A26                     __end_of_lcd_4bit_send_command:
  1769                           	callstack 0
  1770                           
  1771 ;; *************** function _send_data_4bit_mode *****************
  1772 ;; Defined at:
  1773 ;;		line 388 in file "ECUAL_LAYER/char_lcd/ecu_char_lcd.c"
  1774 ;; Parameters:    Size  Location     Type
  1775 ;;  _lcd            2   12[COMRAM] PTR const struct .
  1776 ;;		 -> Lcd_Obj(6), 
  1777 ;;  data            1   14[COMRAM] unsigned char 
  1778 ;; Auto vars:     Size  Location     Type
  1779 ;;  ret             1   15[COMRAM] unsigned char 
  1780 ;; Return value:  Size  Location     Type
  1781 ;;                  1    wreg      unsigned char 
  1782 ;; Registers used:
  1783 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1784 ;; Tracked objects:
  1785 ;;		On entry : 0/0
  1786 ;;		On exit  : 0/0
  1787 ;;		Unchanged: 0/0
  1788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1789 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1790 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1792 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1793 ;;Total ram usage:        4 bytes
  1794 ;; Hardware stack levels used: 1
  1795 ;; Hardware stack levels required when called: 4
  1796 ;; This function calls:
  1797 ;;		_gpio_Pin_Write_Logic
  1798 ;; This function is called by:
  1799 ;;		_lcd_4bit_send_command
  1800 ;;		_lcd_4bit_send_char_data
  1801 ;; This function uses a non-reentrant model
  1802 ;;
  1803                           
  1804                           	psect	text8
  1805   00183C                     __ptext8:
  1806                           	callstack 0
  1807   00183C                     _send_data_4bit_mode:
  1808                           	callstack 23
  1809   00183C                     
  1810                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 390:         if (((void*)0)==_lcd){
  1811   00183C  503D               	movf	send_data_4bit_mode@_lcd^0,w,c
  1812   00183E  103E               	iorwf	(send_data_4bit_mode@_lcd+1)^0,w,c
  1813   001840  A4D8               	btfss	status,2,c
  1814   001842  EF25  F00C         	goto	u1171
  1815   001846  EF27  F00C         	goto	u1170
  1816   00184A                     u1171:
  1817   00184A  EF2B  F00C         	goto	l2229
  1818   00184E                     u1170:
  1819   00184E                     
  1820                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 391:             ret=(Std_ReturnType)0x00;
  1821   00184E  0E00               	movlw	0
  1822   001850  6E40               	movwf	send_data_4bit_mode@ret^0,c
  1823                           
  1824                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 392:         }
  1825   001852  EF60  F00C         	goto	l2231
  1826   001856                     l2229:
  1827                           
  1828                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 394:             ret=gpio_Pin_Write_Logic(&(_lcd->
      +                          lcd_data[0]),(data >> 0) & (uint8)0x01);
  1829   001856  0E02               	movlw	2
  1830   001858  243D               	addwf	send_data_4bit_mode@_lcd^0,w,c
  1831   00185A  6E33               	movwf	gpio_Pin_Write_Logic@pin_config^0,c
  1832   00185C  0E00               	movlw	0
  1833   00185E  203E               	addwfc	(send_data_4bit_mode@_lcd+1)^0,w,c
  1834   001860  6E34               	movwf	(gpio_Pin_Write_Logic@pin_config+1)^0,c
  1835   001862  503F               	movf	send_data_4bit_mode@data^0,w,c
  1836   001864  0B01               	andlw	1
  1837   001866  6E35               	movwf	gpio_Pin_Write_Logic@logic^0,c
  1838   001868  ECF5  F009         	call	_gpio_Pin_Write_Logic	;wreg free
  1839   00186C  6E40               	movwf	send_data_4bit_mode@ret^0,c
  1840                           
  1841                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 395:             ret=gpio_Pin_Write_Logic(&(_lcd->
      +                          lcd_data[1]),(data >> 1) & (uint8)0x01);
  1842   00186E  0E03               	movlw	3
  1843   001870  243D               	addwf	send_data_4bit_mode@_lcd^0,w,c
  1844   001872  6E33               	movwf	gpio_Pin_Write_Logic@pin_config^0,c
  1845   001874  0E00               	movlw	0
  1846   001876  203E               	addwfc	(send_data_4bit_mode@_lcd+1)^0,w,c
  1847   001878  6E34               	movwf	(gpio_Pin_Write_Logic@pin_config+1)^0,c
  1848   00187A  90D8               	bcf	status,0,c
  1849   00187C  303F               	rrcf	send_data_4bit_mode@data^0,w,c
  1850   00187E  0B01               	andlw	1
  1851   001880  6E35               	movwf	gpio_Pin_Write_Logic@logic^0,c
  1852   001882  ECF5  F009         	call	_gpio_Pin_Write_Logic	;wreg free
  1853   001886  6E40               	movwf	send_data_4bit_mode@ret^0,c
  1854                           
  1855                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 396:             ret=gpio_Pin_Write_Logic(&(_lcd->
      +                          lcd_data[2]),(data >> 2) & (uint8)0x01);
  1856   001888  0E04               	movlw	4
  1857   00188A  243D               	addwf	send_data_4bit_mode@_lcd^0,w,c
  1858   00188C  6E33               	movwf	gpio_Pin_Write_Logic@pin_config^0,c
  1859   00188E  0E00               	movlw	0
  1860   001890  203E               	addwfc	(send_data_4bit_mode@_lcd+1)^0,w,c
  1861   001892  6E34               	movwf	(gpio_Pin_Write_Logic@pin_config+1)^0,c
  1862   001894  403F               	rrncf	send_data_4bit_mode@data^0,w,c
  1863   001896  42E8               	rrncf	wreg,f,c
  1864   001898  0B3F               	andlw	63
  1865   00189A  0B01               	andlw	1
  1866   00189C  6E35               	movwf	gpio_Pin_Write_Logic@logic^0,c
  1867   00189E  ECF5  F009         	call	_gpio_Pin_Write_Logic	;wreg free
  1868   0018A2  6E40               	movwf	send_data_4bit_mode@ret^0,c
  1869                           
  1870                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 397:             ret=gpio_Pin_Write_Logic(&(_lcd->
      +                          lcd_data[3]),(data >> 3) & (uint8)0x01);
  1871   0018A4  0E05               	movlw	5
  1872   0018A6  243D               	addwf	send_data_4bit_mode@_lcd^0,w,c
  1873   0018A8  6E33               	movwf	gpio_Pin_Write_Logic@pin_config^0,c
  1874   0018AA  0E00               	movlw	0
  1875   0018AC  203E               	addwfc	(send_data_4bit_mode@_lcd+1)^0,w,c
  1876   0018AE  6E34               	movwf	(gpio_Pin_Write_Logic@pin_config+1)^0,c
  1877   0018B0  383F               	swapf	send_data_4bit_mode@data^0,w,c
  1878   0018B2  46E8               	rlncf	wreg,f,c
  1879   0018B4  0B1F               	andlw	31
  1880   0018B6  0B01               	andlw	1
  1881   0018B8  6E35               	movwf	gpio_Pin_Write_Logic@logic^0,c
  1882   0018BA  ECF5  F009         	call	_gpio_Pin_Write_Logic	;wreg free
  1883   0018BE  6E40               	movwf	send_data_4bit_mode@ret^0,c
  1884   0018C0                     l2231:
  1885                           
  1886                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 399:         return ret;
  1887   0018C0  5040               	movf	send_data_4bit_mode@ret^0,w,c
  1888   0018C2  0012               	return		;funcret
  1889   0018C4                     __end_of_send_data_4bit_mode:
  1890                           	callstack 0
  1891                           
  1892 ;; *************** function _send_4bit_mode_enable *****************
  1893 ;; Defined at:
  1894 ;;		line 402 in file "ECUAL_LAYER/char_lcd/ecu_char_lcd.c"
  1895 ;; Parameters:    Size  Location     Type
  1896 ;;  _lcd            2   12[COMRAM] PTR const struct .
  1897 ;;		 -> Lcd_Obj(6), 
  1898 ;; Auto vars:     Size  Location     Type
  1899 ;;  ret             1   14[COMRAM] unsigned char 
  1900 ;; Return value:  Size  Location     Type
  1901 ;;                  1    wreg      unsigned char 
  1902 ;; Registers used:
  1903 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1904 ;; Tracked objects:
  1905 ;;		On entry : 0/0
  1906 ;;		On exit  : 0/0
  1907 ;;		Unchanged: 0/0
  1908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1909 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1910 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1912 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1913 ;;Total ram usage:        3 bytes
  1914 ;; Hardware stack levels used: 1
  1915 ;; Hardware stack levels required when called: 4
  1916 ;; This function calls:
  1917 ;;		_gpio_Pin_Write_Logic
  1918 ;; This function is called by:
  1919 ;;		_lcd_4bit_send_command
  1920 ;;		_lcd_4bit_send_char_data
  1921 ;; This function uses a non-reentrant model
  1922 ;;
  1923                           
  1924                           	psect	text9
  1925   001C4C                     __ptext9:
  1926                           	callstack 0
  1927   001C4C                     _send_4bit_mode_enable:
  1928                           	callstack 23
  1929   001C4C                     
  1930                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 404:         if (((void*)0)==_lcd){
  1931   001C4C  503D               	movf	send_4bit_mode_enable@_lcd^0,w,c
  1932   001C4E  103E               	iorwf	(send_4bit_mode_enable@_lcd+1)^0,w,c
  1933   001C50  A4D8               	btfss	status,2,c
  1934   001C52  EF2D  F00E         	goto	u1181
  1935   001C56  EF2F  F00E         	goto	u1180
  1936   001C5A                     u1181:
  1937   001C5A  EF33  F00E         	goto	l2241
  1938   001C5E                     u1180:
  1939   001C5E                     
  1940                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 405:             ret=(Std_ReturnType)0x00;
  1941   001C5E  0E00               	movlw	0
  1942   001C60  6E3F               	movwf	send_4bit_mode_enable@ret^0,c
  1943                           
  1944                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 406:         }
  1945   001C62  EF4C  F00E         	goto	l2247
  1946   001C66                     l2241:
  1947   001C66  0E01               	movlw	1
  1948   001C68  243D               	addwf	send_4bit_mode_enable@_lcd^0,w,c
  1949   001C6A  6E33               	movwf	gpio_Pin_Write_Logic@pin_config^0,c
  1950   001C6C  0E00               	movlw	0
  1951   001C6E  203E               	addwfc	(send_4bit_mode_enable@_lcd+1)^0,w,c
  1952   001C70  6E34               	movwf	(gpio_Pin_Write_Logic@pin_config+1)^0,c
  1953   001C72  0E01               	movlw	1
  1954   001C74  6E35               	movwf	gpio_Pin_Write_Logic@logic^0,c
  1955   001C76  ECF5  F009         	call	_gpio_Pin_Write_Logic	;wreg free
  1956   001C7A                     
  1957                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 409:             _delay((unsigned long)((5)*(80000
      +                          00UL/4000000.0)));
  1958   001C7A  0E03               	movlw	3
  1959   001C7C                     u1877:
  1960   001C7C  2EE8               	decfsz	wreg,f,c
  1961   001C7E  D7FE               	bra	u1877
  1962   001C80  F000               	nop	
  1963   001C82                     
  1964                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 410:             ret=gpio_Pin_Write_Logic(&(_lcd->
      +                          lcd_en),GPIO_LOW);
  1965   001C82  0E01               	movlw	1
  1966   001C84  243D               	addwf	send_4bit_mode_enable@_lcd^0,w,c
  1967   001C86  6E33               	movwf	gpio_Pin_Write_Logic@pin_config^0,c
  1968   001C88  0E00               	movlw	0
  1969   001C8A  203E               	addwfc	(send_4bit_mode_enable@_lcd+1)^0,w,c
  1970   001C8C  6E34               	movwf	(gpio_Pin_Write_Logic@pin_config+1)^0,c
  1971   001C8E  0E00               	movlw	0
  1972   001C90  6E35               	movwf	gpio_Pin_Write_Logic@logic^0,c
  1973   001C92  ECF5  F009         	call	_gpio_Pin_Write_Logic	;wreg free
  1974   001C96  6E3F               	movwf	send_4bit_mode_enable@ret^0,c
  1975   001C98                     l2247:
  1976                           
  1977                           ;ECUAL_LAYER/char_lcd/ecu_char_lcd.c: 412:         return ret;
  1978   001C98  503F               	movf	send_4bit_mode_enable@ret^0,w,c
  1979   001C9A  0012               	return		;funcret
  1980   001C9C                     __end_of_send_4bit_mode_enable:
  1981                           	callstack 0
  1982                           
  1983 ;; *************** function _gpio_Pin_Read_Logic *****************
  1984 ;; Defined at:
  1985 ;;		line 101 in file "MCAL_LAYER/GPIO/hal_gpio.c"
  1986 ;; Parameters:    Size  Location     Type
  1987 ;;  pin_config      2    2[COMRAM] PTR const struct .
  1988 ;;		 -> PinOfExit(1), PinOfEntry(1), 
  1989 ;;  logic           2    4[COMRAM] PTR enum E2965
  1990 ;;		 -> main@u8ReadExitPin(1), main@u8ReadEntryPin(1), 
  1991 ;; Auto vars:     Size  Location     Type
  1992 ;;  ret             1    0        unsigned char 
  1993 ;; Return value:  Size  Location     Type
  1994 ;;                  1    wreg      unsigned char 
  1995 ;; Registers used:
  1996 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1997 ;; Tracked objects:
  1998 ;;		On entry : 0/0
  1999 ;;		On exit  : 0/0
  2000 ;;		Unchanged: 0/0
  2001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2002 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2004 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2005 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2006 ;;Total ram usage:        9 bytes
  2007 ;; Hardware stack levels used: 1
  2008 ;; Hardware stack levels required when called: 3
  2009 ;; This function calls:
  2010 ;;		Nothing
  2011 ;; This function is called by:
  2012 ;;		_main
  2013 ;; This function uses a non-reentrant model
  2014 ;;
  2015                           
  2016                           	psect	text10
  2017   0016F4                     __ptext10:
  2018                           	callstack 0
  2019   0016F4                     _gpio_Pin_Read_Logic:
  2020                           	callstack 27
  2021   0016F4                     
  2022                           ;MCAL_LAYER/GPIO/hal_gpio.c: 103:     if (((void*)0)==pin_config || ((void*)0)==logic ||
      +                           pin_config->pin > 8 -1){
  2023   0016F4  5033               	movf	gpio_Pin_Read_Logic@pin_config^0,w,c
  2024   0016F6  1034               	iorwf	(gpio_Pin_Read_Logic@pin_config+1)^0,w,c
  2025   0016F8  B4D8               	btfsc	status,2,c
  2026   0016FA  EF81  F00B         	goto	u1461
  2027   0016FE  EF83  F00B         	goto	u1460
  2028   001702                     u1461:
  2029   001702  EF9D  F00B         	goto	l2473
  2030   001706                     u1460:
  2031   001706  5035               	movf	gpio_Pin_Read_Logic@logic^0,w,c
  2032   001708  1036               	iorwf	(gpio_Pin_Read_Logic@logic+1)^0,w,c
  2033   00170A  B4D8               	btfsc	status,2,c
  2034   00170C  EF8A  F00B         	goto	u1471
  2035   001710  EF8C  F00B         	goto	u1470
  2036   001714                     u1471:
  2037   001714  EF9D  F00B         	goto	l2473
  2038   001718                     u1470:
  2039   001718  C033  FFD9         	movff	gpio_Pin_Read_Logic@pin_config,fsr2l
  2040   00171C  C034  FFDA         	movff	gpio_Pin_Read_Logic@pin_config+1,fsr2h
  2041   001720  30DF               	rrcf	223,w,c
  2042   001722  32E8               	rrcf	wreg,f,c
  2043   001724  32E8               	rrcf	wreg,f,c
  2044   001726  0B07               	andlw	7
  2045   001728  6E37               	movwf	??_gpio_Pin_Read_Logic^0,c
  2046   00172A  0E07               	movlw	7
  2047   00172C  6437               	cpfsgt	??_gpio_Pin_Read_Logic^0,c
  2048   00172E  EF9B  F00B         	goto	u1481
  2049   001732  EF9D  F00B         	goto	u1480
  2050   001736                     u1481:
  2051   001736  EF9F  F00B         	goto	l2475
  2052   00173A                     u1480:
  2053   00173A                     l2473:
  2054                           
  2055                           ;MCAL_LAYER/GPIO/hal_gpio.c: 105:     }
  2056   00173A  EFD0  F00B         	goto	l99
  2057   00173E                     l2475:
  2058                           
  2059                           ;MCAL_LAYER/GPIO/hal_gpio.c: 107:         *logic=((*port_registers[pin_config->port] >> 
      +                          pin_config->pin) & (uint8)1);
  2060   00173E  C033  FFD9         	movff	gpio_Pin_Read_Logic@pin_config,fsr2l
  2061   001742  C034  FFDA         	movff	gpio_Pin_Read_Logic@pin_config+1,fsr2h
  2062   001746  30DF               	rrcf	223,w,c
  2063   001748  32E8               	rrcf	wreg,f,c
  2064   00174A  32E8               	rrcf	wreg,f,c
  2065   00174C  0B07               	andlw	7
  2066   00174E  6E37               	movwf	??_gpio_Pin_Read_Logic^0,c
  2067   001750  C033  FFD9         	movff	gpio_Pin_Read_Logic@pin_config,fsr2l
  2068   001754  C034  FFDA         	movff	gpio_Pin_Read_Logic@pin_config+1,fsr2h
  2069   001758  50DF               	movf	223,w,c
  2070   00175A  0B07               	andlw	7
  2071   00175C  6E38               	movwf	(??_gpio_Pin_Read_Logic+1)^0,c
  2072   00175E  5038               	movf	(??_gpio_Pin_Read_Logic+1)^0,w,c
  2073   001760  0D02               	mullw	2
  2074   001762  0E01               	movlw	low _port_registers
  2075   001764  24F3               	addwf	243,w,c
  2076   001766  6ED9               	movwf	fsr2l,c
  2077   001768  0E00               	movlw	high _port_registers
  2078   00176A  20F4               	addwfc	prodh,w,c
  2079   00176C  6EDA               	movwf	fsr2h,c
  2080   00176E  CFDE F039          	movff	postinc2,??_gpio_Pin_Read_Logic+2
  2081   001772  CFDD F03A          	movff	postdec2,??_gpio_Pin_Read_Logic+3
  2082   001776  C039  FFD9         	movff	??_gpio_Pin_Read_Logic+2,fsr2l
  2083   00177A  C03A  FFDA         	movff	??_gpio_Pin_Read_Logic+3,fsr2h
  2084   00177E  50DF               	movf	indf2,w,c
  2085   001780  6E3B               	movwf	(??_gpio_Pin_Read_Logic+4)^0,c
  2086   001782  2A37               	incf	??_gpio_Pin_Read_Logic^0,f,c
  2087   001784  EFC6  F00B         	goto	u1494
  2088   001788                     u1495:
  2089   001788  90D8               	bcf	status,0,c
  2090   00178A  323B               	rrcf	(??_gpio_Pin_Read_Logic+4)^0,f,c
  2091   00178C                     u1494:
  2092   00178C  2E37               	decfsz	??_gpio_Pin_Read_Logic^0,f,c
  2093   00178E  EFC4  F00B         	goto	u1495
  2094   001792  503B               	movf	(??_gpio_Pin_Read_Logic+4)^0,w,c
  2095   001794  0B01               	andlw	1
  2096   001796  C035  FFD9         	movff	gpio_Pin_Read_Logic@logic,fsr2l
  2097   00179A  C036  FFDA         	movff	gpio_Pin_Read_Logic@logic+1,fsr2h
  2098   00179E  6EDF               	movwf	indf2,c
  2099   0017A0                     l99:
  2100   0017A0  0012               	return		;funcret
  2101   0017A2                     __end_of_gpio_Pin_Read_Logic:
  2102                           	callstack 0
  2103                           
  2104 ;; *************** function _dc_motor_stop *****************
  2105 ;; Defined at:
  2106 ;;		line 76 in file "ECUAL_LAYER/DC_Motor/ecu_motor.c"
  2107 ;; Parameters:    Size  Location     Type
  2108 ;;  dc_motor        2   12[COMRAM] PTR struct .
  2109 ;;		 -> DC_Exit(2), DC_Entry(2), 
  2110 ;; Auto vars:     Size  Location     Type
  2111 ;;  ret             1   14[COMRAM] unsigned char 
  2112 ;; Return value:  Size  Location     Type
  2113 ;;                  1    wreg      unsigned char 
  2114 ;; Registers used:
  2115 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2116 ;; Tracked objects:
  2117 ;;		On entry : 0/0
  2118 ;;		On exit  : 0/0
  2119 ;;		Unchanged: 0/0
  2120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2121 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2122 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2124 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2125 ;;Total ram usage:        3 bytes
  2126 ;; Hardware stack levels used: 1
  2127 ;; Hardware stack levels required when called: 4
  2128 ;; This function calls:
  2129 ;;		_gpio_Pin_Write_Logic
  2130 ;; This function is called by:
  2131 ;;		_main
  2132 ;; This function uses a non-reentrant model
  2133 ;;
  2134                           
  2135                           	psect	text11
  2136   001CE2                     __ptext11:
  2137                           	callstack 0
  2138   001CE2                     _dc_motor_stop:
  2139                           	callstack 26
  2140   001CE2                     
  2141                           ;ECUAL_LAYER/DC_Motor/ecu_motor.c: 78:      if (((void*)0)==dc_motor){
  2142   001CE2  503D               	movf	dc_motor_stop@dc_motor^0,w,c
  2143   001CE4  103E               	iorwf	(dc_motor_stop@dc_motor+1)^0,w,c
  2144   001CE6  A4D8               	btfss	status,2,c
  2145   001CE8  EF78  F00E         	goto	u1641
  2146   001CEC  EF7A  F00E         	goto	u1640
  2147   001CF0                     u1641:
  2148   001CF0  EF7C  F00E         	goto	l2635
  2149   001CF4                     u1640:
  2150   001CF4                     
  2151                           ;ECUAL_LAYER/DC_Motor/ecu_motor.c: 80:      }
  2152   001CF4  EF90  F00E         	goto	l499
  2153   001CF8                     l2635:
  2154                           
  2155                           ;ECUAL_LAYER/DC_Motor/ecu_motor.c: 82:         ret=gpio_Pin_Write_Logic(&(dc_motor->dc_m
      +                          otor_pin[0x00U]),GPIO_LOW);
  2156   001CF8  C03D  F033         	movff	dc_motor_stop@dc_motor,gpio_Pin_Write_Logic@pin_config
  2157   001CFC  C03E  F034         	movff	dc_motor_stop@dc_motor+1,gpio_Pin_Write_Logic@pin_config+1
  2158   001D00  0E00               	movlw	0
  2159   001D02  6E35               	movwf	gpio_Pin_Write_Logic@logic^0,c
  2160   001D04  ECF5  F009         	call	_gpio_Pin_Write_Logic	;wreg free
  2161   001D08  6E3F               	movwf	dc_motor_stop@ret^0,c
  2162                           
  2163                           ;ECUAL_LAYER/DC_Motor/ecu_motor.c: 83:         ret=gpio_Pin_Write_Logic(&(dc_motor->dc_m
      +                          otor_pin[0x01U]),GPIO_LOW);
  2164   001D0A  0E01               	movlw	1
  2165   001D0C  243D               	addwf	dc_motor_stop@dc_motor^0,w,c
  2166   001D0E  6E33               	movwf	gpio_Pin_Write_Logic@pin_config^0,c
  2167   001D10  0E00               	movlw	0
  2168   001D12  203E               	addwfc	(dc_motor_stop@dc_motor+1)^0,w,c
  2169   001D14  6E34               	movwf	(gpio_Pin_Write_Logic@pin_config+1)^0,c
  2170   001D16  0E00               	movlw	0
  2171   001D18  6E35               	movwf	gpio_Pin_Write_Logic@logic^0,c
  2172   001D1A  ECF5  F009         	call	_gpio_Pin_Write_Logic	;wreg free
  2173   001D1E  6E3F               	movwf	dc_motor_stop@ret^0,c
  2174   001D20                     l499:
  2175   001D20  0012               	return		;funcret
  2176   001D22                     __end_of_dc_motor_stop:
  2177                           	callstack 0
  2178                           
  2179 ;; *************** function _dc_motor_move_right *****************
  2180 ;; Defined at:
  2181 ;;		line 38 in file "ECUAL_LAYER/DC_Motor/ecu_motor.c"
  2182 ;; Parameters:    Size  Location     Type
  2183 ;;  dc_motor        2   12[COMRAM] PTR struct .
  2184 ;;		 -> DC_Exit(2), DC_Entry(2), 
  2185 ;; Auto vars:     Size  Location     Type
  2186 ;;  ret             1   14[COMRAM] unsigned char 
  2187 ;; Return value:  Size  Location     Type
  2188 ;;                  1    wreg      unsigned char 
  2189 ;; Registers used:
  2190 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2191 ;; Tracked objects:
  2192 ;;		On entry : 0/0
  2193 ;;		On exit  : 0/0
  2194 ;;		Unchanged: 0/0
  2195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2196 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2197 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2199 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2200 ;;Total ram usage:        3 bytes
  2201 ;; Hardware stack levels used: 1
  2202 ;; Hardware stack levels required when called: 4
  2203 ;; This function calls:
  2204 ;;		_gpio_Pin_Write_Logic
  2205 ;; This function is called by:
  2206 ;;		_main
  2207 ;; This function uses a non-reentrant model
  2208 ;;
  2209                           
  2210                           	psect	text12
  2211   001D22                     __ptext12:
  2212                           	callstack 0
  2213   001D22                     _dc_motor_move_right:
  2214                           	callstack 26
  2215   001D22                     
  2216                           ;ECUAL_LAYER/DC_Motor/ecu_motor.c: 40:      if (((void*)0)==dc_motor){
  2217   001D22  503D               	movf	dc_motor_move_right@dc_motor^0,w,c
  2218   001D24  103E               	iorwf	(dc_motor_move_right@dc_motor+1)^0,w,c
  2219   001D26  A4D8               	btfss	status,2,c
  2220   001D28  EF98  F00E         	goto	u1621
  2221   001D2C  EF9A  F00E         	goto	u1620
  2222   001D30                     u1621:
  2223   001D30  EF9C  F00E         	goto	l2615
  2224   001D34                     u1620:
  2225   001D34                     
  2226                           ;ECUAL_LAYER/DC_Motor/ecu_motor.c: 42:      }
  2227   001D34  EFB0  F00E         	goto	l489
  2228   001D38                     l2615:
  2229                           
  2230                           ;ECUAL_LAYER/DC_Motor/ecu_motor.c: 44:          ret=gpio_Pin_Write_Logic(&(dc_motor->dc_
      +                          motor_pin[0x00U]),GPIO_HIGH);
  2231   001D38  C03D  F033         	movff	dc_motor_move_right@dc_motor,gpio_Pin_Write_Logic@pin_config
  2232   001D3C  C03E  F034         	movff	dc_motor_move_right@dc_motor+1,gpio_Pin_Write_Logic@pin_config+1
  2233   001D40  0E01               	movlw	1
  2234   001D42  6E35               	movwf	gpio_Pin_Write_Logic@logic^0,c
  2235   001D44  ECF5  F009         	call	_gpio_Pin_Write_Logic	;wreg free
  2236   001D48  6E3F               	movwf	dc_motor_move_right@ret^0,c
  2237                           
  2238                           ;ECUAL_LAYER/DC_Motor/ecu_motor.c: 45:          ret=gpio_Pin_Write_Logic(&(dc_motor->dc_
      +                          motor_pin[0x01U]),GPIO_LOW);
  2239   001D4A  0E01               	movlw	1
  2240   001D4C  243D               	addwf	dc_motor_move_right@dc_motor^0,w,c
  2241   001D4E  6E33               	movwf	gpio_Pin_Write_Logic@pin_config^0,c
  2242   001D50  0E00               	movlw	0
  2243   001D52  203E               	addwfc	(dc_motor_move_right@dc_motor+1)^0,w,c
  2244   001D54  6E34               	movwf	(gpio_Pin_Write_Logic@pin_config+1)^0,c
  2245   001D56  0E00               	movlw	0
  2246   001D58  6E35               	movwf	gpio_Pin_Write_Logic@logic^0,c
  2247   001D5A  ECF5  F009         	call	_gpio_Pin_Write_Logic	;wreg free
  2248   001D5E  6E3F               	movwf	dc_motor_move_right@ret^0,c
  2249   001D60                     l489:
  2250   001D60  0012               	return		;funcret
  2251   001D62                     __end_of_dc_motor_move_right:
  2252                           	callstack 0
  2253                           
  2254 ;; *************** function _dc_motor_move_left *****************
  2255 ;; Defined at:
  2256 ;;		line 57 in file "ECUAL_LAYER/DC_Motor/ecu_motor.c"
  2257 ;; Parameters:    Size  Location     Type
  2258 ;;  dc_motor        2   12[COMRAM] PTR struct .
  2259 ;;		 -> DC_Exit(2), DC_Entry(2), 
  2260 ;; Auto vars:     Size  Location     Type
  2261 ;;  ret             1   14[COMRAM] unsigned char 
  2262 ;; Return value:  Size  Location     Type
  2263 ;;                  1    wreg      unsigned char 
  2264 ;; Registers used:
  2265 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2266 ;; Tracked objects:
  2267 ;;		On entry : 0/0
  2268 ;;		On exit  : 0/0
  2269 ;;		Unchanged: 0/0
  2270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2271 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2272 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2274 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2275 ;;Total ram usage:        3 bytes
  2276 ;; Hardware stack levels used: 1
  2277 ;; Hardware stack levels required when called: 4
  2278 ;; This function calls:
  2279 ;;		_gpio_Pin_Write_Logic
  2280 ;; This function is called by:
  2281 ;;		_main
  2282 ;; This function uses a non-reentrant model
  2283 ;;
  2284                           
  2285                           	psect	text13
  2286   001D62                     __ptext13:
  2287                           	callstack 0
  2288   001D62                     _dc_motor_move_left:
  2289                           	callstack 26
  2290   001D62                     
  2291                           ;ECUAL_LAYER/DC_Motor/ecu_motor.c: 59:      if (((void*)0)==dc_motor){
  2292   001D62  503D               	movf	dc_motor_move_left@dc_motor^0,w,c
  2293   001D64  103E               	iorwf	(dc_motor_move_left@dc_motor+1)^0,w,c
  2294   001D66  A4D8               	btfss	status,2,c
  2295   001D68  EFB8  F00E         	goto	u1631
  2296   001D6C  EFBA  F00E         	goto	u1630
  2297   001D70                     u1631:
  2298   001D70  EFBC  F00E         	goto	l2625
  2299   001D74                     u1630:
  2300   001D74                     
  2301                           ;ECUAL_LAYER/DC_Motor/ecu_motor.c: 61:      }
  2302   001D74  EFD0  F00E         	goto	l494
  2303   001D78                     l2625:
  2304                           
  2305                           ;ECUAL_LAYER/DC_Motor/ecu_motor.c: 63:         ret=gpio_Pin_Write_Logic(&(dc_motor->dc_m
      +                          otor_pin[0x00U]),GPIO_LOW);
  2306   001D78  C03D  F033         	movff	dc_motor_move_left@dc_motor,gpio_Pin_Write_Logic@pin_config
  2307   001D7C  C03E  F034         	movff	dc_motor_move_left@dc_motor+1,gpio_Pin_Write_Logic@pin_config+1
  2308   001D80  0E00               	movlw	0
  2309   001D82  6E35               	movwf	gpio_Pin_Write_Logic@logic^0,c
  2310   001D84  ECF5  F009         	call	_gpio_Pin_Write_Logic	;wreg free
  2311   001D88  6E3F               	movwf	dc_motor_move_left@ret^0,c
  2312                           
  2313                           ;ECUAL_LAYER/DC_Motor/ecu_motor.c: 64:         ret=gpio_Pin_Write_Logic(&(dc_motor->dc_m
      +                          otor_pin[0x01U]),GPIO_HIGH);
  2314   001D8A  0E01               	movlw	1
  2315   001D8C  243D               	addwf	dc_motor_move_left@dc_motor^0,w,c
  2316   001D8E  6E33               	movwf	gpio_Pin_Write_Logic@pin_config^0,c
  2317   001D90  0E00               	movlw	0
  2318   001D92  203E               	addwfc	(dc_motor_move_left@dc_motor+1)^0,w,c
  2319   001D94  6E34               	movwf	(gpio_Pin_Write_Logic@pin_config+1)^0,c
  2320   001D96  0E01               	movlw	1
  2321   001D98  6E35               	movwf	gpio_Pin_Write_Logic@logic^0,c
  2322   001D9A  ECF5  F009         	call	_gpio_Pin_Write_Logic	;wreg free
  2323   001D9E  6E3F               	movwf	dc_motor_move_left@ret^0,c
  2324   001DA0                     l494:
  2325   001DA0  0012               	return		;funcret
  2326   001DA2                     __end_of_dc_motor_move_left:
  2327                           	callstack 0
  2328                           
  2329 ;; *************** function _dc_motor_initialize *****************
  2330 ;; Defined at:
  2331 ;;		line 19 in file "ECUAL_LAYER/DC_Motor/ecu_motor.c"
  2332 ;; Parameters:    Size  Location     Type
  2333 ;;  dc_motor        2   16[COMRAM] PTR struct .
  2334 ;;		 -> DC_Exit(2), DC_Entry(2), 
  2335 ;; Auto vars:     Size  Location     Type
  2336 ;;  ret             1   18[COMRAM] unsigned char 
  2337 ;; Return value:  Size  Location     Type
  2338 ;;                  1    wreg      unsigned char 
  2339 ;; Registers used:
  2340 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2341 ;; Tracked objects:
  2342 ;;		On entry : 0/0
  2343 ;;		On exit  : 0/0
  2344 ;;		Unchanged: 0/0
  2345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2346 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2347 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2349 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2350 ;;Total ram usage:        3 bytes
  2351 ;; Hardware stack levels used: 1
  2352 ;; Hardware stack levels required when called: 5
  2353 ;; This function calls:
  2354 ;;		_gpio_Pin_Intialize
  2355 ;; This function is called by:
  2356 ;;		_main
  2357 ;; This function uses a non-reentrant model
  2358 ;;
  2359                           
  2360                           	psect	text14
  2361   001DE0                     __ptext14:
  2362                           	callstack 0
  2363   001DE0                     _dc_motor_initialize:
  2364                           	callstack 25
  2365   001DE0                     
  2366                           ;ECUAL_LAYER/DC_Motor/ecu_motor.c: 21:      if (((void*)0)==dc_motor){
  2367   001DE0  5041               	movf	dc_motor_initialize@dc_motor^0,w,c
  2368   001DE2  1042               	iorwf	(dc_motor_initialize@dc_motor+1)^0,w,c
  2369   001DE4  A4D8               	btfss	status,2,c
  2370   001DE6  EFF7  F00E         	goto	u1611
  2371   001DEA  EFF9  F00E         	goto	u1610
  2372   001DEE                     u1611:
  2373   001DEE  EFFB  F00E         	goto	l2605
  2374   001DF2                     u1610:
  2375   001DF2                     
  2376                           ;ECUAL_LAYER/DC_Motor/ecu_motor.c: 23:      }
  2377   001DF2  EF0B  F00F         	goto	l484
  2378   001DF6                     l2605:
  2379                           
  2380                           ;ECUAL_LAYER/DC_Motor/ecu_motor.c: 25:            ret=gpio_Pin_Intialize(&(dc_motor->dc_
      +                          motor_pin[0x00U]));
  2381   001DF6  C041  F03D         	movff	dc_motor_initialize@dc_motor,gpio_Pin_Intialize@pin_config
  2382   001DFA  C042  F03E         	movff	dc_motor_initialize@dc_motor+1,gpio_Pin_Intialize@pin_config+1
  2383   001DFE  EC4A  F00D         	call	_gpio_Pin_Intialize	;wreg free
  2384   001E02  6E43               	movwf	dc_motor_initialize@ret^0,c
  2385                           
  2386                           ;ECUAL_LAYER/DC_Motor/ecu_motor.c: 26:            ret=gpio_Pin_Intialize(&(dc_motor->dc_
      +                          motor_pin[0x01U]));
  2387   001E04  0E01               	movlw	1
  2388   001E06  2441               	addwf	dc_motor_initialize@dc_motor^0,w,c
  2389   001E08  6E3D               	movwf	gpio_Pin_Intialize@pin_config^0,c
  2390   001E0A  0E00               	movlw	0
  2391   001E0C  2042               	addwfc	(dc_motor_initialize@dc_motor+1)^0,w,c
  2392   001E0E  6E3E               	movwf	(gpio_Pin_Intialize@pin_config+1)^0,c
  2393   001E10  EC4A  F00D         	call	_gpio_Pin_Intialize	;wreg free
  2394   001E14  6E43               	movwf	dc_motor_initialize@ret^0,c
  2395   001E16                     l484:
  2396   001E16  0012               	return		;funcret
  2397   001E18                     __end_of_dc_motor_initialize:
  2398                           	callstack 0
  2399                           
  2400 ;; *************** function _gpio_Pin_Intialize *****************
  2401 ;; Defined at:
  2402 ;;		line 141 in file "MCAL_LAYER/GPIO/hal_gpio.c"
  2403 ;; Parameters:    Size  Location     Type
  2404 ;;  pin_config      2   12[COMRAM] PTR const struct .
  2405 ;;		 -> PinOfExit(1), PinOfEntry(1), Lcd_Obj.lcd_data(4), Lcd_Obj(6), 
  2406 ;;		 -> DC_Exit.dc_motor_pin(2), DC_Exit(2), DC_Entry.dc_motor_pin(2), DC_Entry(2), 
  2407 ;; Auto vars:     Size  Location     Type
  2408 ;;  ret             1   15[COMRAM] unsigned char 
  2409 ;; Return value:  Size  Location     Type
  2410 ;;                  1    wreg      unsigned char 
  2411 ;; Registers used:
  2412 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2413 ;; Tracked objects:
  2414 ;;		On entry : 0/0
  2415 ;;		On exit  : 0/0
  2416 ;;		Unchanged: 0/0
  2417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2418 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2419 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2420 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2421 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2422 ;;Total ram usage:        4 bytes
  2423 ;; Hardware stack levels used: 1
  2424 ;; Hardware stack levels required when called: 4
  2425 ;; This function calls:
  2426 ;;		_gpio_Pin_Derction_Intialize
  2427 ;;		_gpio_Pin_Write_Logic
  2428 ;; This function is called by:
  2429 ;;		_lcd_4bit_initialize
  2430 ;;		_dc_motor_initialize
  2431 ;;		_main
  2432 ;;		_lcd_8bit_initialize
  2433 ;; This function uses a non-reentrant model
  2434 ;;
  2435                           
  2436                           	psect	text15
  2437   001A94                     __ptext15:
  2438                           	callstack 0
  2439   001A94                     _gpio_Pin_Intialize:
  2440                           	callstack 25
  2441   001A94                     
  2442                           ;MCAL_LAYER/GPIO/hal_gpio.c: 143:     if (((void*)0)==pin_config || pin_config->pin > 8 
      +                          -1){
  2443   001A94  503D               	movf	gpio_Pin_Intialize@pin_config^0,w,c
  2444   001A96  103E               	iorwf	(gpio_Pin_Intialize@pin_config+1)^0,w,c
  2445   001A98  B4D8               	btfsc	status,2,c
  2446   001A9A  EF51  F00D         	goto	u1361
  2447   001A9E  EF53  F00D         	goto	u1360
  2448   001AA2                     u1361:
  2449   001AA2  EF64  F00D         	goto	l2367
  2450   001AA6                     u1360:
  2451   001AA6  C03D  FFD9         	movff	gpio_Pin_Intialize@pin_config,fsr2l
  2452   001AAA  C03E  FFDA         	movff	gpio_Pin_Intialize@pin_config+1,fsr2h
  2453   001AAE  30DF               	rrcf	223,w,c
  2454   001AB0  32E8               	rrcf	wreg,f,c
  2455   001AB2  32E8               	rrcf	wreg,f,c
  2456   001AB4  0B07               	andlw	7
  2457   001AB6  6E3F               	movwf	??_gpio_Pin_Intialize^0,c
  2458   001AB8  0E07               	movlw	7
  2459   001ABA  643F               	cpfsgt	??_gpio_Pin_Intialize^0,c
  2460   001ABC  EF62  F00D         	goto	u1371
  2461   001AC0  EF64  F00D         	goto	u1370
  2462   001AC4                     u1371:
  2463   001AC4  EF64  F00D         	goto	l2369
  2464   001AC8                     u1370:
  2465   001AC8                     l2367:
  2466   001AC8                     l2369:
  2467   001AC8  C03D  F033         	movff	gpio_Pin_Intialize@pin_config,gpio_Pin_Derction_Intialize@pin_config
  2468   001ACC  C03E  F034         	movff	gpio_Pin_Intialize@pin_config+1,gpio_Pin_Derction_Intialize@pin_config+1
  2469   001AD0  EC53  F009         	call	_gpio_Pin_Derction_Intialize	;wreg free
  2470   001AD4                     
  2471                           ;MCAL_LAYER/GPIO/hal_gpio.c: 147:     ret=gpio_Pin_Write_Logic(pin_config,pin_config->lo
      +                          gic);
  2472   001AD4  C03D  F033         	movff	gpio_Pin_Intialize@pin_config,gpio_Pin_Write_Logic@pin_config
  2473   001AD8  C03E  F034         	movff	gpio_Pin_Intialize@pin_config+1,gpio_Pin_Write_Logic@pin_config+1
  2474   001ADC  C03D  FFD9         	movff	gpio_Pin_Intialize@pin_config,fsr2l
  2475   001AE0  C03E  FFDA         	movff	gpio_Pin_Intialize@pin_config+1,fsr2h
  2476   001AE4  0E00               	movlw	0
  2477   001AE6  BEDF               	btfsc	indf2,7,c
  2478   001AE8  0E01               	movlw	1
  2479   001AEA  6E35               	movwf	gpio_Pin_Write_Logic@logic^0,c
  2480   001AEC  ECF5  F009         	call	_gpio_Pin_Write_Logic	;wreg free
  2481   001AF0  6E40               	movwf	gpio_Pin_Intialize@ret^0,c
  2482                           
  2483                           ;MCAL_LAYER/GPIO/hal_gpio.c: 149:     return ret;
  2484   001AF2  5040               	movf	gpio_Pin_Intialize@ret^0,w,c
  2485   001AF4  0012               	return		;funcret
  2486   001AF6                     __end_of_gpio_Pin_Intialize:
  2487                           	callstack 0
  2488                           
  2489 ;; *************** function _gpio_Pin_Write_Logic *****************
  2490 ;; Defined at:
  2491 ;;		line 75 in file "MCAL_LAYER/GPIO/hal_gpio.c"
  2492 ;; Parameters:    Size  Location     Type
  2493 ;;  pin_config      2    2[COMRAM] PTR const struct .
  2494 ;;		 -> PinOfExit(1), PinOfEntry(1), Lcd_Obj.lcd_data(4), Lcd_Obj(6), 
  2495 ;;		 -> DC_Exit.dc_motor_pin(2), DC_Exit(2), DC_Entry.dc_motor_pin(2), DC_Entry(2), 
  2496 ;;  logic           1    4[COMRAM] enum E2965
  2497 ;; Auto vars:     Size  Location     Type
  2498 ;;  ret             1   11[COMRAM] unsigned char 
  2499 ;; Return value:  Size  Location     Type
  2500 ;;                  1    wreg      unsigned char 
  2501 ;; Registers used:
  2502 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2503 ;; Tracked objects:
  2504 ;;		On entry : 0/0
  2505 ;;		On exit  : 0/0
  2506 ;;		Unchanged: 0/0
  2507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2508 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2509 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2510 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2511 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2512 ;;Total ram usage:       10 bytes
  2513 ;; Hardware stack levels used: 1
  2514 ;; Hardware stack levels required when called: 3
  2515 ;; This function calls:
  2516 ;;		Nothing
  2517 ;; This function is called by:
  2518 ;;		_gpio_Pin_Intialize
  2519 ;;		_lcd_4bit_send_command
  2520 ;;		_lcd_4bit_send_char_data
  2521 ;;		_send_data_4bit_mode
  2522 ;;		_send_4bit_mode_enable
  2523 ;;		_dc_motor_move_right
  2524 ;;		_dc_motor_move_left
  2525 ;;		_dc_motor_stop
  2526 ;;		_lcd_8bit_send_command
  2527 ;;		_lcd_8bit_send_char_data
  2528 ;;		_send_8bit_mode_enable
  2529 ;; This function uses a non-reentrant model
  2530 ;;
  2531                           
  2532                           	psect	text16
  2533   0013EA                     __ptext16:
  2534                           	callstack 0
  2535   0013EA                     _gpio_Pin_Write_Logic:
  2536                           	callstack 23
  2537   0013EA                     
  2538                           ;MCAL_LAYER/GPIO/hal_gpio.c: 76:     Std_ReturnType ret=(Std_ReturnType)0x01;
  2539   0013EA  0E01               	movlw	1
  2540   0013EC  6E3C               	movwf	gpio_Pin_Write_Logic@ret^0,c
  2541   0013EE                     
  2542                           ;MCAL_LAYER/GPIO/hal_gpio.c: 77:     if (((void*)0)==pin_config || pin_config->pin > 8 -
      +                          1 ){
  2543   0013EE  5033               	movf	gpio_Pin_Write_Logic@pin_config^0,w,c
  2544   0013F0  1034               	iorwf	(gpio_Pin_Write_Logic@pin_config+1)^0,w,c
  2545   0013F2  B4D8               	btfsc	status,2,c
  2546   0013F4  EFFE  F009         	goto	u1131
  2547   0013F8  EF00  F00A         	goto	u1130
  2548   0013FC                     u1131:
  2549   0013FC  EF11  F00A         	goto	l2205
  2550   001400                     u1130:
  2551   001400  C033  FFD9         	movff	gpio_Pin_Write_Logic@pin_config,fsr2l
  2552   001404  C034  FFDA         	movff	gpio_Pin_Write_Logic@pin_config+1,fsr2h
  2553   001408  30DF               	rrcf	223,w,c
  2554   00140A  32E8               	rrcf	wreg,f,c
  2555   00140C  32E8               	rrcf	wreg,f,c
  2556   00140E  0B07               	andlw	7
  2557   001410  6E36               	movwf	??_gpio_Pin_Write_Logic^0,c
  2558   001412  0E07               	movlw	7
  2559   001414  6436               	cpfsgt	??_gpio_Pin_Write_Logic^0,c
  2560   001416  EF0F  F00A         	goto	u1141
  2561   00141A  EF11  F00A         	goto	u1140
  2562   00141E                     u1141:
  2563   00141E  EF74  F00A         	goto	l2213
  2564   001422                     u1140:
  2565   001422                     l2205:
  2566                           
  2567                           ;MCAL_LAYER/GPIO/hal_gpio.c: 78:         ret=(Std_ReturnType)0x00;
  2568   001422  0E00               	movlw	0
  2569   001424  6E3C               	movwf	gpio_Pin_Write_Logic@ret^0,c
  2570   001426  EF74  F00A         	goto	l2213
  2571   00142A                     l2207:
  2572                           
  2573                           ;MCAL_LAYER/GPIO/hal_gpio.c: 82:             (*lat_registers[pin_config->port] &=~((uint
      +                          8)1 << pin_config->pin));
  2574   00142A  C033  FFD9         	movff	gpio_Pin_Write_Logic@pin_config,fsr2l
  2575   00142E  C034  FFDA         	movff	gpio_Pin_Write_Logic@pin_config+1,fsr2h
  2576   001432  30DF               	rrcf	223,w,c
  2577   001434  32E8               	rrcf	wreg,f,c
  2578   001436  32E8               	rrcf	wreg,f,c
  2579   001438  0B07               	andlw	7
  2580   00143A  6E36               	movwf	??_gpio_Pin_Write_Logic^0,c
  2581   00143C  0E01               	movlw	1
  2582   00143E  6E37               	movwf	(??_gpio_Pin_Write_Logic+1)^0,c
  2583   001440  2A36               	incf	??_gpio_Pin_Write_Logic^0,f,c
  2584   001442  EF25  F00A         	goto	u1154
  2585   001446                     u1155:
  2586   001446  90D8               	bcf	status,0,c
  2587   001448  3637               	rlcf	(??_gpio_Pin_Write_Logic+1)^0,f,c
  2588   00144A                     u1154:
  2589   00144A  2E36               	decfsz	??_gpio_Pin_Write_Logic^0,f,c
  2590   00144C  EF23  F00A         	goto	u1155
  2591   001450  5037               	movf	(??_gpio_Pin_Write_Logic+1)^0,w,c
  2592   001452  0AFF               	xorlw	255
  2593   001454  6E38               	movwf	(??_gpio_Pin_Write_Logic+2)^0,c
  2594   001456  C033  FFD9         	movff	gpio_Pin_Write_Logic@pin_config,fsr2l
  2595   00145A  C034  FFDA         	movff	gpio_Pin_Write_Logic@pin_config+1,fsr2h
  2596   00145E  50DF               	movf	223,w,c
  2597   001460  0B07               	andlw	7
  2598   001462  6E39               	movwf	(??_gpio_Pin_Write_Logic+3)^0,c
  2599   001464  5039               	movf	(??_gpio_Pin_Write_Logic+3)^0,w,c
  2600   001466  0D02               	mullw	2
  2601   001468  0E0B               	movlw	low _lat_registers
  2602   00146A  24F3               	addwf	243,w,c
  2603   00146C  6ED9               	movwf	fsr2l,c
  2604   00146E  0E00               	movlw	high _lat_registers
  2605   001470  20F4               	addwfc	prodh,w,c
  2606   001472  6EDA               	movwf	fsr2h,c
  2607   001474  CFDE F03A          	movff	postinc2,??_gpio_Pin_Write_Logic+4
  2608   001478  CFDD F03B          	movff	postdec2,??_gpio_Pin_Write_Logic+5
  2609   00147C  C03A  FFD9         	movff	??_gpio_Pin_Write_Logic+4,fsr2l
  2610   001480  C03B  FFDA         	movff	??_gpio_Pin_Write_Logic+5,fsr2h
  2611   001484  5038               	movf	(??_gpio_Pin_Write_Logic+2)^0,w,c
  2612   001486  16DF               	andwf	indf2,f,c
  2613                           
  2614                           ;MCAL_LAYER/GPIO/hal_gpio.c: 83:             break;
  2615   001488  EF89  F00A         	goto	l2215
  2616   00148C                     l2209:
  2617                           
  2618                           ;MCAL_LAYER/GPIO/hal_gpio.c: 85:             (*lat_registers[pin_config->port] |=((uint8
      +                          )1 << pin_config->pin));
  2619   00148C  C033  FFD9         	movff	gpio_Pin_Write_Logic@pin_config,fsr2l
  2620   001490  C034  FFDA         	movff	gpio_Pin_Write_Logic@pin_config+1,fsr2h
  2621   001494  30DF               	rrcf	223,w,c
  2622   001496  32E8               	rrcf	wreg,f,c
  2623   001498  32E8               	rrcf	wreg,f,c
  2624   00149A  0B07               	andlw	7
  2625   00149C  6E36               	movwf	??_gpio_Pin_Write_Logic^0,c
  2626   00149E  0E01               	movlw	1
  2627   0014A0  6E37               	movwf	(??_gpio_Pin_Write_Logic+1)^0,c
  2628   0014A2  2A36               	incf	??_gpio_Pin_Write_Logic^0,f,c
  2629   0014A4  EF56  F00A         	goto	u1164
  2630   0014A8                     u1165:
  2631   0014A8  90D8               	bcf	status,0,c
  2632   0014AA  3637               	rlcf	(??_gpio_Pin_Write_Logic+1)^0,f,c
  2633   0014AC                     u1164:
  2634   0014AC  2E36               	decfsz	??_gpio_Pin_Write_Logic^0,f,c
  2635   0014AE  EF54  F00A         	goto	u1165
  2636   0014B2  C033  FFD9         	movff	gpio_Pin_Write_Logic@pin_config,fsr2l
  2637   0014B6  C034  FFDA         	movff	gpio_Pin_Write_Logic@pin_config+1,fsr2h
  2638   0014BA  50DF               	movf	223,w,c
  2639   0014BC  0B07               	andlw	7
  2640   0014BE  6E38               	movwf	(??_gpio_Pin_Write_Logic+2)^0,c
  2641   0014C0  5038               	movf	(??_gpio_Pin_Write_Logic+2)^0,w,c
  2642   0014C2  0D02               	mullw	2
  2643   0014C4  0E0B               	movlw	low _lat_registers
  2644   0014C6  24F3               	addwf	243,w,c
  2645   0014C8  6ED9               	movwf	fsr2l,c
  2646   0014CA  0E00               	movlw	high _lat_registers
  2647   0014CC  20F4               	addwfc	prodh,w,c
  2648   0014CE  6EDA               	movwf	fsr2h,c
  2649   0014D0  CFDE F039          	movff	postinc2,??_gpio_Pin_Write_Logic+3
  2650   0014D4  CFDD F03A          	movff	postdec2,??_gpio_Pin_Write_Logic+4
  2651   0014D8  C039  FFD9         	movff	??_gpio_Pin_Write_Logic+3,fsr2l
  2652   0014DC  C03A  FFDA         	movff	??_gpio_Pin_Write_Logic+4,fsr2h
  2653   0014E0  5037               	movf	(??_gpio_Pin_Write_Logic+1)^0,w,c
  2654   0014E2  12DF               	iorwf	indf2,f,c
  2655                           
  2656                           ;MCAL_LAYER/GPIO/hal_gpio.c: 86:             break;
  2657   0014E4  EF89  F00A         	goto	l2215
  2658   0014E8                     l2213:
  2659   0014E8  5035               	movf	gpio_Pin_Write_Logic@logic^0,w,c
  2660   0014EA  6E36               	movwf	??_gpio_Pin_Write_Logic^0,c
  2661   0014EC  6A37               	clrf	(??_gpio_Pin_Write_Logic+1)^0,c
  2662                           
  2663                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2664                           ; Switch size 1, requested type "simple"
  2665                           ; Number of cases is 1, Range of values is 0 to 0
  2666                           ; switch strategies available:
  2667                           ; Name         Instructions Cycles
  2668                           ; simple_byte            4     3 (average)
  2669                           ;	Chosen strategy is simple_byte
  2670   0014EE  5037               	movf	(??_gpio_Pin_Write_Logic+1)^0,w,c
  2671   0014F0  0A00               	xorlw	0	; case 0
  2672   0014F2  B4D8               	btfsc	status,2,c
  2673   0014F4  EF7E  F00A         	goto	l2883
  2674   0014F8  EF89  F00A         	goto	l2215
  2675   0014FC                     l2883:
  2676                           
  2677                           ; Switch size 1, requested type "simple"
  2678                           ; Number of cases is 2, Range of values is 0 to 1
  2679                           ; switch strategies available:
  2680                           ; Name         Instructions Cycles
  2681                           ; simple_byte            7     4 (average)
  2682                           ;	Chosen strategy is simple_byte
  2683   0014FC  5036               	movf	??_gpio_Pin_Write_Logic^0,w,c
  2684   0014FE  0A00               	xorlw	0	; case 0
  2685   001500  B4D8               	btfsc	status,2,c
  2686   001502  EF15  F00A         	goto	l2207
  2687   001506  0A01               	xorlw	1	; case 1
  2688   001508  B4D8               	btfsc	status,2,c
  2689   00150A  EF46  F00A         	goto	l2209
  2690   00150E  EF89  F00A         	goto	l2215
  2691   001512                     l2215:
  2692                           
  2693                           ;MCAL_LAYER/GPIO/hal_gpio.c: 88:     return ret;
  2694   001512  503C               	movf	gpio_Pin_Write_Logic@ret^0,w,c
  2695   001514  0012               	return		;funcret
  2696   001516                     __end_of_gpio_Pin_Write_Logic:
  2697                           	callstack 0
  2698                           
  2699 ;; *************** function _gpio_Pin_Derction_Intialize *****************
  2700 ;; Defined at:
  2701 ;;		line 24 in file "MCAL_LAYER/GPIO/hal_gpio.c"
  2702 ;; Parameters:    Size  Location     Type
  2703 ;;  pin_config      2    2[COMRAM] PTR const struct .
  2704 ;;		 -> PinOfExit(1), PinOfEntry(1), Lcd_Obj.lcd_data(4), Lcd_Obj(6), 
  2705 ;;		 -> DC_Exit.dc_motor_pin(2), DC_Exit(2), DC_Entry.dc_motor_pin(2), DC_Entry(2), 
  2706 ;; Auto vars:     Size  Location     Type
  2707 ;;  ret             1   10[COMRAM] unsigned char 
  2708 ;; Return value:  Size  Location     Type
  2709 ;;                  1    wreg      unsigned char 
  2710 ;; Registers used:
  2711 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2712 ;; Tracked objects:
  2713 ;;		On entry : 0/0
  2714 ;;		On exit  : 0/0
  2715 ;;		Unchanged: 0/0
  2716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2717 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2718 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2719 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2720 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2721 ;;Total ram usage:        9 bytes
  2722 ;; Hardware stack levels used: 1
  2723 ;; Hardware stack levels required when called: 3
  2724 ;; This function calls:
  2725 ;;		Nothing
  2726 ;; This function is called by:
  2727 ;;		_gpio_Pin_Intialize
  2728 ;; This function uses a non-reentrant model
  2729 ;;
  2730                           
  2731                           	psect	text17
  2732   0012A6                     __ptext17:
  2733                           	callstack 0
  2734   0012A6                     _gpio_Pin_Derction_Intialize:
  2735                           	callstack 25
  2736   0012A6                     
  2737                           ;MCAL_LAYER/GPIO/hal_gpio.c: 25:     Std_ReturnType ret=(Std_ReturnType)0x01;
  2738   0012A6  0E01               	movlw	1
  2739   0012A8  6E3B               	movwf	gpio_Pin_Derction_Intialize@ret^0,c
  2740   0012AA                     
  2741                           ;MCAL_LAYER/GPIO/hal_gpio.c: 26:     if ((((void*)0)==pin_config) || (pin_config->pin > 
      +                          8 -1)){
  2742   0012AA  5033               	movf	gpio_Pin_Derction_Intialize@pin_config^0,w,c
  2743   0012AC  1034               	iorwf	(gpio_Pin_Derction_Intialize@pin_config+1)^0,w,c
  2744   0012AE  B4D8               	btfsc	status,2,c
  2745   0012B0  EF5C  F009         	goto	u1191
  2746   0012B4  EF5E  F009         	goto	u1190
  2747   0012B8                     u1191:
  2748   0012B8  EF6F  F009         	goto	l2257
  2749   0012BC                     u1190:
  2750   0012BC  C033  FFD9         	movff	gpio_Pin_Derction_Intialize@pin_config,fsr2l
  2751   0012C0  C034  FFDA         	movff	gpio_Pin_Derction_Intialize@pin_config+1,fsr2h
  2752   0012C4  30DF               	rrcf	223,w,c
  2753   0012C6  32E8               	rrcf	wreg,f,c
  2754   0012C8  32E8               	rrcf	wreg,f,c
  2755   0012CA  0B07               	andlw	7
  2756   0012CC  6E35               	movwf	??_gpio_Pin_Derction_Intialize^0,c
  2757   0012CE  0E07               	movlw	7
  2758   0012D0  6435               	cpfsgt	??_gpio_Pin_Derction_Intialize^0,c
  2759   0012D2  EF6D  F009         	goto	u1201
  2760   0012D6  EF6F  F009         	goto	u1200
  2761   0012DA                     u1201:
  2762   0012DA  EFD2  F009         	goto	l2265
  2763   0012DE                     u1200:
  2764   0012DE                     l2257:
  2765                           
  2766                           ;MCAL_LAYER/GPIO/hal_gpio.c: 27:         ret=(Std_ReturnType)0x00;
  2767   0012DE  0E00               	movlw	0
  2768   0012E0  6E3B               	movwf	gpio_Pin_Derction_Intialize@ret^0,c
  2769                           
  2770                           ;MCAL_LAYER/GPIO/hal_gpio.c: 28:     }
  2771   0012E2  EFF3  F009         	goto	l2267
  2772   0012E6                     l2259:
  2773                           
  2774                           ;MCAL_LAYER/GPIO/hal_gpio.c: 32:                 (*tris_registers[pin_config->port] &=~(
      +                          (uint8)1 << pin_config->pin));
  2775   0012E6  C033  FFD9         	movff	gpio_Pin_Derction_Intialize@pin_config,fsr2l
  2776   0012EA  C034  FFDA         	movff	gpio_Pin_Derction_Intialize@pin_config+1,fsr2h
  2777   0012EE  30DF               	rrcf	223,w,c
  2778   0012F0  32E8               	rrcf	wreg,f,c
  2779   0012F2  32E8               	rrcf	wreg,f,c
  2780   0012F4  0B07               	andlw	7
  2781   0012F6  6E35               	movwf	??_gpio_Pin_Derction_Intialize^0,c
  2782   0012F8  0E01               	movlw	1
  2783   0012FA  6E36               	movwf	(??_gpio_Pin_Derction_Intialize+1)^0,c
  2784   0012FC  2A35               	incf	??_gpio_Pin_Derction_Intialize^0,f,c
  2785   0012FE  EF83  F009         	goto	u1214
  2786   001302                     u1215:
  2787   001302  90D8               	bcf	status,0,c
  2788   001304  3636               	rlcf	(??_gpio_Pin_Derction_Intialize+1)^0,f,c
  2789   001306                     u1214:
  2790   001306  2E35               	decfsz	??_gpio_Pin_Derction_Intialize^0,f,c
  2791   001308  EF81  F009         	goto	u1215
  2792   00130C  5036               	movf	(??_gpio_Pin_Derction_Intialize+1)^0,w,c
  2793   00130E  0AFF               	xorlw	255
  2794   001310  6E37               	movwf	(??_gpio_Pin_Derction_Intialize+2)^0,c
  2795   001312  C033  FFD9         	movff	gpio_Pin_Derction_Intialize@pin_config,fsr2l
  2796   001316  C034  FFDA         	movff	gpio_Pin_Derction_Intialize@pin_config+1,fsr2h
  2797   00131A  50DF               	movf	223,w,c
  2798   00131C  0B07               	andlw	7
  2799   00131E  6E38               	movwf	(??_gpio_Pin_Derction_Intialize+3)^0,c
  2800   001320  5038               	movf	(??_gpio_Pin_Derction_Intialize+3)^0,w,c
  2801   001322  0D02               	mullw	2
  2802   001324  0E15               	movlw	low _tris_registers
  2803   001326  24F3               	addwf	243,w,c
  2804   001328  6ED9               	movwf	fsr2l,c
  2805   00132A  0E00               	movlw	high _tris_registers
  2806   00132C  20F4               	addwfc	prodh,w,c
  2807   00132E  6EDA               	movwf	fsr2h,c
  2808   001330  CFDE F039          	movff	postinc2,??_gpio_Pin_Derction_Intialize+4
  2809   001334  CFDD F03A          	movff	postdec2,??_gpio_Pin_Derction_Intialize+5
  2810   001338  C039  FFD9         	movff	??_gpio_Pin_Derction_Intialize+4,fsr2l
  2811   00133C  C03A  FFDA         	movff	??_gpio_Pin_Derction_Intialize+5,fsr2h
  2812   001340  5037               	movf	(??_gpio_Pin_Derction_Intialize+2)^0,w,c
  2813   001342  16DF               	andwf	indf2,f,c
  2814                           
  2815                           ;MCAL_LAYER/GPIO/hal_gpio.c: 33:              break;
  2816   001344  EFF3  F009         	goto	l2267
  2817   001348                     l2261:
  2818                           
  2819                           ;MCAL_LAYER/GPIO/hal_gpio.c: 35:                 (*tris_registers[pin_config->port] |=((
      +                          uint8)1 << pin_config->pin));
  2820   001348  C033  FFD9         	movff	gpio_Pin_Derction_Intialize@pin_config,fsr2l
  2821   00134C  C034  FFDA         	movff	gpio_Pin_Derction_Intialize@pin_config+1,fsr2h
  2822   001350  30DF               	rrcf	223,w,c
  2823   001352  32E8               	rrcf	wreg,f,c
  2824   001354  32E8               	rrcf	wreg,f,c
  2825   001356  0B07               	andlw	7
  2826   001358  6E35               	movwf	??_gpio_Pin_Derction_Intialize^0,c
  2827   00135A  0E01               	movlw	1
  2828   00135C  6E36               	movwf	(??_gpio_Pin_Derction_Intialize+1)^0,c
  2829   00135E  2A35               	incf	??_gpio_Pin_Derction_Intialize^0,f,c
  2830   001360  EFB4  F009         	goto	u1224
  2831   001364                     u1225:
  2832   001364  90D8               	bcf	status,0,c
  2833   001366  3636               	rlcf	(??_gpio_Pin_Derction_Intialize+1)^0,f,c
  2834   001368                     u1224:
  2835   001368  2E35               	decfsz	??_gpio_Pin_Derction_Intialize^0,f,c
  2836   00136A  EFB2  F009         	goto	u1225
  2837   00136E  C033  FFD9         	movff	gpio_Pin_Derction_Intialize@pin_config,fsr2l
  2838   001372  C034  FFDA         	movff	gpio_Pin_Derction_Intialize@pin_config+1,fsr2h
  2839   001376  50DF               	movf	223,w,c
  2840   001378  0B07               	andlw	7
  2841   00137A  6E37               	movwf	(??_gpio_Pin_Derction_Intialize+2)^0,c
  2842   00137C  5037               	movf	(??_gpio_Pin_Derction_Intialize+2)^0,w,c
  2843   00137E  0D02               	mullw	2
  2844   001380  0E15               	movlw	low _tris_registers
  2845   001382  24F3               	addwf	243,w,c
  2846   001384  6ED9               	movwf	fsr2l,c
  2847   001386  0E00               	movlw	high _tris_registers
  2848   001388  20F4               	addwfc	prodh,w,c
  2849   00138A  6EDA               	movwf	fsr2h,c
  2850   00138C  CFDE F038          	movff	postinc2,??_gpio_Pin_Derction_Intialize+3
  2851   001390  CFDD F039          	movff	postdec2,??_gpio_Pin_Derction_Intialize+4
  2852   001394  C038  FFD9         	movff	??_gpio_Pin_Derction_Intialize+3,fsr2l
  2853   001398  C039  FFDA         	movff	??_gpio_Pin_Derction_Intialize+4,fsr2h
  2854   00139C  5036               	movf	(??_gpio_Pin_Derction_Intialize+1)^0,w,c
  2855   00139E  12DF               	iorwf	indf2,f,c
  2856                           
  2857                           ;MCAL_LAYER/GPIO/hal_gpio.c: 36:                 break;
  2858   0013A0  EFF3  F009         	goto	l2267
  2859   0013A4                     l2265:
  2860   0013A4  C033  FFD9         	movff	gpio_Pin_Derction_Intialize@pin_config,fsr2l
  2861   0013A8  C034  FFDA         	movff	gpio_Pin_Derction_Intialize@pin_config+1,fsr2h
  2862   0013AC  BCDF               	btfsc	indf2,6,c
  2863   0013AE  EFDB  F009         	goto	u1231
  2864   0013B2  EFDE  F009         	goto	u1230
  2865   0013B6                     u1231:
  2866   0013B6  0E01               	movlw	1
  2867   0013B8  EFDF  F009         	goto	u1240
  2868   0013BC                     u1230:
  2869   0013BC  0E00               	movlw	0
  2870   0013BE                     u1240:
  2871   0013BE  6E35               	movwf	??_gpio_Pin_Derction_Intialize^0,c
  2872   0013C0  6A36               	clrf	(??_gpio_Pin_Derction_Intialize+1)^0,c
  2873                           
  2874                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2875                           ; Switch size 1, requested type "simple"
  2876                           ; Number of cases is 1, Range of values is 0 to 0
  2877                           ; switch strategies available:
  2878                           ; Name         Instructions Cycles
  2879                           ; simple_byte            4     3 (average)
  2880                           ;	Chosen strategy is simple_byte
  2881   0013C2  5036               	movf	(??_gpio_Pin_Derction_Intialize+1)^0,w,c
  2882   0013C4  0A00               	xorlw	0	; case 0
  2883   0013C6  B4D8               	btfsc	status,2,c
  2884   0013C8  EFE8  F009         	goto	l2885
  2885   0013CC  EF6F  F009         	goto	l2257
  2886   0013D0                     l2885:
  2887                           
  2888                           ; Switch size 1, requested type "simple"
  2889                           ; Number of cases is 2, Range of values is 0 to 1
  2890                           ; switch strategies available:
  2891                           ; Name         Instructions Cycles
  2892                           ; simple_byte            7     4 (average)
  2893                           ;	Chosen strategy is simple_byte
  2894   0013D0  5035               	movf	??_gpio_Pin_Derction_Intialize^0,w,c
  2895   0013D2  0A00               	xorlw	0	; case 0
  2896   0013D4  B4D8               	btfsc	status,2,c
  2897   0013D6  EF73  F009         	goto	l2259
  2898   0013DA  0A01               	xorlw	1	; case 1
  2899   0013DC  B4D8               	btfsc	status,2,c
  2900   0013DE  EFA4  F009         	goto	l2261
  2901   0013E2  EF6F  F009         	goto	l2257
  2902   0013E6                     l2267:
  2903                           
  2904                           ;MCAL_LAYER/GPIO/hal_gpio.c: 40:     return ret;
  2905   0013E6  503B               	movf	gpio_Pin_Derction_Intialize@ret^0,w,c
  2906   0013E8  0012               	return		;funcret
  2907   0013EA                     __end_of_gpio_Pin_Derction_Intialize:
  2908                           	callstack 0
  2909                           
  2910 ;; *************** function __TimerDelay_ms *****************
  2911 ;; Defined at:
  2912 ;;		line 20 in file "MCAL_LAYER/Delay/M_Delay.c"
  2913 ;; Parameters:    Size  Location     Type
  2914 ;;  u16CopyDelay    2    9[COMRAM] unsigned short 
  2915 ;; Auto vars:     Size  Location     Type
  2916 ;;		None
  2917 ;; Return value:  Size  Location     Type
  2918 ;;                  1    wreg      void 
  2919 ;; Registers used:
  2920 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2921 ;; Tracked objects:
  2922 ;;		On entry : 0/0
  2923 ;;		On exit  : 0/0
  2924 ;;		Unchanged: 0/0
  2925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2926 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2929 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2930 ;;Total ram usage:        2 bytes
  2931 ;; Hardware stack levels used: 1
  2932 ;; Hardware stack levels required when called: 5
  2933 ;; This function calls:
  2934 ;;		_Timer0_DeInit
  2935 ;;		_Timer0_Init
  2936 ;; This function is called by:
  2937 ;;		_main
  2938 ;; This function uses a non-reentrant model
  2939 ;;
  2940                           
  2941                           	psect	text18
  2942   001BFA                     __ptext18:
  2943                           	callstack 0
  2944   001BFA                     __TimerDelay_ms:
  2945                           	callstack 25
  2946   001BFA                     
  2947                           ;MCAL_LAYER/Delay/M_Delay.c: 21:     Timer0_Init(&TimerDelay);
  2948   001BFA  0E25               	movlw	low _TimerDelay
  2949   001BFC  6E36               	movwf	Timer0_Init@_timer^0,c
  2950   001BFE  0E00               	movlw	high _TimerDelay
  2951   001C00  6E37               	movwf	(Timer0_Init@_timer+1)^0,c
  2952   001C02  ECD1  F00B         	call	_Timer0_Init	;wreg free
  2953   001C06                     l2457:
  2954   001C06  503A               	movf	__TimerDelay_ms@u16CopyDelay^0,w,c
  2955   001C08  1863               	xorwf	_u16DelayCounter^0,w,c	;volatile
  2956   001C0A  E107               	bnz	u1441
  2957   001C0C  503B               	movf	(__TimerDelay_ms@u16CopyDelay+1)^0,w,c
  2958   001C0E  1864               	xorwf	(_u16DelayCounter+1)^0,w,c	;volatile
  2959   001C10  A4D8               	btfss	status,2,c
  2960   001C12  EF0D  F00E         	goto	u1441
  2961   001C16  EF0F  F00E         	goto	u1440
  2962   001C1A                     u1441:
  2963   001C1A  EF03  F00E         	goto	l2457
  2964   001C1E                     u1440:
  2965   001C1E                     
  2966                           ;MCAL_LAYER/Delay/M_Delay.c: 23:     if(u16DelayCounter==u16CopyDelay){
  2967   001C1E  503A               	movf	__TimerDelay_ms@u16CopyDelay^0,w,c
  2968   001C20  1863               	xorwf	_u16DelayCounter^0,w,c	;volatile
  2969   001C22  E107               	bnz	u1451
  2970   001C24  503B               	movf	(__TimerDelay_ms@u16CopyDelay+1)^0,w,c
  2971   001C26  1864               	xorwf	(_u16DelayCounter+1)^0,w,c	;volatile
  2972   001C28  A4D8               	btfss	status,2,c
  2973   001C2A  EF19  F00E         	goto	u1451
  2974   001C2E  EF1B  F00E         	goto	u1450
  2975   001C32                     u1451:
  2976   001C32  EF1F  F00E         	goto	l2463
  2977   001C36                     u1450:
  2978   001C36                     
  2979                           ;MCAL_LAYER/Delay/M_Delay.c: 24:         u16DelayCounter=0;
  2980   001C36  0E00               	movlw	0
  2981   001C38  6E64               	movwf	(_u16DelayCounter+1)^0,c	;volatile
  2982   001C3A  0E00               	movlw	0
  2983   001C3C  6E63               	movwf	_u16DelayCounter^0,c	;volatile
  2984   001C3E                     l2463:
  2985                           
  2986                           ;MCAL_LAYER/Delay/M_Delay.c: 26:     Timer0_DeInit(&TimerDelay);
  2987   001C3E  0E25               	movlw	low _TimerDelay
  2988   001C40  6E33               	movwf	Timer0_DeInit@_timer^0,c
  2989   001C42  0E00               	movlw	high _TimerDelay
  2990   001C44  6E34               	movwf	(Timer0_DeInit@_timer+1)^0,c
  2991   001C46  EC5A  F00F         	call	_Timer0_DeInit	;wreg free
  2992   001C4A  0012               	return		;funcret
  2993   001C4C                     __end_of__TimerDelay_ms:
  2994                           	callstack 0
  2995                           
  2996 ;; *************** function _Timer0_Init *****************
  2997 ;; Defined at:
  2998 ;;		line 24 in file "MCAL_LAYER/TIMER0/hal_timer0.c"
  2999 ;; Parameters:    Size  Location     Type
  3000 ;;  _timer          2    5[COMRAM] PTR const struct .
  3001 ;;		 -> TimerDelay(6), 
  3002 ;; Auto vars:     Size  Location     Type
  3003 ;;  ret             1    0        unsigned char 
  3004 ;; Return value:  Size  Location     Type
  3005 ;;                  1    wreg      unsigned char 
  3006 ;; Registers used:
  3007 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3008 ;; Tracked objects:
  3009 ;;		On entry : 0/0
  3010 ;;		On exit  : 0/0
  3011 ;;		Unchanged: 0/0
  3012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3013 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3015 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3016 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3017 ;;Total ram usage:        4 bytes
  3018 ;; Hardware stack levels used: 1
  3019 ;; Hardware stack levels required when called: 4
  3020 ;; This function calls:
  3021 ;;		_Timer0_mode_of_register_size_selcet
  3022 ;;		_Timer0_mode_timer_or_counter_selcet
  3023 ;;		_Timer0_prescaler_selcet
  3024 ;; This function is called by:
  3025 ;;		__TimerDelay_ms
  3026 ;;		__TimerDelay_us
  3027 ;; This function uses a non-reentrant model
  3028 ;;
  3029                           
  3030                           	psect	text19
  3031   0017A2                     __ptext19:
  3032                           	callstack 0
  3033   0017A2                     _Timer0_Init:
  3034                           	callstack 25
  3035   0017A2                     
  3036                           ;MCAL_LAYER/TIMER0/hal_timer0.c: 26:         if (((void*)0)==_timer){
  3037   0017A2  5036               	movf	Timer0_Init@_timer^0,w,c
  3038   0017A4  1037               	iorwf	(Timer0_Init@_timer+1)^0,w,c
  3039   0017A6  A4D8               	btfss	status,2,c
  3040   0017A8  EFD8  F00B         	goto	u1341
  3041   0017AC  EFDA  F00B         	goto	u1340
  3042   0017B0                     u1341:
  3043   0017B0  EFDC  F00B         	goto	l178
  3044   0017B4                     u1340:
  3045   0017B4                     
  3046                           ;MCAL_LAYER/TIMER0/hal_timer0.c: 28:         }
  3047   0017B4  EF1D  F00C         	goto	l180
  3048   0017B8                     l178:
  3049                           
  3050                           ;MCAL_LAYER/TIMER0/hal_timer0.c: 31:             (T0CONbits.TMR0ON=0);
  3051   0017B8  9ED5               	bcf	213,7,c	;volatile
  3052   0017BA                     
  3053                           ;MCAL_LAYER/TIMER0/hal_timer0.c: 33:             Timer0_prescaler_selcet(_timer);
  3054   0017BA  C036  F033         	movff	Timer0_Init@_timer,Timer0_prescaler_selcet@_timer
  3055   0017BE  C037  F034         	movff	Timer0_Init@_timer+1,Timer0_prescaler_selcet@_timer+1
  3056   0017C2  EC7B  F00D         	call	_Timer0_prescaler_selcet	;wreg free
  3057                           
  3058                           ;MCAL_LAYER/TIMER0/hal_timer0.c: 35:             Timer0_mode_of_register_size_selcet(_ti
      +                          mer);
  3059   0017C6  C036  F033         	movff	Timer0_Init@_timer,Timer0_mode_of_register_size_selcet@_timer
  3060   0017CA  C037  F034         	movff	Timer0_Init@_timer+1,Timer0_mode_of_register_size_selcet@_timer+1
  3061   0017CE  ECD1  F00E         	call	_Timer0_mode_of_register_size_selcet	;wreg free
  3062                           
  3063                           ;MCAL_LAYER/TIMER0/hal_timer0.c: 38:             Timer0_mode_timer_or_counter_selcet(_ti
      +                          mer);
  3064   0017D2  C036  F033         	movff	Timer0_Init@_timer,Timer0_mode_timer_or_counter_selcet@_timer
  3065   0017D6  C037  F034         	movff	Timer0_Init@_timer+1,Timer0_mode_timer_or_counter_selcet@_timer+1
  3066   0017DA  EC62  F00C         	call	_Timer0_mode_timer_or_counter_selcet	;wreg free
  3067   0017DE                     
  3068                           ;MCAL_LAYER/TIMER0/hal_timer0.c: 40:             TMR0H=(_timer->timer0_preloaded_value) 
      +                          >> 8;
  3069   0017DE  EE20 F003          	lfsr	2,3
  3070   0017E2  5036               	movf	Timer0_Init@_timer^0,w,c
  3071   0017E4  26D9               	addwf	fsr2l,f,c
  3072   0017E6  5037               	movf	(Timer0_Init@_timer+1)^0,w,c
  3073   0017E8  22DA               	addwfc	fsr2h,f,c
  3074   0017EA  CFDE F038          	movff	postinc2,??_Timer0_Init
  3075   0017EE  CFDD F039          	movff	postdec2,??_Timer0_Init+1
  3076   0017F2  C039  F038         	movff	??_Timer0_Init+1,??_Timer0_Init
  3077   0017F6  6A39               	clrf	(??_Timer0_Init+1)^0,c
  3078   0017F8  5038               	movf	??_Timer0_Init^0,w,c
  3079   0017FA  6ED7               	movwf	215,c	;volatile
  3080   0017FC                     
  3081                           ;MCAL_LAYER/TIMER0/hal_timer0.c: 41:             TMR0L=(uint8)(_timer->timer0_preloaded_
      +                          value);
  3082   0017FC  EE20 F003          	lfsr	2,3
  3083   001800  5036               	movf	Timer0_Init@_timer^0,w,c
  3084   001802  26D9               	addwf	fsr2l,f,c
  3085   001804  5037               	movf	(Timer0_Init@_timer+1)^0,w,c
  3086   001806  22DA               	addwfc	fsr2h,f,c
  3087   001808  50DF               	movf	indf2,w,c
  3088   00180A  6ED6               	movwf	214,c	;volatile
  3089   00180C                     
  3090                           ;MCAL_LAYER/TIMER0/hal_timer0.c: 46:       preload_timer=_timer->timer0_preloaded_value;
  3091   00180C  EE20 F003          	lfsr	2,3
  3092   001810  5036               	movf	Timer0_Init@_timer^0,w,c
  3093   001812  26D9               	addwf	fsr2l,f,c
  3094   001814  5037               	movf	(Timer0_Init@_timer+1)^0,w,c
  3095   001816  22DA               	addwfc	fsr2h,f,c
  3096   001818  CFDE F05F          	movff	postinc2,_preload_timer
  3097   00181C  CFDD F060          	movff	postdec2,_preload_timer+1
  3098   001820                     
  3099                           ;MCAL_LAYER/TIMER0/hal_timer0.c: 47:        (INTCONbits.TMR0IE=1);
  3100   001820  8AF2               	bsf	242,5,c	;volatile
  3101   001822                     
  3102                           ;MCAL_LAYER/TIMER0/hal_timer0.c: 48:        (INTCONbits.TMR0IF=0);
  3103   001822  94F2               	bcf	242,2,c	;volatile
  3104   001824                     
  3105                           ;MCAL_LAYER/TIMER0/hal_timer0.c: 61:             (INTCONbits.GIE=1);
  3106   001824  8EF2               	bsf	242,7,c	;volatile
  3107   001826                     
  3108                           ;MCAL_LAYER/TIMER0/hal_timer0.c: 62:             (INTCONbits.PEIE=1);
  3109   001826  8CF2               	bsf	242,6,c	;volatile
  3110   001828                     
  3111                           ;MCAL_LAYER/TIMER0/hal_timer0.c: 64:            TIMER0_interruptHandler =_timer->TIMER0_
      +                          HandlerInterrupt;
  3112   001828  C036  FFD9         	movff	Timer0_Init@_timer,fsr2l
  3113   00182C  C037  FFDA         	movff	Timer0_Init@_timer+1,fsr2h
  3114   001830  CFDE F061          	movff	postinc2,_TIMER0_interruptHandler
  3115   001834  CFDD F062          	movff	postdec2,_TIMER0_interruptHandler+1
  3116   001838                     
  3117                           ;MCAL_LAYER/TIMER0/hal_timer0.c: 68:             (T0CONbits.TMR0ON=1);
  3118   001838  8ED5               	bsf	213,7,c	;volatile
  3119   00183A                     l180:
  3120   00183A  0012               	return		;funcret
  3121   00183C                     __end_of_Timer0_Init:
  3122                           	callstack 0
  3123                           
  3124 ;; *************** function _Timer0_prescaler_selcet *****************
  3125 ;; Defined at:
  3126 ;;		line 135 in file "MCAL_LAYER/TIMER0/hal_timer0.c"
  3127 ;; Parameters:    Size  Location     Type
  3128 ;;  _timer          2    2[COMRAM] PTR const struct .
  3129 ;;		 -> TimerDelay(6), 
  3130 ;; Auto vars:     Size  Location     Type
  3131 ;;		None
  3132 ;; Return value:  Size  Location     Type
  3133 ;;                  1    wreg      void 
  3134 ;; Registers used:
  3135 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3136 ;; Tracked objects:
  3137 ;;		On entry : 0/0
  3138 ;;		On exit  : 0/0
  3139 ;;		Unchanged: 0/0
  3140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3141 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3143 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3144 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3145 ;;Total ram usage:        3 bytes
  3146 ;; Hardware stack levels used: 1
  3147 ;; Hardware stack levels required when called: 3
  3148 ;; This function calls:
  3149 ;;		Nothing
  3150 ;; This function is called by:
  3151 ;;		_Timer0_Init
  3152 ;; This function uses a non-reentrant model
  3153 ;;
  3154                           
  3155                           	psect	text20
  3156   001AF6                     __ptext20:
  3157                           	callstack 0
  3158   001AF6                     _Timer0_prescaler_selcet:
  3159                           	callstack 25
  3160   001AF6                     
  3161                           ;MCAL_LAYER/TIMER0/hal_timer0.c: 136:     if (1==_timer->timer0_prescaler_enable){
  3162   001AF6  EE20 F005          	lfsr	2,5
  3163   001AFA  5033               	movf	Timer0_prescaler_selcet@_timer^0,w,c
  3164   001AFC  26D9               	addwf	fsr2l,f,c
  3165   001AFE  5034               	movf	(Timer0_prescaler_selcet@_timer+1)^0,w,c
  3166   001B00  22DA               	addwfc	fsr2h,f,c
  3167   001B02  A6DF               	btfss	indf2,3,c
  3168   001B04  EF86  F00D         	goto	u1251
  3169   001B08  EF88  F00D         	goto	u1250
  3170   001B0C                     u1251:
  3171   001B0C  EF98  F00D         	goto	l2281
  3172   001B10                     u1250:
  3173   001B10                     
  3174                           ;MCAL_LAYER/TIMER0/hal_timer0.c: 137:         (T0CONbits.PSA=0);
  3175   001B10  96D5               	bcf	213,3,c	;volatile
  3176   001B12                     
  3177                           ;MCAL_LAYER/TIMER0/hal_timer0.c: 138:         T0CONbits.T0PS=_timer->_prescaler_value;
  3178   001B12  EE20 F002          	lfsr	2,2
  3179   001B16  5033               	movf	Timer0_prescaler_selcet@_timer^0,w,c
  3180   001B18  26D9               	addwf	fsr2l,f,c
  3181   001B1A  5034               	movf	(Timer0_prescaler_selcet@_timer+1)^0,w,c
  3182   001B1C  22DA               	addwfc	fsr2h,f,c
  3183   001B1E  50DF               	movf	indf2,w,c
  3184   001B20  6E35               	movwf	??_Timer0_prescaler_selcet^0,c
  3185   001B22  50D5               	movf	213,w,c	;volatile
  3186   001B24  1835               	xorwf	??_Timer0_prescaler_selcet^0,w,c
  3187   001B26  0BF8               	andlw	-8
  3188   001B28  1835               	xorwf	??_Timer0_prescaler_selcet^0,w,c
  3189   001B2A  6ED5               	movwf	213,c	;volatile
  3190                           
  3191                           ;MCAL_LAYER/TIMER0/hal_timer0.c: 139:     }
  3192   001B2C  EFA6  F00D         	goto	l204
  3193   001B30                     l2281:
  3194   001B30  EE20 F005          	lfsr	2,5
  3195   001B34  5033               	movf	Timer0_prescaler_selcet@_timer^0,w,c
  3196   001B36  26D9               	addwf	fsr2l,f,c
  3197   001B38  5034               	movf	(Timer0_prescaler_selcet@_timer+1)^0,w,c
  3198   001B3A  22DA               	addwfc	fsr2h,f,c
  3199   001B3C  B6DF               	btfsc	indf2,3,c
  3200   001B3E  EFA3  F00D         	goto	u1261
  3201   001B42  EFA5  F00D         	goto	u1260
  3202   001B46                     u1261:
  3203   001B46  EFA6  F00D         	goto	l204
  3204   001B4A                     u1260:
  3205   001B4A                     
  3206                           ;MCAL_LAYER/TIMER0/hal_timer0.c: 141:         (T0CONbits.PSA=1);
  3207   001B4A  86D5               	bsf	213,3,c	;volatile
  3208   001B4C                     l204:
  3209   001B4C  0012               	return		;funcret
  3210   001B4E                     __end_of_Timer0_prescaler_selcet:
  3211                           	callstack 0
  3212                           
  3213 ;; *************** function _Timer0_mode_timer_or_counter_selcet *****************
  3214 ;; Defined at:
  3215 ;;		line 156 in file "MCAL_LAYER/TIMER0/hal_timer0.c"
  3216 ;; Parameters:    Size  Location     Type
  3217 ;;  _timer          2    2[COMRAM] PTR const struct .
  3218 ;;		 -> TimerDelay(6), 
  3219 ;; Auto vars:     Size  Location     Type
  3220 ;;		None
  3221 ;; Return value:  Size  Location     Type
  3222 ;;                  1    wreg      void 
  3223 ;; Registers used:
  3224 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3225 ;; Tracked objects:
  3226 ;;		On entry : 0/0
  3227 ;;		On exit  : 0/0
  3228 ;;		Unchanged: 0/0
  3229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3230 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3233 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3234 ;;Total ram usage:        2 bytes
  3235 ;; Hardware stack levels used: 1
  3236 ;; Hardware stack levels required when called: 3
  3237 ;; This function calls:
  3238 ;;		Nothing
  3239 ;; This function is called by:
  3240 ;;		_Timer0_Init
  3241 ;; This function uses a non-reentrant model
  3242 ;;
  3243                           
  3244                           	psect	text21
  3245   0018C4                     __ptext21:
  3246                           	callstack 0
  3247   0018C4                     _Timer0_mode_timer_or_counter_selcet:
  3248                           	callstack 25
  3249   0018C4                     
  3250                           ;MCAL_LAYER/TIMER0/hal_timer0.c: 157:     if (1==_timer->timer0_mode_timer_or_counter){
  3251   0018C4  EE20 F005          	lfsr	2,5
  3252   0018C8  5033               	movf	Timer0_mode_timer_or_counter_selcet@_timer^0,w,c
  3253   0018CA  26D9               	addwf	fsr2l,f,c
  3254   0018CC  5034               	movf	(Timer0_mode_timer_or_counter_selcet@_timer+1)^0,w,c
  3255   0018CE  22DA               	addwfc	fsr2h,f,c
  3256   0018D0  A2DF               	btfss	indf2,1,c
  3257   0018D2  EF6D  F00C         	goto	u1291
  3258   0018D6  EF6F  F00C         	goto	u1290
  3259   0018DA                     u1291:
  3260   0018DA  EF72  F00C         	goto	l2297
  3261   0018DE                     u1290:
  3262   0018DE                     
  3263                           ;MCAL_LAYER/TIMER0/hal_timer0.c: 158:         (T0CONbits.T0CS=0);
  3264   0018DE  9AD5               	bcf	213,5,c	;volatile
  3265                           
  3266                           ;MCAL_LAYER/TIMER0/hal_timer0.c: 159:     }
  3267   0018E0  EFA0  F00C         	goto	l221
  3268   0018E4                     l2297:
  3269   0018E4  EE20 F005          	lfsr	2,5
  3270   0018E8  5033               	movf	Timer0_mode_timer_or_counter_selcet@_timer^0,w,c
  3271   0018EA  26D9               	addwf	fsr2l,f,c
  3272   0018EC  5034               	movf	(Timer0_mode_timer_or_counter_selcet@_timer+1)^0,w,c
  3273   0018EE  22DA               	addwfc	fsr2h,f,c
  3274   0018F0  B2DF               	btfsc	indf2,1,c
  3275   0018F2  EF7D  F00C         	goto	u1301
  3276   0018F6  EF7F  F00C         	goto	u1300
  3277   0018FA                     u1301:
  3278   0018FA  EFA0  F00C         	goto	l221
  3279   0018FE                     u1300:
  3280   0018FE                     
  3281                           ;MCAL_LAYER/TIMER0/hal_timer0.c: 161:       (T0CONbits.T0CS=1);
  3282   0018FE  8AD5               	bsf	213,5,c	;volatile
  3283   001900                     
  3284                           ;MCAL_LAYER/TIMER0/hal_timer0.c: 162:       if (1==_timer->timer0_counter_edge){
  3285   001900  EE20 F005          	lfsr	2,5
  3286   001904  5033               	movf	Timer0_mode_timer_or_counter_selcet@_timer^0,w,c
  3287   001906  26D9               	addwf	fsr2l,f,c
  3288   001908  5034               	movf	(Timer0_mode_timer_or_counter_selcet@_timer+1)^0,w,c
  3289   00190A  22DA               	addwfc	fsr2h,f,c
  3290   00190C  A4DF               	btfss	indf2,2,c
  3291   00190E  EF8B  F00C         	goto	u1311
  3292   001912  EF8D  F00C         	goto	u1310
  3293   001916                     u1311:
  3294   001916  EF90  F00C         	goto	l2305
  3295   00191A                     u1310:
  3296   00191A                     
  3297                           ;MCAL_LAYER/TIMER0/hal_timer0.c: 163:           (T0CONbits.T0SE=0);
  3298   00191A  98D5               	bcf	213,4,c	;volatile
  3299                           
  3300                           ;MCAL_LAYER/TIMER0/hal_timer0.c: 164:       }
  3301   00191C  EFA0  F00C         	goto	l221
  3302   001920                     l2305:
  3303   001920  EE20 F005          	lfsr	2,5
  3304   001924  5033               	movf	Timer0_mode_timer_or_counter_selcet@_timer^0,w,c
  3305   001926  26D9               	addwf	fsr2l,f,c
  3306   001928  5034               	movf	(Timer0_mode_timer_or_counter_selcet@_timer+1)^0,w,c
  3307   00192A  22DA               	addwfc	fsr2h,f,c
  3308   00192C  B4DF               	btfsc	indf2,2,c
  3309   00192E  EF9B  F00C         	goto	u1321
  3310   001932  EF9D  F00C         	goto	u1320
  3311   001936                     u1321:
  3312   001936  EFA0  F00C         	goto	l220
  3313   00193A                     u1320:
  3314   00193A                     
  3315                           ;MCAL_LAYER/TIMER0/hal_timer0.c: 166:           (T0CONbits.T0SE=1);
  3316   00193A  88D5               	bsf	213,4,c	;volatile
  3317   00193C  EFA0  F00C         	goto	l221
  3318   001940                     l220:
  3319   001940                     l221:
  3320   001940  0012               	return		;funcret
  3321   001942                     __end_of_Timer0_mode_timer_or_counter_selcet:
  3322                           	callstack 0
  3323                           
  3324 ;; *************** function _Timer0_mode_of_register_size_selcet *****************
  3325 ;; Defined at:
  3326 ;;		line 146 in file "MCAL_LAYER/TIMER0/hal_timer0.c"
  3327 ;; Parameters:    Size  Location     Type
  3328 ;;  _timer          2    2[COMRAM] PTR const struct .
  3329 ;;		 -> TimerDelay(6), 
  3330 ;; Auto vars:     Size  Location     Type
  3331 ;;		None
  3332 ;; Return value:  Size  Location     Type
  3333 ;;                  1    wreg      void 
  3334 ;; Registers used:
  3335 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3336 ;; Tracked objects:
  3337 ;;		On entry : 0/0
  3338 ;;		On exit  : 0/0
  3339 ;;		Unchanged: 0/0
  3340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3341 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3344 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3345 ;;Total ram usage:        2 bytes
  3346 ;; Hardware stack levels used: 1
  3347 ;; Hardware stack levels required when called: 3
  3348 ;; This function calls:
  3349 ;;		Nothing
  3350 ;; This function is called by:
  3351 ;;		_Timer0_Init
  3352 ;; This function uses a non-reentrant model
  3353 ;;
  3354                           
  3355                           	psect	text22
  3356   001DA2                     __ptext22:
  3357                           	callstack 0
  3358   001DA2                     _Timer0_mode_of_register_size_selcet:
  3359                           	callstack 25
  3360   001DA2                     
  3361                           ;MCAL_LAYER/TIMER0/hal_timer0.c: 147:     if (1==_timer->timer0_mode_register_size){
  3362   001DA2  EE20 F005          	lfsr	2,5
  3363   001DA6  5033               	movf	Timer0_mode_of_register_size_selcet@_timer^0,w,c
  3364   001DA8  26D9               	addwf	fsr2l,f,c
  3365   001DAA  5034               	movf	(Timer0_mode_of_register_size_selcet@_timer+1)^0,w,c
  3366   001DAC  22DA               	addwfc	fsr2h,f,c
  3367   001DAE  A0DF               	btfss	indf2,0,c
  3368   001DB0  EFDC  F00E         	goto	u1271
  3369   001DB4  EFDE  F00E         	goto	u1270
  3370   001DB8                     u1271:
  3371   001DB8  EFE1  F00E         	goto	l2289
  3372   001DBC                     u1270:
  3373   001DBC                     
  3374                           ;MCAL_LAYER/TIMER0/hal_timer0.c: 148:         (T0CONbits.T08BIT=1);
  3375   001DBC  8CD5               	bsf	213,6,c	;volatile
  3376                           
  3377                           ;MCAL_LAYER/TIMER0/hal_timer0.c: 149:     }
  3378   001DBE  EFEF  F00E         	goto	l211
  3379   001DC2                     l2289:
  3380   001DC2  EE20 F005          	lfsr	2,5
  3381   001DC6  5033               	movf	Timer0_mode_of_register_size_selcet@_timer^0,w,c
  3382   001DC8  26D9               	addwf	fsr2l,f,c
  3383   001DCA  5034               	movf	(Timer0_mode_of_register_size_selcet@_timer+1)^0,w,c
  3384   001DCC  22DA               	addwfc	fsr2h,f,c
  3385   001DCE  B0DF               	btfsc	indf2,0,c
  3386   001DD0  EFEC  F00E         	goto	u1281
  3387   001DD4  EFEE  F00E         	goto	u1280
  3388   001DD8                     u1281:
  3389   001DD8  EFEF  F00E         	goto	l211
  3390   001DDC                     u1280:
  3391   001DDC                     
  3392                           ;MCAL_LAYER/TIMER0/hal_timer0.c: 151:       (T0CONbits.T08BIT=0);
  3393   001DDC  9CD5               	bcf	213,6,c	;volatile
  3394   001DDE                     l211:
  3395   001DDE  0012               	return		;funcret
  3396   001DE0                     __end_of_Timer0_mode_of_register_size_selcet:
  3397                           	callstack 0
  3398                           
  3399 ;; *************** function _Timer0_DeInit *****************
  3400 ;; Defined at:
  3401 ;;		line 79 in file "MCAL_LAYER/TIMER0/hal_timer0.c"
  3402 ;; Parameters:    Size  Location     Type
  3403 ;;  _timer          2    2[COMRAM] PTR const struct .
  3404 ;;		 -> TimerDelay(6), 
  3405 ;; Auto vars:     Size  Location     Type
  3406 ;;  ret             1    0        unsigned char 
  3407 ;; Return value:  Size  Location     Type
  3408 ;;                  1    wreg      unsigned char 
  3409 ;; Registers used:
  3410 ;;		wreg, status,2, status,0
  3411 ;; Tracked objects:
  3412 ;;		On entry : 0/0
  3413 ;;		On exit  : 0/0
  3414 ;;		Unchanged: 0/0
  3415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3416 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3419 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3420 ;;Total ram usage:        2 bytes
  3421 ;; Hardware stack levels used: 1
  3422 ;; Hardware stack levels required when called: 3
  3423 ;; This function calls:
  3424 ;;		Nothing
  3425 ;; This function is called by:
  3426 ;;		__TimerDelay_ms
  3427 ;;		__TimerDelay_us
  3428 ;; This function uses a non-reentrant model
  3429 ;;
  3430                           
  3431                           	psect	text23
  3432   001EB4                     __ptext23:
  3433                           	callstack 0
  3434   001EB4                     _Timer0_DeInit:
  3435                           	callstack 26
  3436   001EB4                     
  3437                           ;MCAL_LAYER/TIMER0/hal_timer0.c: 81:         if (((void*)0)==_timer){
  3438   001EB4  5033               	movf	Timer0_DeInit@_timer^0,w,c
  3439   001EB6  1034               	iorwf	(Timer0_DeInit@_timer+1)^0,w,c
  3440   001EB8  A4D8               	btfss	status,2,c
  3441   001EBA  EF61  F00F         	goto	u1351
  3442   001EBE  EF63  F00F         	goto	u1350
  3443   001EC2                     u1351:
  3444   001EC2  EF65  F00F         	goto	l183
  3445   001EC6                     u1350:
  3446   001EC6                     
  3447                           ;MCAL_LAYER/TIMER0/hal_timer0.c: 83:         }
  3448   001EC6  EF67  F00F         	goto	l185
  3449   001ECA                     l183:
  3450                           
  3451                           ;MCAL_LAYER/TIMER0/hal_timer0.c: 85:           (T0CONbits.TMR0ON=0);
  3452   001ECA  9ED5               	bcf	213,7,c	;volatile
  3453                           
  3454                           ;MCAL_LAYER/TIMER0/hal_timer0.c: 87:    (INTCONbits.TMR0IE=0);
  3455   001ECC  9AF2               	bcf	242,5,c	;volatile
  3456   001ECE                     l185:
  3457   001ECE  0012               	return		;funcret
  3458   001ED0                     __end_of_Timer0_DeInit:
  3459                           	callstack 0
  3460                           
  3461 ;; *************** function _interruptManager *****************
  3462 ;; Defined at:
  3463 ;;		line 19 in file "MCAL_LAYER/interrupt/mcal_interrupt_manager.c"
  3464 ;; Parameters:    Size  Location     Type
  3465 ;;		None
  3466 ;; Auto vars:     Size  Location     Type
  3467 ;;		None
  3468 ;; Return value:  Size  Location     Type
  3469 ;;                  1    wreg      void 
  3470 ;; Registers used:
  3471 ;;		wreg, status,2, status,0, pcl, pclath, pclatu, tosl, cstack
  3472 ;; Tracked objects:
  3473 ;;		On entry : 0/0
  3474 ;;		On exit  : 0/0
  3475 ;;		Unchanged: 0/0
  3476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3479 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3480 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3481 ;;Total ram usage:        2 bytes
  3482 ;; Hardware stack levels used: 1
  3483 ;; Hardware stack levels required when called: 2
  3484 ;; This function calls:
  3485 ;;		_TIMER0_ISR
  3486 ;;		_TIMER1_ISR
  3487 ;; This function is called by:
  3488 ;;		Interrupt level 2
  3489 ;; This function uses a non-reentrant model
  3490 ;;
  3491                           
  3492                           	psect	intcode
  3493   000008                     __pintcode:
  3494                           	callstack 0
  3495   000008                     _interruptManager:
  3496                           	callstack 23
  3497                           
  3498                           ;incstack = 0
  3499   000008  8265               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  3500   00000A  EDD2  F00D         	call	int_func,f	;refresh shadow registers
  3501                           
  3502                           	psect	intcode_body
  3503   001BA4                     __pintcode_body:
  3504                           	callstack 23
  3505   001BA4                     int_func:
  3506                           	callstack 23
  3507   001BA4  0006               	pop		; remove dummy address from shadow register refresh
  3508   001BA6  CFFA F031          	movff	pclath,??_interruptManager
  3509   001BAA  CFFB F032          	movff	pclatu,??_interruptManager+1
  3510   001BAE                     
  3511                           ;MCAL_LAYER/interrupt/mcal_interrupt_manager.c: 23:     if ((1==INTCONbits.TMR0IE) && (1
      +                          ==INTCONbits.TMR0IF)){
  3512   001BAE  AAF2               	btfss	242,5,c	;volatile
  3513   001BB0  EFDC  F00D         	goto	i2u71_41
  3514   001BB4  EFDE  F00D         	goto	i2u71_40
  3515   001BB8                     i2u71_41:
  3516   001BB8  EFE7  F00D         	goto	i2l1801
  3517   001BBC                     i2u71_40:
  3518   001BBC  A4F2               	btfss	242,2,c	;volatile
  3519   001BBE  EFE3  F00D         	goto	i2u72_41
  3520   001BC2  EFE5  F00D         	goto	i2u72_40
  3521   001BC6                     i2u72_41:
  3522   001BC6  EFE7  F00D         	goto	i2l1801
  3523   001BCA                     i2u72_40:
  3524   001BCA                     
  3525                           ;MCAL_LAYER/interrupt/mcal_interrupt_manager.c: 24:         TIMER0_ISR();
  3526   001BCA  EC27  F00F         	call	_TIMER0_ISR	;wreg free
  3527   001BCE                     i2l1801:
  3528                           
  3529                           ;MCAL_LAYER/interrupt/mcal_interrupt_manager.c: 28:     if ((1==PIE1bits.TMR1IE) && (1==
      +                          PIR1bits.TMR1IF)){
  3530   001BCE  A09D               	btfss	157,0,c	;volatile
  3531   001BD0  EFEC  F00D         	goto	i2u73_41
  3532   001BD4  EFEE  F00D         	goto	i2u73_40
  3533   001BD8                     i2u73_41:
  3534   001BD8  EFF7  F00D         	goto	i2l157
  3535   001BDC                     i2u73_40:
  3536   001BDC  A09E               	btfss	158,0,c	;volatile
  3537   001BDE  EFF3  F00D         	goto	i2u74_41
  3538   001BE2  EFF5  F00D         	goto	i2u74_40
  3539   001BE6                     i2u74_41:
  3540   001BE6  EFF7  F00D         	goto	i2l157
  3541   001BEA                     i2u74_40:
  3542   001BEA                     
  3543                           ;MCAL_LAYER/interrupt/mcal_interrupt_manager.c: 29:         TIMER1_ISR();
  3544   001BEA  EC68  F00F         	call	_TIMER1_ISR	;wreg free
  3545   001BEE                     i2l157:
  3546   001BEE  C032  FFFB         	movff	??_interruptManager+1,pclatu
  3547   001BF2  C031  FFFA         	movff	??_interruptManager,pclath
  3548   001BF6  9265               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  3549   001BF8  0011               	retfie		f
  3550   001BFA                     __end_of_interruptManager:
  3551                           	callstack 0
  3552                           
  3553 ;; *************** function _TIMER1_ISR *****************
  3554 ;; Defined at:
  3555 ;;		line 169 in file "MCAL_LAYER/TIMER1/hal_timer1.c"
  3556 ;; Parameters:    Size  Location     Type
  3557 ;;		None
  3558 ;; Auto vars:     Size  Location     Type
  3559 ;;		None
  3560 ;; Return value:  Size  Location     Type
  3561 ;;                  1    wreg      void 
  3562 ;; Registers used:
  3563 ;;		wreg, status,2
  3564 ;; Tracked objects:
  3565 ;;		On entry : 0/0
  3566 ;;		On exit  : 0/0
  3567 ;;		Unchanged: 0/0
  3568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3572 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3573 ;;Total ram usage:        0 bytes
  3574 ;; Hardware stack levels used: 1
  3575 ;; This function calls:
  3576 ;;		Nothing
  3577 ;; This function is called by:
  3578 ;;		_interruptManager
  3579 ;; This function uses a non-reentrant model
  3580 ;;
  3581                           
  3582                           	psect	text25
  3583   001ED0                     __ptext25:
  3584                           	callstack 0
  3585   001ED0                     _TIMER1_ISR:
  3586                           	callstack 24
  3587   001ED0                     
  3588                           ;MCAL_LAYER/TIMER1/hal_timer1.c: 171:     (PIR1bits.TMR1IF=0);
  3589   001ED0  909E               	bcf	158,0,c	;volatile
  3590   001ED2                     
  3591                           ;MCAL_LAYER/TIMER1/hal_timer1.c: 172:     TMR1H=(preload_timer1) >>8;
  3592   001ED2  505C               	movf	(_preload_timer1+1)^0,w,c
  3593   001ED4  6ECF               	movwf	207,c	;volatile
  3594   001ED6                     
  3595                           ;MCAL_LAYER/TIMER1/hal_timer1.c: 173:     TMR1L=(uint8)(preload_timer1);
  3596   001ED6  C05B  FFCE         	movff	_preload_timer1,4046	;volatile
  3597   001EDA  0012               	return		;funcret
  3598   001EDC                     __end_of_TIMER1_ISR:
  3599                           	callstack 0
  3600                           
  3601 ;; *************** function _TIMER0_ISR *****************
  3602 ;; Defined at:
  3603 ;;		line 173 in file "MCAL_LAYER/TIMER0/hal_timer0.c"
  3604 ;; Parameters:    Size  Location     Type
  3605 ;;		None
  3606 ;; Auto vars:     Size  Location     Type
  3607 ;;		None
  3608 ;; Return value:  Size  Location     Type
  3609 ;;                  1    wreg      void 
  3610 ;; Registers used:
  3611 ;;		wreg, status,2, status,0, pcl, pclath, pclatu, tosl, cstack
  3612 ;; Tracked objects:
  3613 ;;		On entry : 0/0
  3614 ;;		On exit  : 0/0
  3615 ;;		Unchanged: 0/0
  3616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3620 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3621 ;;Total ram usage:        0 bytes
  3622 ;; Hardware stack levels used: 1
  3623 ;; Hardware stack levels required when called: 1
  3624 ;; This function calls:
  3625 ;;		Absolute function
  3626 ;;		_Timer0Interrupt
  3627 ;; This function is called by:
  3628 ;;		_interruptManager
  3629 ;; This function uses a non-reentrant model
  3630 ;;
  3631                           
  3632                           	psect	text26
  3633   001E4E                     __ptext26:
  3634                           	callstack 0
  3635   001E4E                     _TIMER0_ISR:
  3636                           	callstack 23
  3637   001E4E                     
  3638                           ;MCAL_LAYER/TIMER0/hal_timer0.c: 175:     (INTCONbits.TMR0IF=0);
  3639   001E4E  94F2               	bcf	242,2,c	;volatile
  3640   001E50                     
  3641                           ;MCAL_LAYER/TIMER0/hal_timer0.c: 176:     TMR0H=(preload_timer) >> 8;
  3642   001E50  5060               	movf	(_preload_timer+1)^0,w,c
  3643   001E52  6ED7               	movwf	215,c	;volatile
  3644   001E54                     
  3645                           ;MCAL_LAYER/TIMER0/hal_timer0.c: 177:     TMR0L=(uint8)(preload_timer);
  3646   001E54  C05F  FFD6         	movff	_preload_timer,4054	;volatile
  3647   001E58                     
  3648                           ;MCAL_LAYER/TIMER0/hal_timer0.c: 178:     if (TIMER0_interruptHandler){
  3649   001E58  5061               	movf	_TIMER0_interruptHandler^0,w,c
  3650   001E5A  1062               	iorwf	(_TIMER0_interruptHandler+1)^0,w,c
  3651   001E5C  B4D8               	btfsc	status,2,c
  3652   001E5E  EF33  F00F         	goto	i2u38_41
  3653   001E62  EF35  F00F         	goto	i2u38_40
  3654   001E66                     i2u38_41:
  3655   001E66  EF41  F00F         	goto	i2l225
  3656   001E6A                     i2u38_40:
  3657   001E6A                     
  3658                           ;MCAL_LAYER/TIMER0/hal_timer0.c: 179:         TIMER0_interruptHandler();
  3659   001E6A  D802               	call	i2u39_48
  3660   001E6C  EF41  F00F         	goto	i2u39_49
  3661   001E70                     i2u39_48:
  3662   001E70  0005               	push	
  3663   001E72  6EFA               	movwf	pclath,c
  3664   001E74  5061               	movf	_TIMER0_interruptHandler^0,w,c
  3665   001E76  6EFD               	movwf	tosl,c
  3666   001E78  5062               	movf	(_TIMER0_interruptHandler+1)^0,w,c
  3667   001E7A  6EFE               	movwf	tosh,c
  3668   001E7C  6AFF               	clrf	tosu,c
  3669   001E7E  50FA               	movf	pclath,w,c
  3670   001E80  0012               	return		;indir
  3671   001E82                     i2u39_49:
  3672   001E82                     i2l225:
  3673   001E82  0012               	return		;funcret
  3674   001E84                     __end_of_TIMER0_ISR:
  3675                           	callstack 0
  3676                           
  3677 ;; *************** function _Timer0Interrupt *****************
  3678 ;; Defined at:
  3679 ;;		line 40 in file "MCAL_LAYER/Delay/M_Delay.c"
  3680 ;; Parameters:    Size  Location     Type
  3681 ;;		None
  3682 ;; Auto vars:     Size  Location     Type
  3683 ;;		None
  3684 ;; Return value:  Size  Location     Type
  3685 ;;                  1    wreg      void 
  3686 ;; Registers used:
  3687 ;;		status,2, status,0
  3688 ;; Tracked objects:
  3689 ;;		On entry : 0/0
  3690 ;;		On exit  : 0/0
  3691 ;;		Unchanged: 0/0
  3692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3694 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3696 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3697 ;;Total ram usage:        0 bytes
  3698 ;; Hardware stack levels used: 1
  3699 ;; This function calls:
  3700 ;;		Nothing
  3701 ;; This function is called by:
  3702 ;;		_TIMER0_ISR
  3703 ;; This function uses a non-reentrant model
  3704 ;;
  3705                           
  3706                           	psect	text27
  3707   001EDC                     __ptext27:
  3708                           	callstack 0
  3709   001EDC                     _Timer0Interrupt:
  3710                           	callstack 23
  3711   001EDC                     
  3712                           ;MCAL_LAYER/Delay/M_Delay.c: 41:     u16DelayCounter++;
  3713   001EDC  4A63               	infsnz	_u16DelayCounter^0,f,c	;volatile
  3714   001EDE  2A64               	incf	(_u16DelayCounter+1)^0,f,c	;volatile
  3715   001EE0  0012               	return		;funcret
  3716   001EE2                     __end_of_Timer0Interrupt:
  3717                           	callstack 0
  3718                           
  3719                           	psect	text28
  3720   000000                     __ptext28:
  3721                           	callstack 0
  3722   000000                     
  3723                           	psect	rparam
  3724   000000                     
  3725                           	psect	temp
  3726   000065                     btemp:
  3727                           	callstack 0
  3728   000065                     	ds	1
  3729   000000                     int$flags	set	btemp
  3730   000000                     wtemp8	set	btemp+1
  3731   000000                     ttemp5	set	btemp+1
  3732   000000                     ttemp6	set	btemp+4
  3733   000000                     ttemp7	set	btemp+8
  3734                           
  3735                           	psect	idloc
  3736                           
  3737                           ;Config register IDLOC0 @ 0x200000
  3738                           ;	unspecified, using default values
  3739   200000                     	org	2097152
  3740   200000  FF                 	db	255
  3741                           
  3742                           ;Config register IDLOC1 @ 0x200001
  3743                           ;	unspecified, using default values
  3744   200001                     	org	2097153
  3745   200001  FF                 	db	255
  3746                           
  3747                           ;Config register IDLOC2 @ 0x200002
  3748                           ;	unspecified, using default values
  3749   200002                     	org	2097154
  3750   200002  FF                 	db	255
  3751                           
  3752                           ;Config register IDLOC3 @ 0x200003
  3753                           ;	unspecified, using default values
  3754   200003                     	org	2097155
  3755   200003  FF                 	db	255
  3756                           
  3757                           ;Config register IDLOC4 @ 0x200004
  3758                           ;	unspecified, using default values
  3759   200004                     	org	2097156
  3760   200004  FF                 	db	255
  3761                           
  3762                           ;Config register IDLOC5 @ 0x200005
  3763                           ;	unspecified, using default values
  3764   200005                     	org	2097157
  3765   200005  FF                 	db	255
  3766                           
  3767                           ;Config register IDLOC6 @ 0x200006
  3768                           ;	unspecified, using default values
  3769   200006                     	org	2097158
  3770   200006  FF                 	db	255
  3771                           
  3772                           ;Config register IDLOC7 @ 0x200007
  3773                           ;	unspecified, using default values
  3774   200007                     	org	2097159
  3775   200007  FF                 	db	255
  3776                           
  3777                           	psect	config
  3778                           
  3779                           ; Padding undefined space
  3780   300000                     	org	3145728
  3781   300000  FF                 	db	255
  3782                           
  3783                           ;Config register CONFIG1H @ 0x300001
  3784                           ;	Oscillator Selection bits
  3785                           ;	OSC = INTIO67, Internal oscillator block, port function on RA6 and RA7
  3786                           ;	Fail-Safe Clock Monitor Enable bit
  3787                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  3788                           ;	Internal/External Oscillator Switchover bit
  3789                           ;	IESO = OFF, Oscillator Switchover mode disabled
  3790   300001                     	org	3145729
  3791   300001  08                 	db	8
  3792                           
  3793                           ;Config register CONFIG2L @ 0x300002
  3794                           ;	Power-up Timer Enable bit
  3795                           ;	PWRT = OFF, PWRT disabled
  3796                           ;	Brown-out Reset Enable bits
  3797                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  3798                           ;	Brown Out Reset Voltage bits
  3799                           ;	BORV = 1, 
  3800   300002                     	org	3145730
  3801   300002  09                 	db	9
  3802                           
  3803                           ;Config register CONFIG2H @ 0x300003
  3804                           ;	Watchdog Timer Enable bit
  3805                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3806                           ;	Watchdog Timer Postscale Select bits
  3807                           ;	WDTPS = 512, 1:512
  3808   300003                     	org	3145731
  3809   300003  12                 	db	18
  3810                           
  3811                           ; Padding undefined space
  3812   300004                     	org	3145732
  3813   300004  FF                 	db	255
  3814                           
  3815                           ;Config register CONFIG3H @ 0x300005
  3816                           ;	CCP2 MUX bit
  3817                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  3818                           ;	PORTB A/D Enable bit
  3819                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  3820                           ;	Low-Power Timer1 Oscillator Enable bit
  3821                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  3822                           ;	MCLR Pin Enable bit
  3823                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  3824   300005                     	org	3145733
  3825   300005  81                 	db	129
  3826                           
  3827                           ;Config register CONFIG4L @ 0x300006
  3828                           ;	Stack Full/Underflow Reset Enable bit
  3829                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3830                           ;	Single-Supply ICSP Enable bit
  3831                           ;	LVP = OFF, Single-Supply ICSP disabled
  3832                           ;	Extended Instruction Set Enable bit
  3833                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  3834                           ;	Background Debugger Enable bit
  3835                           ;	DEBUG = 0x1, unprogrammed default
  3836   300006                     	org	3145734
  3837   300006  81                 	db	129
  3838                           
  3839                           ; Padding undefined space
  3840   300007                     	org	3145735
  3841   300007  FF                 	db	255
  3842                           
  3843                           ;Config register CONFIG5L @ 0x300008
  3844                           ;	Code Protection bit
  3845                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
  3846                           ;	Code Protection bit
  3847                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
  3848                           ;	Code Protection bit
  3849                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
  3850                           ;	Code Protection bit
  3851                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
  3852   300008                     	org	3145736
  3853   300008  0F                 	db	15
  3854                           
  3855                           ;Config register CONFIG5H @ 0x300009
  3856                           ;	Boot Block Code Protection bit
  3857                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  3858                           ;	Data EEPROM Code Protection bit
  3859                           ;	CPD = OFF, Data EEPROM not code-protected
  3860   300009                     	org	3145737
  3861   300009  C0                 	db	192
  3862                           
  3863                           ;Config register CONFIG6L @ 0x30000A
  3864                           ;	Write Protection bit
  3865                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
  3866                           ;	Write Protection bit
  3867                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
  3868                           ;	Write Protection bit
  3869                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
  3870                           ;	Write Protection bit
  3871                           ;	WRT3 = OFF, Block 3 (00C000-00FFFFh) not write-protected
  3872   30000A                     	org	3145738
  3873   30000A  0F                 	db	15
  3874                           
  3875                           ;Config register CONFIG6H @ 0x30000B
  3876                           ;	Configuration Register Write Protection bit
  3877                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  3878                           ;	Boot Block Write Protection bit
  3879                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  3880                           ;	Data EEPROM Write Protection bit
  3881                           ;	WRTD = OFF, Data EEPROM not write-protected
  3882   30000B                     	org	3145739
  3883   30000B  E0                 	db	224
  3884                           
  3885                           ;Config register CONFIG7L @ 0x30000C
  3886                           ;	Table Read Protection bit
  3887                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
  3888                           ;	Table Read Protection bit
  3889                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
  3890                           ;	Table Read Protection bit
  3891                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
  3892                           ;	Table Read Protection bit
  3893                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
  3894   30000C                     	org	3145740
  3895   30000C  0F                 	db	15
  3896                           
  3897                           ;Config register CONFIG7H @ 0x30000D
  3898                           ;	Boot Block Table Read Protection bit
  3899                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  3900   30000D                     	org	3145741
  3901   30000D  40                 	db	64
  3902                           tosu	equ	0xFFF
  3903                           tosh	equ	0xFFE
  3904                           tosl	equ	0xFFD
  3905                           stkptr	equ	0xFFC
  3906                           pclatu	equ	0xFFB
  3907                           pclath	equ	0xFFA
  3908                           pcl	equ	0xFF9
  3909                           tblptru	equ	0xFF8
  3910                           tblptrh	equ	0xFF7
  3911                           tblptrl	equ	0xFF6
  3912                           tablat	equ	0xFF5
  3913                           prodh	equ	0xFF4
  3914                           prodl	equ	0xFF3
  3915                           indf0	equ	0xFEF
  3916                           postinc0	equ	0xFEE
  3917                           postdec0	equ	0xFED
  3918                           preinc0	equ	0xFEC
  3919                           plusw0	equ	0xFEB
  3920                           fsr0h	equ	0xFEA
  3921                           fsr0l	equ	0xFE9
  3922                           wreg	equ	0xFE8
  3923                           indf1	equ	0xFE7
  3924                           postinc1	equ	0xFE6
  3925                           postdec1	equ	0xFE5
  3926                           preinc1	equ	0xFE4
  3927                           plusw1	equ	0xFE3
  3928                           fsr1h	equ	0xFE2
  3929                           fsr1l	equ	0xFE1
  3930                           bsr	equ	0xFE0
  3931                           indf2	equ	0xFDF
  3932                           postinc2	equ	0xFDE
  3933                           postdec2	equ	0xFDD
  3934                           preinc2	equ	0xFDC
  3935                           plusw2	equ	0xFDB
  3936                           fsr2h	equ	0xFDA
  3937                           fsr2l	equ	0xFD9
  3938                           status	equ	0xFD8

Data Sizes:
    Strings     81
    Constant    0
    Data        48
    BSS         16
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     36     100
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    vfprintf$2	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf$1	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_3(CODE[3]), STR_2(CODE[3]), STR_1(CODE[3]), 

    vfprintf$0	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    S1613$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S1613$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    dc_motor_stop@dc_motor	PTR struct . size(2) Largest target is 2
		 -> DC_Exit(COMRAM[2]), DC_Entry(COMRAM[2]), 

    dc_motor_move_left@dc_motor	PTR struct . size(2) Largest target is 2
		 -> DC_Exit(COMRAM[2]), DC_Entry(COMRAM[2]), 

    dc_motor_move_right@dc_motor	PTR struct . size(2) Largest target is 2
		 -> DC_Exit(COMRAM[2]), DC_Entry(COMRAM[2]), 

    dc_motor_initialize@dc_motor	PTR struct . size(2) Largest target is 2
		 -> DC_Exit(COMRAM[2]), DC_Entry(COMRAM[2]), 

    set_cursor_4bit_mode@_lcd	PTR const struct . size(2) Largest target is 6
		 -> Lcd_Obj(COMRAM[6]), 

    send_4bit_mode_enable@_lcd	PTR const struct . size(2) Largest target is 6
		 -> Lcd_Obj(COMRAM[6]), 

    send_data_4bit_mode@_lcd	PTR const struct . size(2) Largest target is 6
		 -> Lcd_Obj(COMRAM[6]), 

    sp__memset	PTR void  size(2) Largest target is 0

    lcd_4bit_send_string_data_pos@str	PTR unsigned char  size(2) Largest target is 18
		 -> STR_10(CODE[18]), STR_7(CODE[15]), STR_5(CODE[18]), 

    lcd_4bit_send_string_data_pos@_lcd	PTR const struct . size(2) Largest target is 6
		 -> Lcd_Obj(COMRAM[6]), 

    lcd_4bit_send_string_data@str	PTR unsigned char  size(2) Largest target is 17
		 -> STR_9(CODE[6]), STR_8(CODE[11]), STR_6(CODE[17]), STR_4(CODE[17]), 

    lcd_4bit_send_string_data@_lcd	PTR const struct . size(2) Largest target is 6
		 -> Lcd_Obj(COMRAM[6]), 

    lcd_4bit_send_char_data_pos@_lcd	PTR const struct . size(2) Largest target is 6
		 -> Lcd_Obj(COMRAM[6]), 

    lcd_4bit_send_char_data@_lcd	PTR const struct . size(2) Largest target is 6
		 -> Lcd_Obj(COMRAM[6]), 

    lcd_4bit_send_command@_lcd	PTR const struct . size(2) Largest target is 6
		 -> Lcd_Obj(COMRAM[6]), 

    lcd_4bit_initialize@_lcd	PTR const struct . size(2) Largest target is 6
		 -> Lcd_Obj(COMRAM[6]), 

    timer1_select_reg_mode@_timer.TIMER1_HandlerInterrupt	PTR FTN()void  size(2) Largest target is 0

    timer1_oscillator_enable@_timer.TIMER1_HandlerInterrupt	PTR FTN()void  size(2) Largest target is 0

    timer1_select_mode_timer_or_counter@_timer.TIMER1_HandlerInterrupt	PTR FTN()void  size(2) Largest target is 0

    TIMER1_interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    S501$TIMER1_HandlerInterrupt	PTR FTN()void  size(2) Largest target is 0

    Timer1_Init@_timer.TIMER1_HandlerInterrupt	PTR FTN()void  size(2) Largest target is 0

    Timer0_mode_timer_or_counter_selcet@_timer.TIMER0_HandlerInterrupt	PTR FTN()void  size(2) Largest target is 1
		 -> Timer0Interrupt(), 

    Timer0_mode_timer_or_counter_selcet@_timer	PTR const struct . size(2) Largest target is 6
		 -> TimerDelay(COMRAM[6]), 

    Timer0_mode_of_register_size_selcet@_timer.TIMER0_HandlerInterrupt	PTR FTN()void  size(2) Largest target is 1
		 -> Timer0Interrupt(), 

    Timer0_mode_of_register_size_selcet@_timer	PTR const struct . size(2) Largest target is 6
		 -> TimerDelay(COMRAM[6]), 

    Timer0_prescaler_selcet@_timer.TIMER0_HandlerInterrupt	PTR FTN()void  size(2) Largest target is 1
		 -> Timer0Interrupt(), 

    Timer0_prescaler_selcet@_timer	PTR const struct . size(2) Largest target is 6
		 -> TimerDelay(COMRAM[6]), 

    Timer0_DeInit@_timer	PTR const struct . size(2) Largest target is 6
		 -> TimerDelay(COMRAM[6]), 

    TIMER0_interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), Timer0Interrupt(), 

    Timer0_Init@_timer.TIMER0_HandlerInterrupt	PTR FTN()void  size(2) Largest target is 1
		 -> Timer0Interrupt(), 

    Timer0_Init@_timer	PTR const struct . size(2) Largest target is 6
		 -> TimerDelay(COMRAM[6]), 

    gpio_Pin_Intialize@pin_config	PTR const struct . size(2) Largest target is 6
		 -> PinOfExit(COMRAM[1]), PinOfEntry(COMRAM[1]), Lcd_Obj.lcd_data(COMRAM[4]), Lcd_Obj(COMRAM[6]), 
		 -> DC_Exit.dc_motor_pin(COMRAM[2]), DC_Exit(COMRAM[2]), DC_Entry.dc_motor_pin(COMRAM[2]), DC_Entry(COMRAM[2]), 

    gpio_Pin_Read_Logic@logic	PTR enum E2965 size(2) Largest target is 1
		 -> main@u8ReadExitPin(COMRAM[1]), main@u8ReadEntryPin(COMRAM[1]), 

    gpio_Pin_Read_Logic@pin_config	PTR const struct . size(2) Largest target is 1
		 -> PinOfExit(COMRAM[1]), PinOfEntry(COMRAM[1]), 

    gpio_Pin_Write_Logic@pin_config	PTR const struct . size(2) Largest target is 6
		 -> PinOfExit(COMRAM[1]), PinOfEntry(COMRAM[1]), Lcd_Obj.lcd_data(COMRAM[4]), Lcd_Obj(COMRAM[6]), 
		 -> DC_Exit.dc_motor_pin(COMRAM[2]), DC_Exit(COMRAM[2]), DC_Entry.dc_motor_pin(COMRAM[2]), DC_Entry(COMRAM[2]), 

    gpio_Pin_Derction_Intialize@pin_config	PTR const struct . size(2) Largest target is 6
		 -> PinOfExit(COMRAM[1]), PinOfEntry(COMRAM[1]), Lcd_Obj.lcd_data(COMRAM[4]), Lcd_Obj(COMRAM[6]), 
		 -> DC_Exit.dc_motor_pin(COMRAM[2]), DC_Exit(COMRAM[2]), DC_Entry.dc_motor_pin(COMRAM[2]), DC_Entry(COMRAM[2]), 

    port_registers	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> PORTE(BITBIGSFRll[1]), PORTD(BITBIGSFRll[1]), PORTC(BITBIGSFRll[1]), PORTB(BITBIGSFRll[1]), 
		 -> PORTA(BITBIGSFRll[1]), 

    lat_registers	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> LATE(BITBIGSFRlh[1]), LATD(BITBIGSFRlh[1]), LATC(BITBIGSFRlh[1]), LATB(BITBIGSFRlh[1]), 
		 -> LATA(BITBIGSFRll[1]), 

    tris_registers	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> TRISE(BITBIGSFRhll[1]), TRISD(BITBIGSFRhll[1]), TRISC(BITBIGSFRhll[1]), TRISB(BITBIGSFRhll[1]), 
		 -> TRISA(BITBIGSFRll[1]), 

    S34$TIMER0_HandlerInterrupt	PTR FTN()void  size(2) Largest target is 1
		 -> Timer0Interrupt(), 

    TimerDelay.TIMER0_HandlerInterrupt	PTR FTN()void  size(2) Largest target is 1
		 -> Timer0Interrupt(), 


Critical Paths under _main in COMRAM

    _main->_lcd_4bit_send_char_data_pos
    _main->_lcd_4bit_send_string_data_pos
    _lcd_4bit_send_string_data_pos->_set_cursor_4bit_mode
    _lcd_4bit_send_string_data->_lcd_4bit_send_char_data
    _lcd_4bit_send_char_data_pos->_set_cursor_4bit_mode
    _set_cursor_4bit_mode->_lcd_4bit_send_command
    _lcd_4bit_send_char_data->_send_data_4bit_mode
    _lcd_4bit_initialize->_lcd_4bit_send_command
    _lcd_4bit_send_command->_send_data_4bit_mode
    _send_data_4bit_mode->_gpio_Pin_Write_Logic
    _send_4bit_mode_enable->_gpio_Pin_Write_Logic
    _dc_motor_stop->_gpio_Pin_Write_Logic
    _dc_motor_move_right->_gpio_Pin_Write_Logic
    _dc_motor_move_left->_gpio_Pin_Write_Logic
    _dc_motor_initialize->_gpio_Pin_Intialize
    _gpio_Pin_Intialize->_gpio_Pin_Write_Logic
    __TimerDelay_ms->_Timer0_Init
    _Timer0_Init->_Timer0_prescaler_selcet

Critical Paths under _interruptManager in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _interruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0  123633
                                             33 COMRAM     3     3      0
                     __TimerDelay_ms
                _dc_motor_initialize
                 _dc_motor_move_left
                _dc_motor_move_right
                      _dc_motor_stop
                 _gpio_Pin_Intialize
                _gpio_Pin_Read_Logic
                _lcd_4bit_initialize
        _lcd_4bit_send_char_data_pos
              _lcd_4bit_send_command
          _lcd_4bit_send_string_data
      _lcd_4bit_send_string_data_pos
 ---------------------------------------------------------------------------------
 (1) _lcd_4bit_send_string_data_pos                        7     1      6   27912
                                             27 COMRAM     6     0      6
            _lcd_4bit_send_char_data
               _set_cursor_4bit_mode
 ---------------------------------------------------------------------------------
 (1) _lcd_4bit_send_string_data                            5     1      4   12859
                                             20 COMRAM     4     0      4
            _lcd_4bit_send_char_data
 ---------------------------------------------------------------------------------
 (1) _lcd_4bit_send_char_data_pos                          6     1      5   27905
                                             27 COMRAM     6     1      5
            _lcd_4bit_send_char_data
               _set_cursor_4bit_mode
 ---------------------------------------------------------------------------------
 (2) _set_cursor_4bit_mode                                 7     3      4   14682
                                             20 COMRAM     7     3      4
              _lcd_4bit_send_command
 ---------------------------------------------------------------------------------
 (2) _lcd_4bit_send_char_data                              4     1      3   12153
                                             16 COMRAM     4     1      3
               _gpio_Pin_Write_Logic
              _send_4bit_mode_enable
                _send_data_4bit_mode
 ---------------------------------------------------------------------------------
 (1) _lcd_4bit_initialize                                  6     4      2   18949
                                             20 COMRAM     6     4      2
                 _gpio_Pin_Intialize
              _lcd_4bit_send_command
 ---------------------------------------------------------------------------------
 (3) _lcd_4bit_send_command                                4     1      3   13977
                                             16 COMRAM     4     1      3
               _gpio_Pin_Write_Logic
              _send_4bit_mode_enable
                _send_data_4bit_mode
 ---------------------------------------------------------------------------------
 (4) _send_data_4bit_mode                                  4     1      3    4204
                                             12 COMRAM     4     1      3
               _gpio_Pin_Write_Logic
 ---------------------------------------------------------------------------------
 (4) _send_4bit_mode_enable                                3     1      2    3766
                                             12 COMRAM     3     1      2
               _gpio_Pin_Write_Logic
 ---------------------------------------------------------------------------------
 (1) _gpio_Pin_Read_Logic                                 10     6      4     444
                                              2 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (1) _dc_motor_stop                                        3     1      2    3598
                                             12 COMRAM     3     1      2
               _gpio_Pin_Write_Logic
 ---------------------------------------------------------------------------------
 (1) _dc_motor_move_right                                  3     1      2    3598
                                             12 COMRAM     3     1      2
               _gpio_Pin_Write_Logic
 ---------------------------------------------------------------------------------
 (1) _dc_motor_move_left                                   3     1      2    3598
                                             12 COMRAM     3     1      2
               _gpio_Pin_Write_Logic
 ---------------------------------------------------------------------------------
 (1) _dc_motor_initialize                                  3     1      2    4749
                                             16 COMRAM     3     1      2
                 _gpio_Pin_Intialize
 ---------------------------------------------------------------------------------
 (2) _gpio_Pin_Intialize                                   4     2      2    4521
                                             12 COMRAM     4     2      2
        _gpio_Pin_Derction_Intialize
               _gpio_Pin_Write_Logic
 ---------------------------------------------------------------------------------
 (5) _gpio_Pin_Write_Logic                                10     7      3    3370
                                              2 COMRAM    10     7      3
 ---------------------------------------------------------------------------------
 (3) _gpio_Pin_Derction_Intialize                          9     7      2     255
                                              2 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 (1) __TimerDelay_ms                                       2     0      2    1294
                                              9 COMRAM     2     0      2
                      _Timer0_DeInit
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (2) _Timer0_Init                                          5     3      2     763
                                              5 COMRAM     4     2      2
_Timer0_mode_of_register_size_selcet
_Timer0_mode_timer_or_counter_selcet
            _Timer0_prescaler_selcet
 ---------------------------------------------------------------------------------
 (3) _Timer0_prescaler_selcet                              3     1      2     142
                                              2 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _Timer0_mode_timer_or_counter_selcet                  2     0      2     164
                                              2 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _Timer0_mode_of_register_size_selcet                  2     0      2     120
                                              2 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _Timer0_DeInit                                        3     1      2     183
                                              2 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _interruptManager                                     2     2      0       0
                                              0 COMRAM     2     2      0
                         _TIMER0_ISR
                         _TIMER1_ISR
 ---------------------------------------------------------------------------------
 (7) _TIMER1_ISR                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TIMER0_ISR                                           0     0      0       0
                   Absolute function *
                    _Timer0Interrupt *
 ---------------------------------------------------------------------------------
 (8) _Timer0Interrupt                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   __TimerDelay_ms
     _Timer0_DeInit
     _Timer0_Init
       _Timer0_mode_of_register_size_selcet
       _Timer0_mode_timer_or_counter_selcet
       _Timer0_prescaler_selcet
   _dc_motor_initialize
     _gpio_Pin_Intialize
       _gpio_Pin_Derction_Intialize
       _gpio_Pin_Write_Logic
   _dc_motor_move_left
     _gpio_Pin_Write_Logic
   _dc_motor_move_right
     _gpio_Pin_Write_Logic
   _dc_motor_stop
     _gpio_Pin_Write_Logic
   _gpio_Pin_Intialize
   _gpio_Pin_Read_Logic
   _lcd_4bit_initialize
     _gpio_Pin_Intialize
     _lcd_4bit_send_command
       _gpio_Pin_Write_Logic
       _send_4bit_mode_enable
         _gpio_Pin_Write_Logic
       _send_data_4bit_mode
         _gpio_Pin_Write_Logic
   _lcd_4bit_send_char_data_pos
     _lcd_4bit_send_char_data
       _gpio_Pin_Write_Logic
       _send_4bit_mode_enable
       _send_data_4bit_mode
     _set_cursor_4bit_mode
       _lcd_4bit_send_command
   _lcd_4bit_send_command
   _lcd_4bit_send_string_data
     _lcd_4bit_send_char_data
   _lcd_4bit_send_string_data_pos
     _lcd_4bit_send_char_data
     _set_cursor_4bit_mode

 _interruptManager (ROOT)
   _TIMER0_ISR
     Absolute function(Fake) *
     _Timer0Interrupt *
   _TIMER1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      45        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      34        0.0%
BANK15              80      0       0      35        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     24      64       1       79.4%
BITBIGSFRhlhlll     22      0       0      40        0.0%
BITBIGSFRhlhhh      1A      0       0      37        0.0%
BITBIGSFRhh          D      0       0      36        0.0%
BITBIGSFRhlhllh      B      0       0      39        0.0%
BITBIGSFRhll         6      0       0      41        0.0%
BITBIGSFRhlhlhh      5      0       0      38        0.0%
BITBIGSFRlh          4      0       0      42        0.0%
BITBIGSFRll          4      0       0      43        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      64      44        0.0%
DATA                 0      0      64       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Thu Jun 15 17:07:56 2023

                                         l17 1C4A                                           l75 13E8  
                                         l92 1514                                           l99 17A0  
                                        l111 1AF4                                          l211 1DDE  
                                        l220 1940                                          l204 1B4C  
                                        l221 1940                                          l180 183A  
                                        l334 1A24                                          l183 1ECA  
                                        l344 1CE0                                          l352 1BA2  
                                        l360 1A92                                          l185 1ECE  
                                        l441 18C2                                          l329 1634  
                                        l178 17B8                                          l339 19B2  
                                        l540 10D0                                          l446 1C9A  
                                        l542 1172                                          l463 16F2  
                                        l484 1E16                                          l494 1DA0  
                                        l489 1D60                                          l499 1D20  
                                        prod 000FF3                                          tosl 000FFD  
                                        wreg 000FE8                         _set_cursor_4bit_mode 1636  
               lcd_4bit_send_string_data@str 0047                                         l2201 13EE  
                                       l2203 1400                                         l2301 1900  
                                       l2213 14E8                                         l2205 1422  
                                       l2303 191A                                         l2215 1512  
                                       l2207 142A                                         l2231 18C0  
                                       l2223 183C                                         l2311 19B4  
                                       l2305 1920                                         l2321 17A2  
                                       l2209 148C                                         l2241 1C66  
                                       l2225 183C                                         l2313 19C6  
                                       l2401 169E                                         l2307 193A  
                                       l2331 17FC                                         l2323 17A2  
                                       l2251 12A6                                         l2243 1C7A  
                                       l2235 1C4C                                         l2227 184E  
                                       l2315 19CE                                         l2403 16B6  
                                       l2341 1826                                         l2333 180C  
                                       l2325 17B4                                         l2261 1348  
                                       l2253 12AA                                         l2245 1C82  
                                       l2237 1C4C                                         l2229 1856  
                                       l2317 1A22                                         l2309 19B4  
                                       l2501 1590                                         l2405 16F0  
                                       l2351 1EB4                                         l2343 1828  
                                       l2335 1820                                         l2327 17BA  
                                       l2255 12BC                                         l2247 1C98  
                                       l2239 1C5E                                         l2511 15E4  
                                       l2503 15A0                                         l2353 1EB4  
                                       l2281 1B30                                         l2345 1838  
                                       l2337 1822                                         l2329 17DE  
                                       l2265 13A4                                         l2257 12DE  
                                       l2361 1A94                                         l2601 1DE0  
                                       l2513 15F4                                         l2505 15BE  
                                       l2355 1EC6                                         l2291 1DDC  
                                       l2283 1B4A                                         l2275 1AF6  
                                       l2347 183A                                         l2339 1824  
                                       l2259 12E6                                         l2267 13E6  
                                       l2371 1AD4                                         l2363 1A94  
                                       l2603 1DF2                                         l2611 1D22  
                                       l2515 1604                                         l2507 15C4  
                                       l2531 1CDE                                         l2523 1C9C  
                                       l2357 1ECE                                         l2285 1DA2  
                                       l2293 18C4                                         l2277 1B10  
                                       l2461 1C36                                         l2365 1AA6  
                                       l2605 1DF6                                         l2621 1D62  
                                       l2613 1D34                                         l2517 1614  
                                       l2509 15D4                                         l2381 195C  
                                       l2525 1C9C                                         l2541 1B64  
                                       l2287 1DBC                                         l2295 18DE  
                                       l2279 1B12                                         l2463 1C3E  
                                       l2455 1BFA                                         l2199 13EA  
                                       l2367 1AC8                                         l2623 1D74  
                                       l2615 1D38                                         l2631 1CE2  
                                       l2471 1718                                         l2519 1624  
                                       l2383 19B0                                         l2375 1942  
                                       l2391 163C                                         l2527 1CAE  
                                       l2543 1B80                                         l2535 1B4E  
                                       l2551 1A38                                         l2289 1DC2  
                                       l2297 18E4                                         l2457 1C06  
                                       l2369 1AC8                                         l2625 1D78  
                                       l2609 1D22                                         l2633 1CF4  
                                       l2473 173A                                         l2465 16F4  
                                       l2481 151A                                         l2377 1942  
                                       l2393 164E                                         l2529 1CB6  
                                       l2545 1B84                                         l2537 1B4E  
                                       l2553 1A3C                                         l2801 1070  
                                       l2299 18FE                                         l2459 1C1E  
                                       l2619 1D62                                         l2635 1CF8  
                                       l2475 173E                                         l2467 16F4  
                                       l2483 152C                                         l2379 1954  
                                       l2395 1656                                         l2387 1636  
                                       l2539 1B60                                         l2555 1A54  
                                       l2547 1A26                                         l2811 10C4  
                                       l2803 107C                                         l2629 1CE2  
                                       l2469 1706                                         l2493 1554  
                                       l2485 1530                                         l2397 166E  
                                       l2389 163A                                         l2557 1A70  
                                       l2549 1A26                                         l2821 1104  
                                       l2813 10C8                                         l2805 1088  
                                       l2495 1570                                         l2487 1550  
                                       l2479 1516                                         l2399 1686  
                                       l2559 1A74                                         l2831 1156  
                                       l2823 1106                                         l2815 10CC  
                                       l2807 1094                                         l2497 1572  
                                       l2841 11C2                                         l2833 117E  
                                       l2825 1120                                         l2817 10E4  
                                       l2809 10A8                                         l2499 1582  
                                       l2851 1204                                         l2843 11D2  
                                       l2835 118A                                         l2827 1132  
                                       l2819 10F4                                         l2861 126E  
                                       l2853 1218                                         l2845 11E2  
                                       l2837 11A2                                         l2829 1142  
                                       l2599 1DE0                                         l2863 127A  
                                       l2855 1232                                         l2847 11F2  
                                       l2839 11AE                                         l2881 16CA  
                                       l2865 1286                                         l2857 1246  
                                       l2849 11F4                                         l2883 14FC  
                                       l2867 1292                                         l2859 1262  
                                       l2795 1054                                         l2885 13D0  
                                       l2797 1058                                         l2799 1064  
                                       STR_1 104F                                         STR_4 1013  
                                       STR_5 1001                                         STR_6 1024  
                                       STR_7 1035                                         STR_8 1044  
                                       STR_9 101E                                         u1200 12DE  
                                       u1201 12DA                                         u1130 1400  
                                       u1131 13FC                                         u1300 18FE  
                                       u1140 1422                                         u1301 18FA  
                                       u1141 141E                                         u1310 191A  
                                       u1230 13BC                                         u1214 1306  
                                       u1311 1916                                         u1231 13B6  
                                       u1215 1302                                         u1320 193A  
                                       u1240 13BE                                         u1224 1368  
                                       u1321 1936                                         u1225 1364  
                                       u1250 1B10                                         u1154 144A  
                                       u1170 184E                                         u1330 19C6  
                                       u1251 1B0C                                         u1155 1446  
                                       u1171 184A                                         u1331 19C2  
                                       u1260 1B4A                                         u1340 17B4  
                                       u1164 14AC                                         u1180 1C5E  
                                       u1500 152C                                         u1261 1B46  
                                       u1341 17B0                                         u1165 14A8  
                                       u1181 1C5A                                         u1501 1528  
                                       _LATA 000F89                                         u1350 1EC6  
                                       u1270 1DBC                                         u1190 12BC  
                                       u1510 1582                                         _LATB 000F8A  
                                       u1351 1EC2                                         u1271 1DB8  
                                       u1191 12B8                                         u1511 157E  
                                       _LATC 000F8B                                         u1280 1DDC  
                                       u1440 1C1E                                         u1360 1AA6  
                                       u1520 1CAE                                         _LATD 000F8C  
                                       u1281 1DD8                                         u1441 1C1A  
                                       u1361 1AA2                                         u1521 1CAA  
                                       _LATE 000F8D                                         u1290 18DE  
                                       u1450 1C36                                         u1370 1AC8  
                                       u1610 1DF2                                         u1530 1B60  
                                       u1291 18DA                                         u1451 1C32  
                                       u1371 1AC4                                         u1611 1DEE  
                                       u1531 1B5C                                         u1620 1D34  
                                       u1460 1706                                         u1380 1954  
                                       u1540 1BA2                                         u1621 1D30  
                                       u1461 1702                                         u1381 1950  
                                       u1541 1B9E                                         u1630 1D74  
                                       u1470 1718                                         u1390 164E  
                                       u1550 1A38                                         u1631 1D70  
                                       u1471 1714                                         u1391 164A  
                                       u1551 1A34                                         u1640 1CF4  
                                       u1480 173A                                         u1560 1A92  
                                       u1800 1132                                         u1641 1CF0  
                                       u1481 1736                                         u1561 1A8E  
                                       u1801 112E                                         u1810 11D2  
                                       u1811 11CE                                         u1820 11E2  
                                       u1821 11DE                                         u1494 178C  
                                       u1830 11F2                                         u1495 1788  
                                       u1831 11EE                                         u1780 10F4  
                                       u1781 10F0                                         u1790 1104  
                                       u1847 1588                                         u1791 1100  
                                       u1857 15A6                                         u1867 15C0  
                                       u1877 1C7C                                         i2l27 1EE0  
                     ??_gpio_Pin_Write_Logic 0036                                         _main 1054  
               gpio_Pin_Intialize@pin_config 003D                                         fsr2h 000FDA  
                                       indf2 000FDF                                         fsr1l 000FE1  
                                       fsr2l 000FD9                                         btemp 0065  
          lcd_4bit_send_char_data_pos@column 004F                     __end_of_interruptManager 1BFA  
                                       prodl 000FF3                                         start 000E  
                               ___param_bank 000000                        _lcd_4bit_send_command 19B4  
                     dc_motor_initialize@ret 0043                                  ?_TIMER0_ISR 0031  
                                ?_TIMER1_ISR 0031                        _send_4bit_mode_enable 1C4C  
                                      ?_main 0031                    _lcd_4bit_send_string_data 1B4E  
                                      STR_10 1001                                main@u8Counter 0054  
                                      i2l225 1E82                                        i2l157 1BEE  
                                      i2l298 1EDA                                        _TMR0H 000FD7  
                                      _TMR1H 000FCF                                        _TMR0L 000FD6  
                                      _TMR1L 000FCE                                        _PORTA 000F80  
                                      _PORTB 000F81                                        _PORTC 000F82  
                                      _PORTD 000F83                                        _PORTE 000F84  
                                      _TRISA 000F92                                        _TRISB 000F93  
                                      _TRISC 000F94                                        _TRISD 000F95  
                                      _TRISE 000F96                            Timer0_Init@_timer 0036  
              Timer0_prescaler_selcet@_timer 0033                        ?_set_cursor_4bit_mode 0045  
                          ??_Timer0Interrupt 0031               gpio_Pin_Write_Logic@pin_config 0033  
                      __end_of_Timer0_DeInit 1ED0              __end_of_Timer0_prescaler_selcet 1B4E  
                 __end_of_gpio_Pin_Intialize 1AF6                                        pclath 000FFA  
                                      pclatu 000FFB                                        tablat 000FF5  
      __end_of_lcd_4bit_send_string_data_pos 1A94                _lcd_4bit_send_string_data_pos 1A26  
                                      ttemp5 0066                                        ttemp6 0069  
                                      ttemp7 006D                                        status 000FD8  
                                      wtemp8 0066                      set_cursor_4bit_mode@ret 004B  
                    set_cursor_4bit_mode@row 0047                              __initialization 1E18  
                               __end_of_main 12A6                                   _PinOfEntry 0030  
      gpio_Pin_Derction_Intialize@pin_config 0033                                _lat_registers 000B  
                __end_of_dc_motor_initialize 1E18                                       ??_main 0052  
                  lcd_4bit_send_command@_lcd 0041                                __activetblptr 000003  
                __end_of_send_data_4bit_mode 18C4                                       i2l1403 1EDC  
                                     i2l1531 1E6A                                       i2l1523 1E4E  
                                     i2l1525 1E50                                       i2l1533 1ED0  
                                     i2l1527 1E54                                       i2l1535 1ED2  
                                     i2l1529 1E58                                       i2l1537 1ED6  
                                     i2l1801 1BCE                                       i2l1803 1BDC  
                                     i2l1805 1BEA                                       i2l1795 1BAE  
                                     i2l1797 1BBC                                       i2l1799 1BCA  
                              ??_Timer0_Init 0038                gpio_Pin_Read_Logic@pin_config 0033  
                __end_of_dc_motor_move_right 1D62                       ?_lcd_4bit_send_command 0041  
        __end_of_gpio_Pin_Derction_Intialize 13EA                  _gpio_Pin_Derction_Intialize 12A6  
                                 _TimerDelay 0025                  __end_of_gpio_Pin_Read_Logic 17A2  
                     ?_send_4bit_mode_enable 003D    Timer0_mode_timer_or_counter_selcet@_timer 0033  
                                     clear_0 1E3E                                       isa$std 000001  
                            _u16DelayCounter 0063                                 __pdataCOMRAM 0001  
                     ??_set_cursor_4bit_mode 0049                                 __mediumconst 0000  
                                     tblptrh 000FF7                                       tblptrl 000FF6  
                                     tblptru 000FF8                     set_cursor_4bit_mode@_lcd 0045  
                                 __accesstop 0080                      __end_of__initialization 1E44  
                              ___rparam_used 000001                      _lcd_4bit_send_char_data 1942  
             ?_lcd_4bit_send_string_data_pos 004C                               __pcstackCOMRAM 0031  
                     send_data_4bit_mode@ret 0040                          __end_of_Timer0_Init 183C  
                   lcd_4bit_send_command@ret 0044                      gpio_Pin_Write_Logic@ret 003C  
                        Timer0_DeInit@_timer 0033                 ?_lcd_4bit_send_char_data_pos 004C  
                          ?_interruptManager 0031                           ??_interruptManager 0031  
                               ??_TIMER0_ISR 0031                                 ??_TIMER1_ISR 0031  
                            _Timer0Interrupt 1EDC               gpio_Pin_Derction_Intialize@ret 003B  
                                    _DC_Exit 002B                                      i2u38_40 1E6A  
                                    i2u38_41 1E66                                      i2u71_40 1BBC  
                                    i2u71_41 1BB8                                      i2u39_48 1E70  
                                    i2u72_40 1BCA                                      i2u39_49 1E82  
                                    i2u72_41 1BC6                                      i2u73_40 1BDC  
                                    i2u73_41 1BD8                                      i2u74_40 1BEA  
                                    i2u74_41 1BE6            __end_of_lcd_4bit_send_string_data 1BA4  
                             __TimerDelay_ms 1BFA          lcd_4bit_send_string_data_pos@column 004F  
                             _tris_registers 0015                           __end_of_TIMER0_ISR 1E84  
                         __end_of_TIMER1_ISR 1EDC                                      _Lcd_Obj 001F  
                  ??_lcd_4bit_send_char_data 0044                                      __Hparam 0000  
                                _Timer0_Init 17A2                                      __Lparam 0000  
                      dc_motor_move_left@ret 003F                           _gpio_Pin_Intialize 1A94  
  Timer0_mode_of_register_size_selcet@_timer 0033                                 __psmallconst 1000  
                                    __pcinit 1E18                                      __ramtop 1000  
                                    __ptext0 1054                                      __ptext1 1A26  
                                    __ptext2 1B4E                                      __ptext3 1C9C  
                                    __ptext4 1636                                      __ptext5 1942  
                                    __ptext6 1516                                      __ptext7 19B4  
                                    __ptext8 183C                                      __ptext9 1C4C  
                        ?_gpio_Pin_Intialize 003D                                    _T0CONbits 000FD5  
                                  _T1CONbits 000FCD                       __end_of__TimerDelay_ms 1C4C  
                             __pintcode_body 1BA4                         end_of_initialization 1E44  
                                    int_func 1BA4                         ??_gpio_Pin_Intialize 003F  
                    ??_lcd_4bit_send_command 0044                      __end_of_Timer0Interrupt 1EE2  
                   send_4bit_mode_enable@ret 003F                                _dc_motor_stop 1CE2  
                    ??_send_4bit_mode_enable 003F                            main@u8ReadExitPin 0053  
                                    postdec1 000FE5                                      postdec2 000FDD  
                                    postinc0 000FEE                                      postinc2 000FDE  
                    _Timer0_prescaler_selcet 1AF6                          _lcd_4bit_initialize 1516  
                dc_motor_move_right@dc_motor 003D              __end_of_lcd_4bit_send_char_data 19B4  
                 lcd_4bit_send_char_data@ret 0044                              ?__TimerDelay_ms 003A  
            lcd_4bit_send_char_data_pos@_lcd 004C              lcd_4bit_send_char_data_pos@data 0050  
                       ?_lcd_4bit_initialize 0045                    send_4bit_mode_enable@_lcd 003D  
                    _TIMER0_interruptHandler 0061                               ?_dc_motor_stop 003D  
                              __pidataCOMRAM 1E84                      send_data_4bit_mode@_lcd 003D  
                    send_data_4bit_mode@data 003F                          start_initialization 1E18  
                                  _PinOfExit 002F                        ??_lcd_4bit_initialize 0047  
                              _Timer0_DeInit 1EB4            lcd_4bit_send_string_data_pos@_lcd 004C  
                           ?_Timer0Interrupt 0031                   __end_of_dc_motor_move_left 1DA2  
                  ??_Timer0_prescaler_selcet 0035                 lcd_4bit_send_command@command 0043  
                           dc_motor_stop@ret 003F                        gpio_Pin_Intialize@ret 0040  
                                __pbssCOMRAM 0055                               ?_Timer0_DeInit 0033  
                             _preload_timer1 005B                   dc_motor_move_left@dc_motor 003D  
                            ??_dc_motor_stop 003F                                 ?_Timer0_Init 0036  
              lcd_4bit_send_string_data@_lcd 0045                                    __pintcode 0008  
                    _TIMER1_interruptHandler 005D                 __end_of_gpio_Pin_Write_Logic 1516  
          lcd_convert_uint16_to_string@F3197 0055                                  __smallconst 1000  
__end_of_Timer0_mode_of_register_size_selcet 1DE0        ??_Timer0_mode_of_register_size_selcet 0035  
       ?_Timer0_mode_of_register_size_selcet 0033          _Timer0_mode_of_register_size_selcet 1DA2  
                                   _DC_Entry 002D                   ?_lcd_4bit_send_string_data 0045  
                __TimerDelay_ms@u16CopyDelay 003A                                     _PIE1bits 000F9D  
              __end_of_lcd_4bit_send_command 1A26                                     _PIR1bits 000F9E  
                        _dc_motor_initialize 1DE0                __end_of_send_4bit_mode_enable 1C9C  
               ?_gpio_Pin_Derction_Intialize 0033                   set_cursor_4bit_mode@column 0048  
                        _send_data_4bit_mode 183C                                   _ADCON1bits 000FC1  
             lcd_4bit_send_char_data_pos@ret 0051               lcd_4bit_send_char_data_pos@row 004E  
                           ??__TimerDelay_ms 003C                              ??_Timer0_DeInit 0035  
        __end_of_lcd_4bit_send_char_data_pos 1CE2                  _lcd_4bit_send_char_data_pos 1C9C  
                       ?_dc_motor_initialize 0041                     ?_lcd_4bit_send_char_data 0041  
                                  copy_data0 1E2C                         ?_send_data_4bit_mode 003D  
                        _dc_motor_move_right 1D22                ??_lcd_4bit_send_char_data_pos 0051  
                  gpio_Pin_Write_Logic@logic 0035                          _gpio_Pin_Read_Logic 16F4  
                                   __Hrparam 0000             lcd_4bit_send_string_data_pos@row 004E  
           lcd_4bit_send_string_data_pos@str 0050                                     __Lrparam 0000  
                      dc_motor_stop@dc_motor 003D                ??_gpio_Pin_Derction_Intialize 0035  
                       ?_dc_motor_move_right 003D                                _preload_timer 005F  
                           _interruptManager 0008                         ?_gpio_Pin_Read_Logic 0033  
                      ??_dc_motor_initialize 0043                                     __ptext10 16F4  
                                   __ptext11 1CE2                                     __ptext20 1AF6  
                                   __ptext12 1D22                                     __ptext21 18C4  
                                   __ptext13 1D62                                     __ptext22 1DA2  
                                   __ptext14 1DE0                                     __ptext23 1EB4  
                                   __ptext15 1A94                                     __ptext16 13EA  
                                   __ptext25 1ED0                                     __ptext17 12A6  
                                   __ptext26 1E4E                                     __ptext18 1BFA  
                                   __ptext27 1EDC                                     __ptext19 17A2  
                                   __ptext28 0000                       dc_motor_move_right@ret 003F  
                      ??_send_data_4bit_mode 0040                         _gpio_Pin_Write_Logic 13EA  
               __end_of_set_cursor_4bit_mode 16F4  __end_of_Timer0_mode_timer_or_counter_selcet 1942  
      ??_Timer0_mode_timer_or_counter_selcet 0035         ?_Timer0_mode_timer_or_counter_selcet 0033  
        _Timer0_mode_timer_or_counter_selcet 18C4                                     isa$xinst 000000  
               lcd_4bit_initialize@l_counter 004A                                     int$flags 0065  
                dc_motor_initialize@dc_motor 0041                        ??_dc_motor_move_right 003F  
                      ??_gpio_Pin_Read_Logic 0037                           _dc_motor_move_left 1D62  
                                 _INTCONbits 000FF2                  __end_of_lcd_4bit_initialize 1636  
                        ?_dc_motor_move_left 003D                                     intlevel2 0000  
                      ?_gpio_Pin_Write_Logic 0033                     gpio_Pin_Read_Logic@logic 0035  
                       ??_dc_motor_move_left 003F                           main@u8ReadEntryPin 0052  
                                 _TIMER0_ISR 1E4E                                   _TIMER1_ISR 1ED0  
                         fp__Timer0Interrupt 0000                               _port_registers 0001  
            ??_lcd_4bit_send_string_data_pos 0052                  lcd_4bit_send_char_data@_lcd 0041  
                lcd_4bit_send_char_data@data 0043                  ??_lcd_4bit_send_string_data 0049  
                   ?_Timer0_prescaler_selcet 0033                      lcd_4bit_initialize@_lcd 0045  
                      __end_of_dc_motor_stop 1D22                       lcd_4bit_initialize@ret 0049  
